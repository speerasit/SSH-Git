create or replace PACKAGE BODY X_BE AS
--create or replace PACKAGE BODY   

procedure WEEKLY_BLACKLIST_DATA_FILE 
    AS 
    
    BEGIN
  
      declare
        fHandle UTL_FILE.FILE_TYPE; 
        v_date varchar2(11);
        TYPE GenCurTyp IS REF CURSOR;
        detail GenCurTyp;
        v_time_loaded date;
        v_filename varchar2(100);
        v_processing_status varchar2(20);
        v_count_file number;
        v_count_card number;  
        v_log varchar2(300);

      begin
        fHandle :=utl_file.fopen('EX_BE','Weekly_blacklist_file_from_BBL'|| to_char(sysdate,'YYYYMMDD') ||'.csv','w');--Opening a file
        
        v_log := 'TIME_LOADED,FILE_NAME,PROCESSING_STATUS,COUNT_FILE,COUNT_CARD';
        UTL_FILE.PUT_LINE(fHandle, v_log);
      
      -----------------Detail------------------  
      open detail for 
      ------***************Detail****************----------
       
       select trunc(time_loaded) as time_loaded,
        case when file_name like '%_0000.%' then 'DEBIT' 
             when file_name like '%_0100.%' then 'CREDIT'
        end as filename,
        processing_status,count(distinct file_name) as count_file,count(bss_card_number) as count_card
        from ATUAGENT.atu_blacklist_file_detail
        where trunc(time_loaded) between trunc(sysdate-7) and trunc(sysdate-1)
        group by trunc(time_loaded),processing_status,case when file_name like '%_0000.%' then 'DEBIT' 
             when file_name like '%_0100.%' then 'CREDIT'
        end
        order by trunc(time_loaded),processing_status
        ;
  
       ------***************Detail****************-----------;
      loop
        fetch detail into 
        v_time_loaded,
        v_filename,
        v_processing_status,
        v_count_file,
        v_count_card
        ; 

        EXIT WHEN detail%NOTFOUND;
        
          v_log := v_time_loaded || ',' || v_filename || ',' || v_processing_status || ',' || v_count_file || ',' || v_count_card|| ',' || CHR(13);
          UTL_FILE.PUT_LINE(fHandle, v_log);
          UTL_FILE.FFLUSH(fHandle);
        
        end loop;
        close detail;
      ------------------------------------------
      UTL_FILE.FCLOSE(fHandle);
      end;
      
      declare
        fHandle UTL_FILE.FILE_TYPE; 
        v_date varchar2(11);
        TYPE GenCurTyp IS REF CURSOR;
        detail GenCurTyp;
        v_state_description varchar2(50);
        v_card_type varchar2(30);
        v_action number;
        v_action_reason varchar2(20);
        v_count_card number;  
        v_remaining_value number;  
        v_log varchar2(300);

      begin
        fHandle :=utl_file.fopen('EX_BE','Weekly_blacklist_card_statistic_by_card_type'|| to_char(sysdate,'YYYYMMDD') ||'.csv','w');--Opening a file
        
        v_log := 'STATE_DESC,CARD_TYPE,ACTION,ACTION_REASON,COUNT_CARD,REMAINING_VALUE';
        UTL_FILE.PUT_LINE(fHandle, v_log);
      
      -----------------Detail------------------  
      open detail for 
      ------***************Detail****************----------
       
      /*select reports.bkk_int_fun.getpassengertype (passenger_type, reports.bkk_int_fun.getdataversion(), 'en') card_type,action,action_reason,count(*) as count_card,sum(pa.remaining_value)*0.01 as remaining_value
          from 
          (SELECT                 
          (SELECT MIN (date_time)
                               FROM actionlist.actionlist_history ah
                              WHERE ca.entry_id = ah.entry_id) AS txn_date_time,
                            ca.card_serial_number, ca.end_card_serial_number,
                            NVL (acclst.masn, acclst.asn) asn, acclst.activation_date,
                            acclst.expiry_date,acclst.state || '-' ||
                            case when acclst.state = 2 then 'Current' 
                            when acclst.state = 3 then 'Pending'
                            when acclst.state = 4 then 'Actioned'
                            when acclst.state = 9 then 'Deleted'
                            end as state_description,
                            reports.bkk_int_fun.getactionlistcode
                                                       (acclst.action,
                                                        acclst.TYPE,
                                                        'en'
                                                       ) AS action_reason,
                            reports.bkk_int_fun.getactionlistreason
                                                     (acclst.reason,
                                                      acclst.TYPE,
                                                     'en'
                                                     ) AS blacklst_reason,acclst.action
                       FROM actionlist.card_actionlist ca, actionlist.actionlist acclst 
                      WHERE acclst.entry_id = ca.entry_id
                        AND acclst.state = 2
                   ORDER BY ca.card_serial_number,acclst.activation_date) black_list,product_account pa
                              ,application_account aa
                              ,card_account ca 
                          WHERE pa.prod_type = 256
                              AND ca.csc_serial_number = pa.csc_serial_number(+)
                              AND ca.csc_lifecycle_count = pa.csc_lifecycle_count(+)
                              AND ca.csc_issuer_id = pa.csc_issuer_id(+)
                              AND ca.csc_type = pa.csc_type(+)
                              AND ca.csc_serial_number = aa.csc_serial_number(+)
                              AND ca.csc_lifecycle_count = aa.csc_lifecycle_count(+)
                              AND ca.csc_issuer_id = aa.csc_issuer_id(+)
                              AND ca.csc_type = aa.csc_type(+)
          and black_list.card_serial_number = ca.csc_serial_number
          group by reports.bkk_int_fun.getpassengertype (passenger_type, reports.bkk_int_fun.getdataversion(), 'en'),action,action_reason
          order by reports.bkk_int_fun.getpassengertype (passenger_type, reports.bkk_int_fun.getdataversion(), 'en');*/
          
          select state_description,reports.bkk_int_fun.getpassengertype (passenger_type, reports.bkk_int_fun.getdataversion(), 'en') card_type,action,action_reason,count(*) as count_card,sum(pa.remaining_value)*0.01 as remaining_value
          from 
          (SELECT                 
          (SELECT MIN (date_time)
                               FROM actionlist.actionlist_history ah
                              WHERE ca.entry_id = ah.entry_id) AS txn_date_time,
                            ca.card_serial_number, ca.end_card_serial_number,
                            NVL (acclst.masn, acclst.asn) asn, acclst.activation_date,
                            acclst.expiry_date,acclst.state || '-' ||
                            case when acclst.state = 2 then 'Current' 
                            when acclst.state = 3 then 'Pending'
                            when acclst.state = 4 then 'Actioned'
                            when acclst.state = 9 then 'Deleted'
                            else 'NuLL'
                            end as state_description,acclst.state,
                            reports.bkk_int_fun.getactionlistcode
                                                       (acclst.action,
                                                        acclst.TYPE,
                                                        'en'
                                                       ) AS action_reason,
                            reports.bkk_int_fun.getactionlistreason
                                                     (acclst.reason,
                                                      acclst.TYPE,
                                                     'en'
                                                     ) AS blacklst_reason,acclst.action
                       FROM actionlist.card_actionlist ca, actionlist.actionlist acclst 
                      WHERE acclst.entry_id = ca.entry_id
                       -- AND acclst.state in (2,3,4,9)
                   ORDER BY ca.card_serial_number,acclst.activation_date) black_list,product_account pa
                              ,application_account aa
                              ,card_account ca 
                          WHERE pa.prod_type = 256
                              AND ca.csc_serial_number = pa.csc_serial_number(+)
                              AND ca.csc_lifecycle_count = pa.csc_lifecycle_count(+)
                              AND ca.csc_issuer_id = pa.csc_issuer_id(+)
                              AND ca.csc_type = pa.csc_type(+)
                              AND ca.csc_serial_number = aa.csc_serial_number(+)
                              AND ca.csc_lifecycle_count = aa.csc_lifecycle_count(+)
                              AND ca.csc_issuer_id = aa.csc_issuer_id(+)
                              AND ca.csc_type = aa.csc_type(+)
          and black_list.card_serial_number = ca.csc_serial_number
          group by black_list.state_description,reports.bkk_int_fun.getpassengertype (passenger_type, reports.bkk_int_fun.getdataversion(), 'en'),action,action_reason
          order by black_list.state_description,reports.bkk_int_fun.getpassengertype (passenger_type, reports.bkk_int_fun.getdataversion(), 'en');
  
  
       ------***************Detail****************-----------;
      loop
        fetch detail into 
        v_state_description,
        v_card_type,
        v_action,
        v_action_reason,
        v_count_card,  
        v_remaining_value 
        ; 

        EXIT WHEN detail%NOTFOUND;
        
          v_log := v_state_description || ',' || v_card_type || ',' || v_action || ',' || v_action_reason || ',' || v_count_card || ',' || v_remaining_value|| ',' || CHR(13);
          UTL_FILE.PUT_LINE(fHandle, v_log);
          UTL_FILE.FFLUSH(fHandle);
        
        end loop;
        close detail;
      ------------------------------------------
      UTL_FILE.FCLOSE(fHandle);
      
      end;
      
      declare
        fHandle UTL_FILE.FILE_TYPE; 
        v_date varchar2(11);
        TYPE GenCurTyp IS REF CURSOR;
        detail GenCurTyp;
        V_TXN_DATE_TIME	date;
        V_CARD_SERIAL_NUMBER	number;
        V_END_CARD_SERIAL_NUMBER number;
        
        V_ASN	number;
        V_ACTIVATION_DATE	date;
        V_EXPIRY_DATE date;
        V_STATE_DESCRIPTION	varchar2(20);
        V_ACTION_REASON varchar2(20);
        V_ACTION_DESC varchar2(20);
        V_BLACKLST_REASON	varchar2(200);
        V_LEDGER_BALANCE number;
        V_REMAINING_VALUE number;
        v_log varchar2(300);

      begin
        fHandle :=utl_file.fopen('EX_BE','Weekly_blacklist_card_statistic_detail'|| to_char(sysdate,'YYYYMMDD') ||'.csv','w');--Opening a file
        
        v_log := 'TXN_DATE_TIME, CARD_SERIAL_NUMBER, END_CARD_SERIAL_NUMBER, ASN, ACTIVATION_DATE, EXPIRY_DATE,	STATE_DESCRIPTION, ACTION_REASON, ACTION_DESC, BLACKLST_REASON, LEDGER_BALANCE,	REMAINING_VALUE';
        UTL_FILE.PUT_LINE(fHandle, v_log);
      
      -----------------Detail------------------  
      open detail for 
      ------***************Detail****************----------
       
      ----Query Card Blacklist----
        select black_list.*,(pa.ledger_balance/100), (pa.remaining_value/100)
        from 
        (SELECT                 
        (SELECT MIN (date_time)
                             FROM actionlist.actionlist_history ah
                            WHERE ca.entry_id = ah.entry_id) AS txn_date_time,
                          ca.card_serial_number, ca.end_card_serial_number,
                          NVL (acclst.masn, acclst.asn) asn, acclst.activation_date,
                          acclst.expiry_date,acclst.state || '-' ||
                          case when acclst.state = 2 then 'Current' 
                          when acclst.state = 3 then 'Pending'
                          when acclst.state = 4 then 'Actioned'
                          when acclst.state = 9 then 'Deleted'
                          end as state_description,
                          reports.bkk_int_fun.getactionlistcode
                                                     (acclst.action,
                                                      acclst.TYPE,
                                                      'en'
                                                     ) AS action_reason,
                          case when acclst.action = 1 then '1-BLOCK ALL'
                               when acclst.action = 2 then '2-BLOCK TOPUP'
                               when acclst.action = 3 then '3-BLOCK AUTO TOPUP'
                               when acclst.action = 5 then '5-UNBLOCK'
                               else acclst.action ||'OTHERS'
                          end as action_desc,                        
                          reports.bkk_int_fun.getactionlistreason
                                                   (acclst.reason,
                                                    acclst.TYPE,
                                                   'en'
                                                   ) AS blacklst_reason
                     FROM actionlist.card_actionlist ca, actionlist.actionlist acclst 
                    WHERE acclst.entry_id = ca.entry_id 
                      AND acclst.state = 2 
                 ORDER BY ca.card_serial_number,acclst.activation_date) black_list,product_account pa
        where pa.prod_type = 256 --SVC 
        and black_list.card_serial_number = pa.csc_serial_number;     
          
       ------***************Detail****************-----------;
      loop
        fetch detail into 
        V_TXN_DATE_TIME,
        V_CARD_SERIAL_NUMBER,
        V_END_CARD_SERIAL_NUMBER,

        V_ASN,
        V_ACTIVATION_DATE,
        V_EXPIRY_DATE,
        V_STATE_DESCRIPTION,
        V_ACTION_REASON,
        V_ACTION_DESC,
        V_BLACKLST_REASON,
        V_LEDGER_BALANCE,
        V_REMAINING_VALUE 
        ; 

        EXIT WHEN detail%NOTFOUND;
        
          v_log := V_TXN_DATE_TIME || ',' || V_CARD_SERIAL_NUMBER || ',' || V_END_CARD_SERIAL_NUMBER || ',' || 
          V_ASN || ',' || V_ACTIVATION_DATE|| ',' || V_EXPIRY_DATE || ',' ||V_STATE_DESCRIPTION || ',' ||
          V_ACTION_REASON || ',' ||V_ACTION_DESC || ',' || V_BLACKLST_REASON || ',' ||V_LEDGER_BALANCE || ',' ||V_REMAINING_VALUE|| ',' || CHR(13);
          UTL_FILE.PUT_LINE(fHandle, v_log);
          UTL_FILE.FFLUSH(fHandle);
        
        end loop;
        close detail;
      ------------------------------------------
      UTL_FILE.FCLOSE(fHandle);
      end;  
      
      declare
        fHandle UTL_FILE.FILE_TYPE; 
        v_date varchar2(20);
        TYPE GenCurTyp IS REF CURSOR;
        detail GenCurTyp;
        V_TXN_DATE_TIME date;
        V_CARD_SERIAL_NUMBER number;
        V_CARD_13_DIGIT varchar2(13);
        V_END_CARD_SERIAL_NUMBER number;
        V_ASN number;
        V_ACTIVATION_DATE date;
        V_EXPIRY_DATE date;
        V_STATE number;
        V_STATE_DESCRIPTION varchar2(50);
        V_ACTION_REASON varchar2(50);
        V_ACTION_DESC varchar2(50);
        V_BLACKLST_REASON varchar2(100);
        V_LEDGER_BALANCE number;
        V_RV number;
        V_CARD_LAST_ACT_TIME date;
        V_AP_LAST_ACT_TIME date;
        V_PRODUCT_LAST_ACT_TIME date;
        V_CARD_TYPE varchar2(60);
        V_CARD_STATE varchar2(30);
        V_PROD_STATE varchar2(30);
        V_STATUS_ATU varchar2(30);
        V_ATU_SERVICE_ACTION varchar2(20);
        V_TIME_LOADED date;
        V_EXPIRED_DATE date;
        v_log varchar2(600);

      begin
        fHandle :=utl_file.fopen('EX_BE','Weekly_blacklist_card_with_filter_out_as_of_'|| to_char(sysdate,'YYYYMMDD') ||'.csv','w');--Opening a file
        
        v_log := 'TXN_DATE_TIME,CARD_SERIAL_NUMBER,CARD_13_DIGIT,END_CARD_SERIAL_NUMBER,PASSENGER_TYPE,ASN,ACTIVATION_DATE,EXPIRY_DATE,STATE,STATE_DESCRIPTION,ACTION_REASON,ACTION_DESC,BLACKLST_REASON,LEDGER_BALANCE,RV,CARD_LAST_ACT_TIME,AP_LAST_ACT_TIME,PRODUCT_LAST_ACT_TIME,CARD_TYPE,CARD_STATE,PROD_STATE,STATUS_ATU,ATU_SERVICE_ACTION,TIME_LOADED,EXPIRED_DATE';
        UTL_FILE.PUT_LINE(fHandle, v_log);
      
      -----------------Detail------------------  
      open detail for 
      ------***************Detail****************----------
       
      ----Query Card Blacklist with filter out----
      /*  SELECT txn_date_time,
            card_serial_number,
            '088'||lpad(CARD_SERIAL_NUMBER,9,'0')||BSS_REPORTS.PKG_BSS_REPORT_ATU.CheckLastDigit('088'||lpad(CARD_SERIAL_NUMBER,9,'0')) as card_13_digit,
            end_card_serial_number,
            asn,
            activation_date,
            expiry_date,
            blacklist_summ.state,
            state_description,
            action_reason,
            action_desc,
            blacklst_reason,
            ledger_balance,
          rv,
          card_last_act_time,
          ap_last_act_time,
          product_last_act_time,
          card_type,
          card_state ,
          prod_state,
        CASE
          WHEN atu.state = 11
          THEN 'De-activated'
          WHEN atu.state = 8
          THEN 'Activated'
        END AS status_atu,
        atu_service_action ,
        atu_regis.time_loaded,
        atu_regis.expired_date
      FROM
        (SELECT black_list.*,
          card.ledger_balance,
          card.rv,
          card.card_last_act_time,
          card.ap_last_act_time,
          card.product_last_act_time,
          card.card_type,
          bss.cda.getaccount_state(card.card_state) AS card_state ,
          bss.cda.getAccount_State(card.prod_state) AS prod_state
        FROM
          (SELECT
            (SELECT MIN (date_time)
            FROM actionlist.actionlist_history ah
            WHERE ca.entry_id = ah.entry_id
            ) AS txn_date_time,
            ca.card_serial_number,
            ca.end_card_serial_number,
            NVL (acclst.masn, acclst.asn) asn,
            acclst.activation_date,
            acclst.expiry_date,
            acclst.state,
            acclst.state
            || '-'
            ||
            CASE
              WHEN acclst.state = 2
              THEN 'Current'
              WHEN acclst.state = 3
              THEN 'Pending'
              WHEN acclst.state = 4
              THEN 'Actioned'
              WHEN acclst.state = 9
              THEN 'Deleted'
            END                                                                       AS state_description,
            reports.bkk_int_fun.getactionlistcode (acclst.action, acclst.TYPE, 'en' ) AS action_reason,
            CASE
              WHEN acclst.action = 1
              THEN '1-BLOCK ALL'
              WHEN acclst.action = 2
              THEN '2-BLOCK TOPUP'
              WHEN acclst.action = 3
              THEN '3-BLOCK AUTO TOPUP'
              WHEN acclst.action = 5
              THEN '5-UNBLOCK'
              ELSE acclst.action
                ||'OTHERS'
            END                                                                         AS action_desc,
            reports.bkk_int_fun.getactionlistreason (acclst.reason, acclst.TYPE, 'en' ) AS blacklst_reason
          FROM actionlist.card_actionlist ca,
            actionlist.actionlist acclst
          WHERE acclst.entry_id                                                           = ca.entry_id
          AND acclst.state                                                                = 2             --con#1
          AND acclst.action                                                               = 1             --con#2
          AND end_card_serial_number                                                     IS NULL          --con#3
          AND reports.bkk_int_fun.getactionlistreason (acclst.reason, acclst.TYPE, 'en' ) = 'Others'      --con#4
          AND acclst.activation_date                                                      = '01 JAN 1970' --con#5
          ) black_list,
          (SELECT pa.csc_serial_number,
            pa.remaining_value*0.01 rv,
            pa.ledger_balance *0.01 ledger_balance,
            ca.last_activity_time card_last_act_time,
            aa.last_activity_time ap_last_act_time,
            pa.last_activity_time product_last_act_time,
            ca.account_state card_state,
            pa.account_state prod_state,
            reports.bkk_int_fun.getpassengertype (aa.passenger_type,reports.bkk_int_fun.getdataversion(), 'en') AS card_type
          FROM product.product_account pa ,
            application_account aa ,
            card_account ca
          WHERE pa.prod_type           = 256
          AND ca.csc_serial_number     = pa.csc_serial_number(+)
          AND ca.csc_lifecycle_count   = pa.csc_lifecycle_count(+)
          AND ca.csc_issuer_id         = pa.csc_issuer_id(+)
          AND ca.csc_type              = pa.csc_type(+)
          AND ca.csc_serial_number     = aa.csc_serial_number(+)
          AND ca.csc_lifecycle_count   = aa.csc_lifecycle_count(+)
          AND ca.csc_issuer_id         = aa.csc_issuer_id(+)
          AND ca.csc_type              = aa.csc_type(+)
          AND pa.remaining_value       *0.01 <= 0   --con#6
          AND aa.passenger_type       IN (31,32,37) --con#7
          )card
        WHERE black_list.card_serial_number = card.csc_serial_number
        ) blacklist_summ
      LEFT JOIN
        (SELECT csc_serial_number,
          state
        FROM PRODUCT.PRODUCT_AUTOLOAD_FACILITY
        WHERE agent_id IS NOT NULL
        AND state      IN (8,11)--8-Activated,11-De-activated
        ) ATU
      ON (ATU.csc_serial_number = blacklist_SUMM.card_serial_number)
      LEFT JOIN
        (SELECT bss_card_number,
          atu_service_action ,
          time_loaded,
          TRUNC(t1.time_loaded)+90 AS expired_date
        FROM ATUAGENT.atu_reg_file_detail t1
        WHERE t1.time_loaded =
          (SELECT MAX(t2.time_loaded)
          FROM ATUAGENT.atu_reg_file_detail t2
          WHERE t2.bss_card_number = t1.bss_card_number
          )
        AND TRUNC(t1.time_loaded)+90 < TRUNC(sysdate)
        )atu_regis
      ON (SUBSTR(atu_regis.bss_card_number,4,9) = blacklist_SUMM.card_serial_number)
      WHERE
        /*atu_service_action = 'A' --con#8
        and*/
      /*  atu.state IS NULL --con#9
        ;   */
        
        --Update Condition on 19.09.2016 
        --Add condition 26.12.2016 -- Card state = refund (excluded Deferred refund)--
         SELECT txn_date_time,
            card_serial_number,
            '088'||lpad(CARD_SERIAL_NUMBER,9,'0')||BSS_REPORTS.PKG_BSS_REPORT_ATU.CheckLastDigit('088'||lpad(CARD_SERIAL_NUMBER,9,'0')) as card_13_digit,
            end_card_serial_number,
            asn,
            activation_date,
            expiry_date,
            blacklist_summ.state,
            state_description,
            action_reason,
            action_desc,
            blacklst_reason,
            ledger_balance,
          rv,
          card_last_act_time,
          ap_last_act_time,
          product_last_act_time,
          card_type,
          card_state ,
          prod_state,
        CASE
          WHEN atu.state = 11
          THEN 'De-activated'
          WHEN atu.state = 8
          THEN 'Activated'
        END AS status_atu,
        atu_service_action ,
        atu_regis.time_loaded,
        atu_regis.expired_date
      FROM
        (SELECT black_list.*,
          card.ledger_balance,
          card.rv,
          card.card_last_act_time,
          card.ap_last_act_time,
          card.product_last_act_time,
          card.card_type,
          bss.cda.getaccount_state(card.card_state) AS card_state ,
          bss.cda.getAccount_State(card.prod_state) AS prod_state
        FROM
          (SELECT
            (SELECT MIN (date_time)
            FROM actionlist.actionlist_history ah
            WHERE ca.entry_id = ah.entry_id
            ) AS txn_date_time,
            ca.card_serial_number,
            ca.end_card_serial_number,
            NVL (acclst.masn, acclst.asn) asn,
            acclst.activation_date,
            acclst.expiry_date,
            acclst.state,
            acclst.state
            || '-'
            ||
            CASE
              WHEN acclst.state = 2
              THEN 'Current'
              WHEN acclst.state = 3
              THEN 'Pending'
              WHEN acclst.state = 4
              THEN 'Actioned'
              WHEN acclst.state = 9
              THEN 'Deleted'
            END                                                                       AS state_description,
            reports.bkk_int_fun.getactionlistcode (acclst.action, acclst.TYPE, 'en' ) AS action_reason,
            CASE
              WHEN acclst.action = 1
              THEN '1-BLOCK ALL'
              WHEN acclst.action = 2
              THEN '2-BLOCK TOPUP'
              WHEN acclst.action = 3
              THEN '3-BLOCK AUTO TOPUP'
              WHEN acclst.action = 5
              THEN '5-UNBLOCK'
              ELSE acclst.action
                ||'OTHERS'
            END                                                                         AS action_desc,
            reports.bkk_int_fun.getactionlistreason (acclst.reason, acclst.TYPE, 'en' ) AS blacklst_reason
          FROM actionlist.card_actionlist ca,
            actionlist.actionlist acclst
          WHERE acclst.entry_id                                                           = ca.entry_id
          AND acclst.state                                                                = 2             --con#1
          --AND acclst.action                                                               = 1             --con#2 old
          AND acclst.action                                                               in (1,3)             --con#2 add BLOCK AUTO TOPUP on 10-AUG-2020
          AND end_card_serial_number                                                     IS NULL          --con#3
      --  AND reports.bkk_int_fun.getactionlistreason (acclst.reason, acclst.TYPE, 'en' ) = 'Others'      --con#4
        AND ( acclst.activation_date < trunc(sysdate-3)) --con#5 --Add on 19.09.2016
          ) black_list,
          (SELECT pa.csc_serial_number,
            pa.remaining_value*0.01 rv,
            pa.ledger_balance *0.01 ledger_balance,
            ca.last_activity_time card_last_act_time,
            aa.last_activity_time ap_last_act_time,
            pa.last_activity_time product_last_act_time,
            ca.account_state card_state,
            pa.account_state prod_state,
            reports.bkk_int_fun.getpassengertype (aa.passenger_type,reports.bkk_int_fun.getdataversion(), 'en') AS card_type
          FROM product.product_account pa ,
            application_account aa ,
            card_account ca
          WHERE pa.prod_type           = 256
          AND ca.csc_serial_number     = pa.csc_serial_number(+)
          AND ca.csc_lifecycle_count   = pa.csc_lifecycle_count(+)
          AND ca.csc_issuer_id         = pa.csc_issuer_id(+)
          AND ca.csc_type              = pa.csc_type(+)
          AND ca.csc_serial_number     = aa.csc_serial_number(+)
          AND ca.csc_lifecycle_count   = aa.csc_lifecycle_count(+)
          AND ca.csc_issuer_id         = aa.csc_issuer_id(+)
          AND ca.csc_type              = aa.csc_type(+)
          AND pa.remaining_value       *0.01 <= 0   --con#6
          AND aa.passenger_type       IN (31,32,37) --con#7
          AND ca.def_ref_proc_settlement_time is null --excluded deferred refund 26.12.2016
          
          )card
        WHERE black_list.card_serial_number = card.csc_serial_number
        
          
        --and black_list.txn_date_time < trunc(sysdate-5) --update Add on 30.01.2017 
        ) blacklist_summ
      LEFT JOIN
        (SELECT csc_serial_number,
          state
        FROM PRODUCT.PRODUCT_AUTOLOAD_FACILITY
        WHERE agent_id IS NOT NULL
        --AND state      IN (8,11)--8-Activated,11-De-activated : removed 20180531 Prasit
        and activated_time is not null -- Filter out ATU activate because pa.status is not correct 20180531 Prasit.
        ) ATU
      ON (ATU.csc_serial_number = blacklist_SUMM.card_serial_number)
      LEFT JOIN
        (SELECT bss_card_number,
          atu_service_action ,
          time_loaded,
          TRUNC(t1.time_loaded)+90 AS expired_date
        FROM ATUAGENT.atu_reg_file_detail t1
        WHERE t1.time_loaded =
          (SELECT MAX(t2.time_loaded)
          FROM ATUAGENT.atu_reg_file_detail t2
          WHERE t2.bss_card_number = t1.bss_card_number
          )
        AND TRUNC(t1.time_loaded)+90 < TRUNC(sysdate)
        )atu_regis
      ON (SUBSTR(atu_regis.bss_card_number,4,9) = blacklist_SUMM.card_serial_number)
      WHERE
     --   atu_service_action = 'A' --con#8 delete
         atu.state IS NULL --con#9
        ; 
          
       ------***************Detail****************-----------;
      loop
        fetch detail into 
        V_TXN_DATE_TIME,
        V_CARD_SERIAL_NUMBER,
        V_CARD_13_DIGIT,
        V_END_CARD_SERIAL_NUMBER,
        V_ASN,
        V_ACTIVATION_DATE,
        V_EXPIRY_DATE,
        V_STATE,
        V_STATE_DESCRIPTION,
        V_ACTION_REASON,
        V_ACTION_DESC,
        V_BLACKLST_REASON,
        V_LEDGER_BALANCE,
        V_RV,
        V_CARD_LAST_ACT_TIME,
        V_AP_LAST_ACT_TIME,
        V_PRODUCT_LAST_ACT_TIME,
        V_CARD_TYPE,
        V_CARD_STATE,
        V_PROD_STATE,
        V_STATUS_ATU,
        V_ATU_SERVICE_ACTION,
        V_TIME_LOADED,
        V_EXPIRED_DATE
        ; 

        EXIT WHEN detail%NOTFOUND;
        
          v_log := V_TXN_DATE_TIME|| ',' ||
        V_CARD_SERIAL_NUMBER|| ',' ||
        V_CARD_13_DIGIT|| ',' ||
        V_END_CARD_SERIAL_NUMBER|| ',' ||
        V_ASN|| ',' ||
        V_ACTIVATION_DATE|| ',' ||
        V_EXPIRY_DATE|| ',' ||
        V_STATE|| ',' ||
        V_STATE_DESCRIPTION|| ',' ||
        V_ACTION_REASON|| ',' ||
        V_ACTION_DESC|| ',' ||
        V_BLACKLST_REASON|| ',' ||
        V_LEDGER_BALANCE|| ',' ||
        V_RV|| ',' ||
        V_CARD_LAST_ACT_TIME|| ',' ||
        V_AP_LAST_ACT_TIME|| ',' ||
        V_PRODUCT_LAST_ACT_TIME|| ',' ||
        V_CARD_TYPE|| ',' ||
        V_CARD_STATE|| ',' ||
        V_PROD_STATE|| ',' ||
        V_STATUS_ATU|| ',' ||
        V_ATU_SERVICE_ACTION|| ',' ||
        V_TIME_LOADED|| ',' ||
        V_EXPIRED_DATE|| ',' || CHR(13);
          UTL_FILE.PUT_LINE(fHandle, v_log);
          UTL_FILE.FFLUSH(fHandle);
        
        end loop;
        close detail;
      ------------------------------------------
      UTL_FILE.FCLOSE(fHandle);
      end;
      
      DECLARE
          SMTPSERVERNAME VARCHAR2(200);
          SENDER VARCHAR2(200);
          RECIPIENT VARCHAR2(250);
          CCRECIPIENT VARCHAR2(250);
          BCCRECIPIENT VARCHAR2(250);
          SUBJECT VARCHAR2(250);
          BODY VARCHAR2(250);
          ERRORMESSAGE VARCHAR2(250);
          ATTACHMENTS SENDMAILJPKG.ATTACHMENTS_LIST;
          v_Return NUMBER;
          BEGIN
           
            dbms_java.grant_permission( 'BSS', 'SYS:java.io.FilePermission', '/export/home/ntusers/anchisai/EX_BE/Weekly_blacklist_card_statistic_by_card_type'|| to_char(sysdate,'YYYYMMDD') ||'.csv', 'read' );
            dbms_java.grant_permission( 'BSS', 'SYS:java.io.FilePermission', '/export/home/ntusers/anchisai/EX_BE/Weekly_blacklist_file_from_BBL'|| to_char(sysdate,'YYYYMMDD') ||'.csv', 'read' );
            dbms_java.grant_permission( 'BSS', 'SYS:java.io.FilePermission', '/export/home/ntusers/anchisai/EX_BE/Weekly_blacklist_card_statistic_detail'|| to_char(sysdate,'YYYYMMDD') ||'.csv', 'read' );
            dbms_java.grant_permission( 'BSS', 'SYS:java.io.FilePermission', '/export/home/ntusers/anchisai/EX_BE/Weekly_blacklist_card_with_filter_out_as_of_'|| to_char(sysdate,'YYYYMMDD') ||'.csv', 'read' );
            commit;
            SMTPSERVERNAME := '127.0.0.1';
            SENDER := 'be@rabbit.co.th';
            RECIPIENT := 'be@rabbit.co.th';
            --RECIPIENT := 'saravuda@rabbit.co.th';
            CCRECIPIENT := NULL;
            BCCRECIPIENT := NULL;
            SUBJECT := 'Weekly blacklist ' || to_char(sysdate, 'YYYYMMDD') ;
            BODY := 'Dear Team,' || CHR(13) || CHR(13) ||
        
                        '      Weekly blacklist file and cards requested by BBL and Weekly blacklist card statistic as attached.' || CHR(13) || CHR(13) ||
        
                      'Best Regards,'|| CHR(13) 
                      ;
            -- Modify the code to initialize the variable
            ATTACHMENTS := SENDMAILJPKG.ATTACHMENTS_LIST('/export/home/ntusers/anchisai/EX_BE/Weekly_blacklist_card_statistic_by_card_type'|| to_char(sysdate,'YYYYMMDD') ||'.csv','/export/home/ntusers/anchisai/EX_BE/Weekly_blacklist_file_from_BBL'|| to_char(sysdate,'YYYYMMDD') ||'.csv'
            ,'/export/home/ntusers/anchisai/EX_BE/Weekly_blacklist_card_statistic_detail'|| to_char(sysdate,'YYYYMMDD') ||'.csv','/export/home/ntusers/anchisai/EX_BE/Weekly_blacklist_card_with_filter_out_as_of_'|| to_char(sysdate,'YYYYMMDD') ||'.csv');
            v_Return := SENDMAILJPKG.SENDMAIL(
              SMTPSERVERNAME => SMTPSERVERNAME,
              SENDER => SENDER,
              RECIPIENT => RECIPIENT,
              CCRECIPIENT => CCRECIPIENT,
              BCCRECIPIENT => BCCRECIPIENT,
              SUBJECT => SUBJECT,
              BODY => BODY,
              ERRORMESSAGE => ERRORMESSAGE,
              ATTACHMENTS => ATTACHMENTS
            );
            
          END;
      
end WEEKLY_BLACKLIST_DATA_FILE;

procedure MONTHLY_BLACKLIST_FILE_WT_ATU 
    AS 
    
    BEGIN
  
     declare
        fHandle UTL_FILE.FILE_TYPE; 
        v_date varchar2(11);
        TYPE GenCurTyp IS REF CURSOR;
        detail GenCurTyp;
        v_TXN_DATE_TIME date;
        v_CARD_SERIAL_NUMBER number;
        v_END_CARD_SERIAL_NUMBER number;
        v_ASN number;
        v_ACTIVATION_DATE date;
        v_EXPIRY_DATE date;
        v_STATE_DESCRIPTION varchar2(30);
        v_ACTION_REASON varchar2(30);
        v_ACTION_DESC varchar2(30);
        v_BLACKLST_REASON varchar2(30);
        v_LEDGER_BALANCE number;
        v_RV number;
        v_CARD_LAST_ACT_TIME date;
        v_AP_LAST_ACT_TIME date;
        v_PRODUCT_LAST_ACT_TIME date;
        v_CARD_STATE varchar2(30);
        v_PROD_STATE varchar2(25);
        v_STATUS_ATU varchar2(20);
        v_ATU_SERVICE_ACTION varchar2(10);
        v_log varchar2(500);

      begin
        fHandle :=utl_file.fopen('EX_BE','Monthly_blacklist_file_with_atu_status_' || to_char(sysdate,'YYYYMMDD') ||'.csv','w');--Opening a file
        
        v_log := 'TXN_DATE_TIME,CARD_SERIAL_NUMBER,END_CARD_SERIAL_NUMBER,ASN,ACTIVATION_DATE,EXPIRY_DATE,STATE_DESCRIPTION,ACTION_REASON,ACTION_DESC,BLACKLST_REASON,LEDGER_BALANCE,RV,CARD_LAST_ACT_TIME,AP_LAST_ACT_TIME,PRODUCT_LAST_ACT_TIME,CARD_STATE,PROD_STATE,STATUS_ATU,ATU_SERVICE_ACTION';
        UTL_FILE.PUT_LINE(fHandle, v_log);
      
      -----------------Detail------------------  
      open detail for 
      ------***************Detail****************----------
       
            select blacklist_summ.*,case when atu.state = 11 then 'De-activated' when atu.state = 8 then 'Activated' end as status_atu 
              ,atu_service_action
              from 
              (select black_list.*,
                card.ledger_balance,
                card.rv,
                card.card_last_act_time,
                card.ap_last_act_time,
                card.product_last_act_time,
                bss.cda.getaccount_state(card.card_state) as card_state ,
                bss.cda.getAccount_State(card.prod_state) as prod_state 
              FROM
                (SELECT
                  (SELECT MIN (date_time)
                  FROM actionlist.actionlist_history ah
                  WHERE ca.entry_id = ah.entry_id
                  ) AS txn_date_time,
                  ca.card_serial_number,
                  ca.end_card_serial_number,
                  NVL (acclst.masn, acclst.asn) asn,
                  acclst.activation_date,
                  acclst.expiry_date,
                  acclst.state
                  || '-'
                  ||
                  CASE
                    WHEN acclst.state = 2
                    THEN 'Current'
                    WHEN acclst.state = 3
                    THEN 'Pending'
                    WHEN acclst.state = 4
                    THEN 'Actioned'
                    WHEN acclst.state = 9
                    THEN 'Deleted'
                  END                                                                       AS state_description,
                  reports.bkk_int_fun.getactionlistcode (acclst.action, acclst.TYPE, 'en' ) AS action_reason,
                  CASE
                    WHEN acclst.action = 1
                    THEN '1-BLOCK ALL'
                    WHEN acclst.action = 2
                    THEN '2-BLOCK TOPUP'
                    WHEN acclst.action = 3
                    THEN '3-BLOCK AUTO TOPUP'
                    WHEN acclst.action = 5
                    THEN '5-UNBLOCK'
                    ELSE acclst.action
                      ||'OTHERS'
                  END                                                                         AS action_desc,
                  reports.bkk_int_fun.getactionlistreason (acclst.reason, acclst.TYPE, 'en' ) AS blacklst_reason
                FROM actionlist.card_actionlist ca,
                  actionlist.actionlist acclst
                where acclst.entry_id = ca.entry_id
                --AND acclst.state      = 2
                ORDER BY ca.card_serial_number,
                  acclst.activation_date
                ) black_list,
                (SELECT pa.csc_serial_number,pa.remaining_value*0.01 rv,pa.ledger_balance*0.01 ledger_balance,
                  ca.last_activity_time card_last_act_time,
                  aa.last_activity_time ap_last_act_time,
                  pa.last_activity_time product_last_act_time,
                  ca.account_state card_state, pa.account_state prod_state
                FROM product.product_account pa ,
                  application_account aa ,
                  card_account ca
                WHERE pa.prod_type         = 256
                AND ca.csc_serial_number   = pa.csc_serial_number(+)
                AND ca.csc_lifecycle_count = pa.csc_lifecycle_count(+)
                AND ca.csc_issuer_id       = pa.csc_issuer_id(+)
                AND ca.csc_type            = pa.csc_type(+)
                AND ca.csc_serial_number   = aa.csc_serial_number(+)
                AND ca.csc_lifecycle_count = aa.csc_lifecycle_count(+)
                AND ca.csc_issuer_id       = aa.csc_issuer_id(+)
                AND ca.csc_type            = aa.csc_type(+)
                )card
              WHERE black_list.card_serial_number = card.csc_serial_number) blacklist_summ
              left join (SELECT csc_serial_number,state
              FROM PRODUCT.PRODUCT_AUTOLOAD_FACILITY
              WHERE agent_id IS NOT NULL
              AND state       in (8,11)--8-Activated,11-De-activated
              ) ATU on (ATU.csc_serial_number = blacklist_SUMM.card_serial_number)
              left join (select tt.bss_card_number,tt.atu_service_action
              from ATUAGENT.atu_reg_file_detail tt
              inner join
              (select  bss_card_number,MAX (time_loaded) as txn_date_time
              from ATUAGENT.atu_reg_file_detail
              group by bss_card_number) grouptt
              on tt.bss_card_number = grouptt.bss_card_number
              and tt.time_loaded = grouptt.txn_date_time)atu_regis
              on (substr(atu_regis.bss_card_number,4,9) = blacklist_SUMM.card_serial_number)
              ;
  
       ------***************Detail****************-----------;
      loop
        fetch detail into 
        v_TXN_DATE_TIME,
        v_CARD_SERIAL_NUMBER,
        v_END_CARD_SERIAL_NUMBER,
        v_ASN,
        v_ACTIVATION_DATE,
        v_EXPIRY_DATE,
        v_STATE_DESCRIPTION,
        v_ACTION_REASON,
        v_ACTION_DESC,
        v_BLACKLST_REASON,
        v_LEDGER_BALANCE,
        v_RV,
        v_CARD_LAST_ACT_TIME,
        v_AP_LAST_ACT_TIME,
        v_PRODUCT_LAST_ACT_TIME,
        v_CARD_STATE,
        v_PROD_STATE,
        v_STATUS_ATU,
        v_ATU_SERVICE_ACTION
        ; 

        EXIT WHEN detail%NOTFOUND;
        
          v_log := v_TXN_DATE_TIME || ',' || v_CARD_SERIAL_NUMBER || ',' || v_END_CARD_SERIAL_NUMBER || ',' || v_ASN || ',' || v_ACTIVATION_DATE || ',' || v_EXPIRY_DATE|| ',' || v_STATE_DESCRIPTION|| ',' || v_ACTION_REASON|| ',' || v_ACTION_DESC|| ',' || v_BLACKLST_REASON|| ',' || v_LEDGER_BALANCE|| ',' || v_RV|| ',' || v_CARD_LAST_ACT_TIME|| ',' || v_AP_LAST_ACT_TIME|| ',' || v_PRODUCT_LAST_ACT_TIME|| ',' || v_CARD_STATE|| ',' || v_PROD_STATE|| ',' || v_STATUS_ATU|| ',' || v_ATU_SERVICE_ACTION || CHR(13);
          UTL_FILE.PUT_LINE(fHandle, v_log);
          UTL_FILE.FFLUSH(fHandle);
        
        end loop;
        close detail;
      ------------------------------------------
      UTL_FILE.FCLOSE(fHandle);
      end;
      
      DECLARE
          SMTPSERVERNAME VARCHAR2(200);
          SENDER VARCHAR2(200);
          RECIPIENT VARCHAR2(250);
          CCRECIPIENT VARCHAR2(250);
          BCCRECIPIENT VARCHAR2(250);
          SUBJECT VARCHAR2(250);
          BODY VARCHAR2(250);
          ERRORMESSAGE VARCHAR2(250);
          ATTACHMENTS SENDMAILJPKG.ATTACHMENTS_LIST;
          v_Return NUMBER;
          BEGIN
           
            dbms_java.grant_permission( 'BSS', 'SYS:java.io.FilePermission', '/export/home/ntusers/anchisai/EX_BE/Monthly_blacklist_file_with_atu_status_'|| to_char(sysdate,'YYYYMMDD') ||'.csv', 'read' );
            commit;
            SMTPSERVERNAME := '127.0.0.1';
            SENDER := 'be@rabbit.co.th';
            RECIPIENT := 'be@rabbit.co.th';
            CCRECIPIENT := NULL;
            BCCRECIPIENT := NULL;
            SUBJECT := 'Monthly Blacklist Management as of ' || to_char(sysdate, 'YYYYMMDD') ;
            BODY := 'Dear Team,' || CHR(13) || CHR(13) ||
        
                        '      Monthly Blacklist Management file as of ' ||to_char(sysdate, 'YYYYMMDD') || ' as attached.' || CHR(13) || CHR(13) ||
        
                      'Best Regards,'|| CHR(13) 
                      ;
            -- Modify the code to initialize the variable
            ATTACHMENTS := SENDMAILJPKG.ATTACHMENTS_LIST('/export/home/ntusers/anchisai/EX_BE/Monthly_blacklist_file_with_atu_status_'|| to_char(sysdate,'YYYYMMDD') ||'.csv');
            v_Return := SENDMAILJPKG.SENDMAIL(
              SMTPSERVERNAME => SMTPSERVERNAME,
              SENDER => SENDER,
              RECIPIENT => RECIPIENT,
              CCRECIPIENT => CCRECIPIENT,
              BCCRECIPIENT => BCCRECIPIENT,
              SUBJECT => SUBJECT,
              BODY => BODY,
              ERRORMESSAGE => ERRORMESSAGE,
              ATTACHMENTS => ATTACHMENTS
            );
            
          END;
      
end MONTHLY_BLACKLIST_FILE_WT_ATU;

procedure DAILY_FILE_CHK_AUTO_REFUND 
    AS 
    
    BEGIN
  
    declare
        fHandle UTL_FILE.FILE_TYPE; 
        TYPE GenCurTyp IS REF CURSOR;
        detail GenCurTyp;
        V_CSC_SERIAL_NUMBER number;
        v_LAST_ACTIVITY_DATE_TIME date;
        v_LAST_ACTIVITY_DATE_TIME_ARF date;
        v_RV number;
        v_ACCOUNT_STATE number;  
        v_CARD_STATE_DESC varchar(30);
        v_ACTIVATION_DATE_TIME date;
        v_sysdate date;
        v_log varchar2(300);

      begin
        fHandle :=utl_file.fopen('EX_BE','Daily_check_auto_refund'|| to_char(sysdate,'YYYYMMDD') ||'.csv','w');--Opening a file
        
        v_log := 'CSC_SERIAL_NUMBER,PA.LAST_ACTIVITY_DATE_TIME,PA.LAST_ACTIVITY_DATE_TIME+25,RV,ACCOUNT_STATE,CARD_STATE_DESC,ACTIVATION_DATE_TIME,SYSDATE';
        UTL_FILE.PUT_LINE(fHandle, v_log);
      
      -----------------Detail------------------  
      open detail for 
      ------***************Detail****************----------
       
                     SELECT card_tab.*,
                aal.activation_date_time+7/24,
                sysdate
              FROM
                (SELECT ca.csc_serial_number,
                  pa.last_activity_time +7/24,
                  (pa.last_activity_time+7/24) + 25,
                  pa.remaining_value    *0.01 AS RV,
                  ca.account_state,
                  CASE
                    WHEN ca.account_state = 1
                    THEN 'Uninitialised'
                    WHEN ca.account_state = 2
                    THEN 'Initialised'
                    WHEN ca.account_state = 3
                    THEN 'Issued'
                    WHEN ca.account_state = 4
                    THEN 'Replaced'
                    WHEN ca.account_state = 5
                    THEN 'Refund In Progress'
                    WHEN ca.account_state = 6
                    THEN 'Refunded'
                    WHEN ca.account_state = 7
                    THEN 'Closed Off'
                    WHEN ca.account_state = 8
                    THEN 'Reversed'
                  END AS card_state_desc
                FROM product.product_account pa ,
                  application_account aa ,
                  card_account ca
                WHERE pa.prod_type                         = 256
                AND ca.csc_serial_number                   = pa.csc_serial_number(+)
                AND ca.csc_lifecycle_count                 = pa.csc_lifecycle_count(+)
                AND ca.csc_issuer_id                       = pa.csc_issuer_id(+)
                AND ca.csc_type                            = pa.csc_type(+)
                AND ca.csc_serial_number                   = aa.csc_serial_number(+)
                AND ca.csc_lifecycle_count                 = aa.csc_lifecycle_count(+)
                AND ca.csc_issuer_id                       = aa.csc_issuer_id(+)
                AND ca.csc_type                            = aa.csc_type(+)
                AND aa.passenger_type                      = 25
                AND TRUNC(pa.last_activity_time+7/24) + 25 < TRUNC(sysdate)
                AND ca.account_state                       = 3
                )card_tab,
                atuagent.alipay_activation_log aal
              WHERE card_tab.csc_serial_number            = SUBSTR(aal.csc_serial_number,3,9)
              AND (aal.activation_date_time)+15 < sysdate
              ORDER BY card_tab.csc_serial_number; 
  
       ------***************Detail****************-----------;
      loop
        fetch detail into 
        V_CSC_SERIAL_NUMBER,
        v_LAST_ACTIVITY_DATE_TIME,
        v_LAST_ACTIVITY_DATE_TIME_ARF,
        v_RV,
        v_ACCOUNT_STATE,
        v_CARD_STATE_DESC,
        v_ACTIVATION_DATE_TIME,
        v_sysdate
        ; 

        EXIT WHEN detail%NOTFOUND;
        
          v_log := V_CSC_SERIAL_NUMBER || ',' || v_LAST_ACTIVITY_DATE_TIME || ',' || v_LAST_ACTIVITY_DATE_TIME_ARF || ',' || 
          v_RV || ',' || v_ACCOUNT_STATE|| ','  || v_CARD_STATE_DESC|| ',' || v_ACTIVATION_DATE_TIME|| ',' || v_sysdate|| ',' ||CHR(13);
          UTL_FILE.PUT_LINE(fHandle, v_log);
          UTL_FILE.FFLUSH(fHandle);
        
        end loop;
        close detail;
      ------------------------------------------
      UTL_FILE.FCLOSE(fHandle);
      
      -------Remove file more than 14 days---------
      UTL_FILE.FREMOVE('EX_BE', 'Daily_check_auto_refund'|| to_char(sysdate-14, 'YYYYMMDD') || '.csv');
      --------------------------------------------
      end;
      
      DECLARE
          SMTPSERVERNAME VARCHAR2(200);
          SENDER VARCHAR2(200);
          RECIPIENT VARCHAR2(250);
          CCRECIPIENT VARCHAR2(250);
          BCCRECIPIENT VARCHAR2(250);
          SUBJECT VARCHAR2(250);
          BODY VARCHAR2(250);
          ERRORMESSAGE VARCHAR2(250);
          ATTACHMENTS SENDMAILJPKG.ATTACHMENTS_LIST;
          v_Return NUMBER;
          BEGIN
           
            dbms_java.grant_permission( 'BSS', 'SYS:java.io.FilePermission', '/export/home/ntusers/anchisai/EX_BE/Daily_check_auto_refund'|| to_char(sysdate,'YYYYMMDD') ||'.csv', 'read' );
            --dbms_java.grant_permission( 'BSS', 'SYS:java.io.FilePermission', '/export/home/ntusers/anchisai/EX_BE/Weekly_blacklist_file_from_BBL'|| to_char(sysdate,'YYYYMMDD') ||'.csv', 'read' );
            --dbms_java.grant_permission( 'BSS', 'SYS:java.io.FilePermission', '/export/home/ntusers/anchisai/EX_BE/Weekly_blacklist_card_statistic_detail'|| to_char(sysdate,'YYYYMMDD') ||'.csv', 'read' );
            commit;
            SMTPSERVERNAME := '127.0.0.1';
            SENDER := 'be@rabbit.co.th';
            RECIPIENT := 'be@rabbit.co.th';
            CCRECIPIENT := NULL;
            BCCRECIPIENT := NULL;
            SUBJECT := 'Daily check Alipay auto refund file_' || to_char(sysdate, 'YYYYMMDD') ;
            BODY := 'Dear Team,' || CHR(13) || CHR(13) ||
        
                        '      Daily file for checking Alipay auto refund file as attached.' || CHR(13) || CHR(13) ||
        
                      'Best Regards,'|| CHR(13) 
                      ;
            -- Modify the code to initialize the variable
            ATTACHMENTS := SENDMAILJPKG.ATTACHMENTS_LIST('/export/home/ntusers/anchisai/EX_BE/Daily_check_auto_refund'|| to_char(sysdate,'YYYYMMDD') ||'.csv');
            v_Return := SENDMAILJPKG.SENDMAIL(
              SMTPSERVERNAME => SMTPSERVERNAME,
              SENDER => SENDER,
              RECIPIENT => RECIPIENT,
              CCRECIPIENT => CCRECIPIENT,
              BCCRECIPIENT => BCCRECIPIENT,
              SUBJECT => SUBJECT,
              BODY => BODY,
              ERRORMESSAGE => ERRORMESSAGE,
              ATTACHMENTS => ATTACHMENTS
            );
            
          END;
      
end DAILY_FILE_CHK_AUTO_REFUND;

procedure DAILY_FILE_TXN_AUTO_REFUND 
    AS 
    
    BEGIN
          
     declare
        fHandle UTL_FILE.FILE_TYPE; 
        TYPE GenCurTyp IS REF CURSOR;
        detail GenCurTyp;
        V_CSC_SERIAL_NUMBER number;
        v_TXN_TYPE varchar2(50);
        v_exception_list varchar2(50);
        v_cch_txn_approved varchar2(2);
        v_TXN_VALUE number;
        v_LOC_TXN_DATE_TIME date;
        v_SETTLEMENT_DATE date;  
        v_DEVICE_ID number;
        v_log varchar2(300);

      begin
        fHandle :=utl_file.fopen('EX_BE','Daily_txn_auto_refund'|| to_char(sysdate,'YYYYMMDD') ||'.csv','w');--Opening a file
        
        v_log := 'CSC_SERIAL_NUMBER,TXN_TYPE,EXCEPTION_LIST,CCH_TXN_APPROVED,TXN_VALUE,LOC_TXN_DATE_TIME,SETTLEMENT_DATE,DEVICE_ID';
        UTL_FILE.PUT_LINE(fHandle, v_log);
      
      -----------------Detail------------------  
      open detail for 
      ------***************Detail****************----------
       
                SELECT *
          FROM
            (SELECT card_serial_number,
              REPORTS.BKK_INT_FUN.GETTRANSACTIONDESC (UD_TYPE,UD_SUBTYPE) AS TXN_TYPE,
              exception_list,
              cch_txn_approved,
              transaction_value*0.01                                      AS txn_value,
              txn_date_time    +7/24,
              settlement_date,
              device_id
            FROM cut_ci_financial
            WHERE ud_type          = 1
            AND ud_subtype         = 10 --Card_refund_txn
       --     AND cch_txn_approved   = 'N'
            AND iss_txn_reflection = 'N'
            UNION
            SELECT card_serial_number,
              REPORTS.BKK_INT_FUN.GETTRANSACTIONDESC (UD_TYPE,UD_SUBTYPE) AS TXN_TYPE,
              exception_list,
              cch_txn_approved,
              transaction_value*0.01                                      AS txn_value,
              txn_date_time    +7/24,
              settlement_date,
              device_id
            FROM cut_cardholder_fee
            WHERE ud_type          = 4
            AND ud_subtype         = 34 --Cardholder Fee
        --    AND cch_txn_approved   = 'Y'
            AND iss_txn_reflection = 'N'
            UNION
            SELECT card_serial_number,
              REPORTS.BKK_INT_FUN.GETTRANSACTIONDESC (UD_TYPE,UD_SUBTYPE) AS TXN_TYPE,
              exception_list,
              cch_txn_approved,
              transaction_value*0.01                                      AS txn_value,
              txn_date_time    +7/24,
              settlement_date,
              device_id
            FROM cut_ci_financial
            WHERE ud_type          = 1
            AND ud_subtype         = 39 --card deposit receipt refund
       --     AND cch_txn_approved   = 'Y'
            AND iss_txn_reflection = 'N'
            UNION
            SELECT card_serial_number,
              REPORTS.BKK_INT_FUN.GETTRANSACTIONDESC (UD_TYPE,UD_SUBTYPE) AS TXN_TYPE,
              exception_list,
              cch_txn_approved,
              transaction_value*0.01                                      AS txn_value,
              txn_date_time    +7/24,
              settlement_date,
              device_id
            FROM cut_pi_financial
            WHERE ud_type          = 3
            AND ud_subtype         = 26 --purse refund
        --    AND cch_txn_approved   = 'Y'
            AND iss_txn_reflection = 'N'
            UNION
            SELECT card_serial_number,
              REPORTS.BKK_INT_FUN.GETTRANSACTIONDESC (UD_TYPE,UD_SUBTYPE) AS TXN_TYPE,
              exception_list,
              cch_txn_approved,
              transaction_value*0.01                                      AS txn_value,
              txn_date_time    +7/24,
              settlement_date,
              device_id
            FROM cut_ci_maintenance
            WHERE ud_type          = 1
            AND ud_subtype         = 12 --Card Refund Deferred
    --        AND cch_txn_approved   = 'Y'
            AND iss_txn_reflection = 'N'
            UNION
            SELECT card_serial_number,
              REPORTS.BKK_INT_FUN.GETTRANSACTIONDESC (UD_TYPE,UD_SUBTYPE) AS TXN_TYPE,
              exception_list,
              cch_txn_approved,
              transaction_value*0.01                                      AS txn_value,
              txn_date_time    +7/24,
              settlement_date,
              device_id
            FROM cut_cardholder_fee
            WHERE ud_type          = 4
            AND ud_subtype         = 51 --Card Refund Penalty Fee
    --        AND cch_txn_approved   = 'Y'
            AND iss_txn_reflection = 'N'
            )
          WHERE settlement_date = trunc(sysdate)
          AND device_id         = 19726355
          ORDER BY card_serial_number;
  
       ------***************Detail****************-----------;
      loop
        fetch detail into 
        V_CSC_SERIAL_NUMBER,
        v_TXN_TYPE,
        v_exception_list,
        v_cch_txn_approved,
        v_TXN_VALUE,
        v_LOC_TXN_DATE_TIME,
        v_SETTLEMENT_DATE,
        v_DEVICE_ID 
        ; 

        EXIT WHEN detail%NOTFOUND;
        
          v_log := V_CSC_SERIAL_NUMBER || ',' || v_TXN_TYPE || ',"' ||  v_exception_list || '",' || v_cch_txn_approved || ',' || 
          v_TXN_VALUE || ',' || v_LOC_TXN_DATE_TIME || ',' || v_SETTLEMENT_DATE|| ','  || v_DEVICE_ID || ','  ||CHR(13);
          UTL_FILE.PUT_LINE(fHandle, v_log);
          UTL_FILE.FFLUSH(fHandle);
        
        end loop;
        close detail;
      ------------------------------------------
      UTL_FILE.FCLOSE(fHandle);
      
      -------Remove file more than 14 days---------
      UTL_FILE.FREMOVE('EX_BE', 'Daily_txn_auto_refund'|| to_char(sysdate-14, 'YYYYMMDD') || '.csv');
      --------------------------------------------
      end;
      
      DECLARE
          SMTPSERVERNAME VARCHAR2(200);
          SENDER VARCHAR2(200);
          RECIPIENT VARCHAR2(250);
          CCRECIPIENT VARCHAR2(250);
          BCCRECIPIENT VARCHAR2(250);
          SUBJECT VARCHAR2(250);
          BODY VARCHAR2(250);
          ERRORMESSAGE VARCHAR2(250);
          ATTACHMENTS SENDMAILJPKG.ATTACHMENTS_LIST;
          v_Return NUMBER;
          BEGIN
           
            dbms_java.grant_permission( 'BSS', 'SYS:java.io.FilePermission', '/export/home/ntusers/anchisai/EX_BE/Daily_txn_auto_refund'|| to_char(sysdate,'YYYYMMDD') ||'.csv', 'read' );
            --dbms_java.grant_permission( 'BSS', 'SYS:java.io.FilePermission', '/export/home/ntusers/anchisai/EX_BE/Weekly_blacklist_file_from_BBL'|| to_char(sysdate,'YYYYMMDD') ||'.csv', 'read' );
            --dbms_java.grant_permission( 'BSS', 'SYS:java.io.FilePermission', '/export/home/ntusers/anchisai/EX_BE/Weekly_blacklist_card_statistic_detail'|| to_char(sysdate,'YYYYMMDD') ||'.csv', 'read' );
            commit;
            SMTPSERVERNAME := '127.0.0.1';
            SENDER := 'be@rabbit.co.th';
            RECIPIENT := 'be@rabbit.co.th';
            CCRECIPIENT := NULL;
            BCCRECIPIENT := NULL;
            SUBJECT := 'Daily Alipay auto refund transaction_' || to_char(sysdate, 'YYYYMMDD') ;
            BODY := 'Dear Team,' || CHR(13) || CHR(13) ||
        
                        '      Alipay auto refund transaction on ' || to_char(sysdate, 'YYYYMMDD') || ' as attached.' || CHR(13) || CHR(13) ||
        
                      'Best Regards,'|| CHR(13) 
                      ;
            -- Modify the code to initialize the variable
            ATTACHMENTS := SENDMAILJPKG.ATTACHMENTS_LIST('/export/home/ntusers/anchisai/EX_BE/Daily_txn_auto_refund'|| to_char(sysdate,'YYYYMMDD') ||'.csv');
            v_Return := SENDMAILJPKG.SENDMAIL(
              SMTPSERVERNAME => SMTPSERVERNAME,
              SENDER => SENDER,
              RECIPIENT => RECIPIENT,
              CCRECIPIENT => CCRECIPIENT,
              BCCRECIPIENT => BCCRECIPIENT,
              SUBJECT => SUBJECT,
              BODY => BODY,
              ERRORMESSAGE => ERRORMESSAGE,
              ATTACHMENTS => ATTACHMENTS
            );
            
          END;
      
end DAILY_FILE_TXN_AUTO_REFUND;

procedure DAILY_CHK_LOAD_AP_FILE
    AS 
    
    BEGIN
          
   /*  declare
        fHandle UTL_FILE.FILE_TYPE; 
        TYPE GenCurTyp IS REF CURSOR;
        detail GenCurTyp;
        v_alipay_activation_log_count number;
        v_alipay_data_file_count number;
        v_alipay_txn_file_count number;
        v_log varchar2(300);

      begin
        fHandle :=utl_file.fopen('EX_BE','Daily_chk_load_AP_file'|| to_char(sysdate,'YYYYMMDD') ||'.csv','w');--Opening a file
        
        v_log := 'alipay_activation_log_count,alipay_data_file_count,alipay_txn_file_count';
        UTL_FILE.PUT_LINE(fHandle, v_log);
      
      -----------------Detail------------------  
      open detail for 
      ------***************Detail****************----------
       
        SELECT alipay_activation_log_count,alipay_data_file_count,alipay_txn_file_count
          FROM
            (SELECT COUNT(original_file_name) AS alipay_activation_log_count
            FROM ATUAGENT.alipay_activation_log
            ),
            (SELECT COUNT(ad.file_name) AS alipay_data_file_count ,
              COUNT(at.file_name) AS alipay_txn_file_count
            FROM BSS_REPORTS.alipay_txn_file at ,
              BSS_REPORTS.alipay_data_file ad
            WHERE at.file_name = ad.file_name
            );
  
       ------***************Detail****************-----------;
      loop
        fetch detail into 
        v_alipay_activation_log_count,
        v_alipay_data_file_count,
        v_alipay_txn_file_count
        ; 

        EXIT WHEN detail%NOTFOUND;
        
          v_log := v_alipay_activation_log_count || ',' || v_alipay_data_file_count || ',' ||  v_alipay_txn_file_count || ','  ||CHR(13);
          UTL_FILE.PUT_LINE(fHandle, v_log);
          UTL_FILE.FFLUSH(fHandle);
        
        end loop;
        close detail;
      ------------------------------------------
      UTL_FILE.FCLOSE(fHandle);
      
      -------Remove file more than 14 days---------
      UTL_FILE.FREMOVE('EX_BE', 'Daily_chk_load_AP_file'|| to_char(sysdate-14, 'YYYYMMDD') || '.csv');
      --------------------------------------------
      end;
      
      DECLARE
          SMTPSERVERNAME VARCHAR2(200);
          SENDER VARCHAR2(200);
          RECIPIENT VARCHAR2(250);
          CCRECIPIENT VARCHAR2(250);
          BCCRECIPIENT VARCHAR2(250);
          SUBJECT VARCHAR2(250);
          BODY VARCHAR2(250);
          ERRORMESSAGE VARCHAR2(250);
          ATTACHMENTS SENDMAILJPKG.ATTACHMENTS_LIST;
          v_Return NUMBER;
          BEGIN
           
            dbms_java.grant_permission( 'BSS', 'SYS:java.io.FilePermission', '/export/home/ntusers/anchisai/EX_BE/Daily_chk_load_AP_file'|| to_char(sysdate,'YYYYMMDD') ||'.csv', 'read' );
            --dbms_java.grant_permission( 'BSS', 'SYS:java.io.FilePermission', '/export/home/ntusers/anchisai/EX_BE/Weekly_blacklist_file_from_BBL'|| to_char(sysdate,'YYYYMMDD') ||'.csv', 'read' );
            --dbms_java.grant_permission( 'BSS', 'SYS:java.io.FilePermission', '/export/home/ntusers/anchisai/EX_BE/Weekly_blacklist_card_statistic_detail'|| to_char(sysdate,'YYYYMMDD') ||'.csv', 'read' );
            commit;
            SMTPSERVERNAME := '127.0.0.1';
            SENDER := 'be@rabbit.co.th';
            RECIPIENT := 'be@rabbit.co.th';
            CCRECIPIENT := NULL;
            BCCRECIPIENT := NULL;
            SUBJECT := 'Daily Alipay check load AP file_' || to_char(sysdate, 'YYYYMMDD') ;
            BODY := 'Dear Team,' || CHR(13) || CHR(13) ||
        
                        '      Alipay check load AP file ' || to_char(sysdate, 'YYYYMMDD') || ' as attached.' || CHR(13) || CHR(13) ||
        
                      'Best Regards,'|| CHR(13) 
                      ;
            -- Modify the code to initialize the variable
            ATTACHMENTS := SENDMAILJPKG.ATTACHMENTS_LIST('/export/home/ntusers/anchisai/EX_BE/Daily_chk_load_AP_file'|| to_char(sysdate,'YYYYMMDD') ||'.csv');
            v_Return := SENDMAILJPKG.SENDMAIL(
              SMTPSERVERNAME => SMTPSERVERNAME,
              SENDER => SENDER,
              RECIPIENT => RECIPIENT,
              CCRECIPIENT => CCRECIPIENT,
              BCCRECIPIENT => BCCRECIPIENT,
              SUBJECT => SUBJECT,
              BODY => BODY,
              ERRORMESSAGE => ERRORMESSAGE,
              ATTACHMENTS => ATTACHMENTS
            );
            
          END;*/
          DECLARE
          SMTPSERVERNAME VARCHAR2(200);
          SENDER VARCHAR2(200);
          RECIPIENT VARCHAR2(250);
          CCRECIPIENT VARCHAR2(250);
          BCCRECIPIENT VARCHAR2(250);
          subject varchar2(250);
          BODY VARCHAR2(1200);
          ERRORMESSAGE VARCHAR2(250);
          ATTACHMENTS SENDMAILJPKG.ATTACHMENTS_LIST;
          v_return number;
          v_settlement_date date := trunc(sysdate-1);
          v_date varchar2(12) := to_char(sysdate-1, 'YYYYMMDD');
          v_processed_date date;
          v_vol number;
          v_content varchar2(1200);
          v_content_all varchar2(1200);
          type ref_cursor is ref cursor;
          detail_cur ref_cursor;
          
          BEGIN
            
            open detail_cur for
              
         SELECT *
          FROM
            (SELECT 'alipay_activation_log_count = ' || COUNT(original_file_name) AS alipay_activation_log_count
            FROM ATUAGENT.alipay_activation_log
            )
            union all
            (SELECT 'alipay_file_count = ' || COUNT(ad.file_name) AS alipay_data_file_count
            FROM BSS_REPORTS.alipay_txn_file at ,
              BSS_REPORTS.alipay_data_file ad
            WHERE at.file_name = ad.file_name
            )
            union all
            (SELECT 'alipay_txn_count = ' || COUNT(at.file_name) AS alipay_data_file_count 
            FROM BSS_REPORTS.alipay_txn_file at ,
              BSS_REPORTS.alipay_data_file ad
            WHERE at.file_name = ad.file_name
            );  
              
        loop
          fetch detail_cur into v_content;
          exit when detail_cur%notfound;
              
              v_content_all := v_content_all || chr(13) || chr(13) ||v_content;
              
           end loop;--end loop detail--
        close detail_cur;
            
            SMTPSERVERNAME := '127.0.0.1';
            sender := 'be@rabbit.co.th';
            RECIPIENT := 'be@rabbit.co.th';
            CCRECIPIENT := NULL;
            bccrecipient := null;
            SUBJECT := 'Daily Alipay check load AP file_' || to_char(sysdate, 'YYYYMMDD') ;
            BODY := 'Dear Team,' || CHR(13) || CHR(13) ||
        
                        '      Alipay check load AP file ' || to_char(sysdate, 'YYYYMMDD') || ' as detail below.' || CHR(13) || 
                        v_content_all || CHR(13) || CHR(13) || CHR(13) || 
        
                      'Best Regards,'|| CHR(13) 
                      ;
            -- Modify the code to initialize the variable
           
            v_Return := SENDMAILJPKG.SENDMAIL(
              SMTPSERVERNAME => SMTPSERVERNAME,
              SENDER => SENDER,
              RECIPIENT => RECIPIENT,
              CCRECIPIENT => CCRECIPIENT,
              BCCRECIPIENT => BCCRECIPIENT,
              SUBJECT => SUBJECT,
              BODY => BODY,
              ERRORMESSAGE => ERRORMESSAGE,
              ATTACHMENTS => ATTACHMENTS
            );
            
          END;
      
end DAILY_CHK_LOAD_AP_FILE;

procedure DAILY_CHK_GATHER_STAT_PROG_JOB
    AS 
    
    begin
    
 /*declare
        fHandle UTL_FILE.FILE_TYPE; 
        TYPE GenCurTyp IS REF CURSOR;
        detail GenCurTyp;
        v_log_id number(10);
        v_log_date date;
        v_status varchar2(20);
        v_actual_start_date date;
        v_run_duration varchar2(50);
        v_cpu_used varchar2(50);
        v_additional_info varchar2(300);
        v_log varchar2(300);

      begin
        fHandle :=utl_file.fopen('EX_BE','DAILY_Check_Gather_Stat_Prog_Job'|| to_char(sysdate,'YYYYMMDD') ||'.csv','w');--Opening a file
        
        v_log := 'log_id,log_date,status,actual_start_date,run_duration,cpu_used,additional_info,';
        UTL_FILE.PUT_LINE(fHandle, v_log);
      
      -----------------Detail------------------  
      open detail for 
      ------***************Detail****************----------
       
       SELECT log_id,
            log_date,
            status,
            actual_start_date,
            run_duration,
            cpu_used,
            additional_info
          FROM DBA_SCHEDULER_JOB_RUN_DETAILS
          WHERE job_name LIKE '%AT_OS_OPT_SY%'
          AND TRUNC(actual_start_date) between TRUNC(sysdate-1) and TRUNC(sysdate)
          ORDER BY log_id DESC; 
       ------***************Detail****************-----------;
      loop
        fetch detail into 
        v_log_id,
        v_log_date,
        v_status,
        v_actual_start_date,
        v_run_duration,
        v_cpu_used,
        v_additional_info
        ; 

        EXIT WHEN detail%NOTFOUND;
        
          v_log := v_log_id || ',' || v_log_date || ',' ||  v_status || ',' || v_actual_start_date || ',' || v_run_duration || ',' || v_cpu_used || ',' || v_additional_info
          ||CHR(13);
          UTL_FILE.PUT_LINE(fHandle, v_log);
          UTL_FILE.FFLUSH(fHandle);
        
        end loop;
        close detail;
      
      UTL_FILE.FCLOSE(fHandle);
      
      -------Remove file more than 14 days---------
      BEGIN
            UTL_FILE.FREMOVE('EX_BE', 'DAILY_Check_Gather_Stat_Prog_Job'|| to_char(sysdate-14, 'YYYYMMDD') || '.csv');
      EXCEPTION
        WHEN others THEN
          NULL;
      END;
      --------------------------------------------
      end;
      
  DECLARE
          SMTPSERVERNAME VARCHAR2(200);
          SENDER VARCHAR2(200);
          RECIPIENT VARCHAR2(250);
          CCRECIPIENT VARCHAR2(250);
          BCCRECIPIENT VARCHAR2(250);
          SUBJECT VARCHAR2(250);
          BODY VARCHAR2(250);
          ERRORMESSAGE VARCHAR2(250);
          ATTACHMENTS SENDMAILJPKG.ATTACHMENTS_LIST;
          v_Return NUMBER;
          BEGIN
           
            dbms_java.grant_permission( 'BSS', 'SYS:java.io.FilePermission', '/export/home/ntusers/anchisai/EX_BE/DAILY_Check_Gather_Stat_Prog_Job'|| to_char(sysdate,'YYYYMMDD') ||'.csv', 'read' );
            --dbms_java.grant_permission( 'BSS', 'SYS:java.io.FilePermission', '/export/home/ntusers/anchisai/EX_BE/Weekly_blacklist_file_from_BBL'|| to_char(sysdate,'YYYYMMDD') ||'.csv', 'read' );
            --dbms_java.grant_permission( 'BSS', 'SYS:java.io.FilePermission', '/export/home/ntusers/anchisai/EX_BE/Weekly_blacklist_card_statistic_detail'|| to_char(sysdate,'YYYYMMDD') ||'.csv', 'read' );
            commit;
            SMTPSERVERNAME := '127.0.0.1';
            SENDER := 'be@rabbit.co.th';
            RECIPIENT := 'be@rabbit.co.th';
            CCRECIPIENT := NULL;
            BCCRECIPIENT := NULL;
            SUBJECT := 'DAILY Check Gather Stat Prog Job_' || to_char(sysdate, 'YYYYMMDD') ;
            BODY := 'Dear Team,' || CHR(13) || CHR(13) ||
        
                        '      Check Gather Stat Prog Job' || to_char(sysdate, 'YYYYMMDD') || ' as attached.' || CHR(13) || CHR(13) ||
        
                      'Best Regards,'|| CHR(13) 
                      ;
            -- Modify the code to initialize the variable
            ATTACHMENTS := SENDMAILJPKG.ATTACHMENTS_LIST('/export/home/ntusers/anchisai/EX_BE/DAILY_Check_Gather_Stat_Prog_Job'|| to_char(sysdate,'YYYYMMDD') ||'.csv');
            v_Return := SENDMAILJPKG.SENDMAIL(
              SMTPSERVERNAME => SMTPSERVERNAME,
              SENDER => SENDER,
              RECIPIENT => RECIPIENT,
              CCRECIPIENT => CCRECIPIENT,
              BCCRECIPIENT => BCCRECIPIENT,
              SUBJECT => SUBJECT,
              BODY => BODY,
              ERRORMESSAGE => ERRORMESSAGE,
              ATTACHMENTS => ATTACHMENTS
            );
            
          END;*/
           DECLARE
          SMTPSERVERNAME VARCHAR2(200);
          SENDER VARCHAR2(200);
          RECIPIENT VARCHAR2(250);
          CCRECIPIENT VARCHAR2(250);
          BCCRECIPIENT VARCHAR2(250);
          subject varchar2(300);
          BODY VARCHAR2(2000);
          ERRORMESSAGE VARCHAR2(250);
          ATTACHMENTS SENDMAILJPKG.ATTACHMENTS_LIST;
          v_return number;
          v_settlement_date date := trunc(sysdate-1);
          v_date varchar2(12) := to_char(sysdate-1, 'YYYYMMDD');
          v_processed_date date;
          v_bl_action varchar2(20);
          v_bl_reason varchar2(200);
          v_vol number;
          v_count_not_succeed number;
          v_content varchar2(2000);
          v_content_all varchar2(2000);
          type ref_cursor is ref cursor;
          detail_cur ref_cursor;
          
          BEGIN
          
          SELECT COUNT(*)
          into v_count_not_succeed
          FROM DBA_SCHEDULER_JOB_RUN_DETAILS
          WHERE job_name LIKE '%AT_OS_OPT_SY%'
          AND status <> 'SUCCEEDED'
          AND TRUNC(actual_start_date) BETWEEN TRUNC(sysdate-1) AND TRUNC(sysdate) ; 
            
            open detail_cur for
              
             select 'Log ID: ' || log_id || ', ' ||
                'Log Date: ' ||log_date|| ', ' ||
                'Status: ' ||status|| ', ' ||
                'Start Date: ' ||actual_start_date|| ', ' ||
                'Duration: ' ||run_duration|| ', ' ||
                'CPU Used: ' ||cpu_used|| ', ' ||
                'Add Info: ' ||additional_info
              FROM DBA_SCHEDULER_JOB_RUN_DETAILS
              WHERE job_name LIKE '%AT_OS_OPT_SY%'
              AND TRUNC(actual_start_date) between TRUNC(sysdate-1) and TRUNC(sysdate)
              ORDER BY log_id DESC; 
              
            loop
              fetch detail_cur into v_content;
              exit when detail_cur%notfound;
                  
                  v_content_all := v_content_all || chr(13) || chr(13) || v_content;
                  
               end loop;--end loop detail--
            close detail_cur;
            
            SMTPSERVERNAME := '127.0.0.1';
            sender := 'be@rabbit.co.th';
            RECIPIENT := 'be@rabbit.co.th';
            CCRECIPIENT := NULL;
            bccrecipient := null;
            
            if (v_count_not_succeed <> 0)
            then
            subject := '[NOT OK] Daily_Check_Gather_Stat_Prog_Job ' || v_date ;
            else 
            subject := '[OK] Daily_Check_Gather_Stat_Prog_Job ' || v_date ;
            end if;

            body := 'Dear Team,' || chr(13) || chr(13) ||  
                        'Daily gather stat as detail below:'||
                         v_content_all || chr(13) || chr(13) ||
  
                      
                      'Best Regards,'|| CHR(13) 
                      ;
            -- Modify the code to initialize the variable
           
            v_Return := SENDMAILJPKG.SENDMAIL(
              SMTPSERVERNAME => SMTPSERVERNAME,
              SENDER => SENDER,
              RECIPIENT => RECIPIENT,
              CCRECIPIENT => CCRECIPIENT,
              BCCRECIPIENT => BCCRECIPIENT,
              SUBJECT => SUBJECT,
              BODY => BODY,
              ERRORMESSAGE => ERRORMESSAGE,
              ATTACHMENTS => ATTACHMENTS
            );
            
          END;
 
end DAILY_CHK_GATHER_STAT_PROG_JOB;

procedure DAILY_CHK_RECOVER
 AS 
     BEGIN
     
   DECLARE

  SMTPSERVERNAME VARCHAR2(200);
  SENDER         VARCHAR2(200);
  RECIPIENT      VARCHAR2(250);
  CCRECIPIENT    VARCHAR2(250);
  BCCRECIPIENT   VARCHAR2(250);
  subject        VARCHAR2(300);
  BODY           VARCHAR2(2000);
  ERRORMESSAGE   VARCHAR2(250);
  ATTACHMENTS SENDMAILJPKG.ATTACHMENTS_LIST;
  v_return          NUMBER;
  v_settlement_date VARCHAR2(12) := TO_CHAR(sysdate-1, 'YYYYMMDD');
  v_date            VARCHAR2(12) := TO_CHAR(sysdate, 'YYYYMMDD');
  v_check_txn       NUMBER;
  v_total_txn       NUMBER := 0;
  v_total_value     NUMBER := 0;
  v_content         VARCHAR2(2000);
  v_content_detail  VARCHAR2(2000);
  v_content_all1     VARCHAR2(2000);
  v_content_all     VARCHAR2(2000);
  type ref_cursor

IS
  ref CURSOR;
  sum_cur ref_cursor;
  detail_cur ref_cursor;
  
  BEGIN
        
    BEGIN
          
          SELECT COUNT(*)
          INTO v_check_txn
          FROM cut_pi_financial
          WHERE settlement_date  = TRUNC(sysdate-1)
          AND ud_type               = 3
          AND ud_subtype            = 39
          AND source_participant_id in (46,10025,10067)
          GROUP BY source_participant_id
            ||'-'
            ||reports.bkk_int_fun.getparticipantlongname(SOURCE_PARTICIPANT_ID),
            REPORTS.BKK_INT_FUN.GETTRANSACTIONDESC (UD_TYPE,UD_SUBTYPE);
               
          subject := '[Found] Daily check recover transaction from Legacy, Paragon, Tesco on ' || v_date ;
      EXCEPTION
      WHEN no_data_found THEN
      
          subject := '[Not Found] Daily check recover transaction from Legacy, Paragon, Tesco on ' || v_date ;  
          
      WHEN too_many_rows THEN
      
          subject := '[Found] Daily check recover transaction from Legacy, Paragon, Tesco on ' || v_date ;
          
      END;
 
      
      -------------Summary-----------
      OPEN sum_cur FOR 
      SELECT --source_participant_id ||'-' ||reports.bkk_int_fun.getparticipantlongname(SOURCE_PARTICIPANT_ID)||','|| REPORTS.BKK_INT_FUN.GETTRANSACTIONDESC (UD_TYPE,UD_SUBTYPE) AS detail,
      COUNT(card_serial_number) AS total_txn,
      NVL(SUM(transaction_value*0.01),0) AS total_value 
      FROM cut_pi_financial 
      WHERE settlement_date = TRUNC(sysdate-1) 
      AND ud_type = 3 AND ud_subtype = 39 AND source_participant_id in (46,10025,10067)
      GROUP BY --source_participant_id ||'-' ||reports.bkk_int_fun.getparticipantlongname(SOURCE_PARTICIPANT_ID),
      REPORTS.BKK_INT_FUN.GETTRANSACTIONDESC (UD_TYPE,UD_SUBTYPE);
      
      LOOP
        FETCH sum_cur INTO v_total_txn,v_total_value;
        EXIT
      WHEN sum_cur%notfound;
        v_content_all1 := v_content_all1 || chr(13) || chr(13) ;
      END LOOP;--end loop detail--
      CLOSE sum_cur;
      -------------End Summary-----------
      -------------Detail-----------
        v_content_all := null; --clear content
        v_content := null; --clear content
        
      OPEN detail_cur FOR 
      
      SELECT card_serial_number||','||REPORTS.BKK_INT_FUN.GETTRANSACTIONDESC (UD_TYPE,UD_SUBTYPE)||','||transaction_value*0.01||','||ptsn||','||to_char(settlement_date,'DD-MON-YYYY')||','||
      source_participant_id||'-'||reports.bkk_int_fun.getparticipantlongname(SOURCE_PARTICIPANT_ID)||','||REPORTS.BKK_INT_FUN.GETLOCATIONNAMEFROMvlocation(source_participant_id,device_location) as location_name
      FROM cut_pi_financial
      WHERE settlement_date = trunc(sysdate-1)
      AND ud_type               = 3
      AND ud_subtype            = 39
      AND source_participant_id in (46,10025,10067)
      order by source_participant_id,card_serial_number 
      ;
      
      LOOP
        FETCH detail_cur INTO v_content;
        EXIT
      WHEN detail_cur%notfound;
        v_content_all := v_content_all || chr(13) || chr(13) ||v_content;
      END LOOP;--end loop detail--
      CLOSE detail_cur;
      -------------End Detail-----------
      
      SMTPSERVERNAME := '127.0.0.1';
      sender         := 'do-not-reply@rabbit.co.th';
      RECIPIENT      := 'be@rabbit.co.th,rc@rabbit.co.th';
      CCRECIPIENT    := NULL;
      bccrecipient   := NULL;
      body           := 'Dear All,' || chr(13) || chr(13) || 
                        
                        'Summary recover transaction from Legacy, Paragon, Tesco on s.date ' || v_settlement_date || ' as detail below:'|| chr(13) || chr(13) || 
                        
                        'Total Txn: ' || v_total_txn || ', ' || 'Total Value: ' || v_total_value || chr(13) || chr(13) || chr(13) || 
                        
                       -- 'Detail recover transaction from Legacy, Paragon, Tesco on s.date ' || v_settlement_date || ' as detail below:'|| chr(13) || chr(13) ||
                        
                        'CARD_SN,TXN_TYPE,TXN_VALUE,PTSN,SETTLEMENT_DATE,SP_NAME,LOCATION'||
                        v_content_all || chr(13) || chr(13) ||chr(13) ||
                        
                        
                        'Best Regards,'|| CHR(13) ;
                        
      -- Modify the code to initialize the variable
      v_Return := SENDMAILJPKG.SENDMAIL( SMTPSERVERNAME => SMTPSERVERNAME, SENDER => SENDER, RECIPIENT => RECIPIENT, CCRECIPIENT => CCRECIPIENT, BCCRECIPIENT => BCCRECIPIENT, SUBJECT => SUBJECT, BODY => BODY, ERRORMESSAGE => ERRORMESSAGE, ATTACHMENTS => ATTACHMENTS );

END;

    
end DAILY_CHK_RECOVER;

procedure DAILY_MISSING_TXN_CARROT
    AS 
    
    BEGIN
          
     declare
        fHandle UTL_FILE.FILE_TYPE; 
        TYPE GenCurTyp IS REF CURSOR;
        detail GenCurTyp;
        
        v_card_serial_number varchar2(13);
        v_txn_type varchar2(40);
        v_transaction_value number;
        v_loc_txn_date_time date;
        v_location_name varchar2(120);
        v_device_id number;
        v_device_location number;
        v_source_id number;
        v_status varchar2(20);
        v_log varchar2(300);

      begin
      
        fHandle :=utl_file.fopen('EX_BE','Missing_transaction_on_THOR_Date_'|| to_char(sysdate,'YYYYMMDD') ||'.csv','w');--Opening a file
        
        v_log := 'CARD_SERIAL_NUMBER,TXN_TYPE,TRANSACTION_VALUE,LOC_TXN_DATE_TIME,LOCATION_NAME,DEVICE_ID,DEVICE_LOCATION,SOURCE_PARTICIPANT_ID,STATUS';
        UTL_FILE.PUT_LINE(fHandle, v_log);
      
      -----------------Detail------------------  
      open detail for 
      ------***************Detail****************----------
       
          SELECT '88'
              || lpad(CARD_SERIAL_NUMBER,9,0) card_serial_number,
              REPORTS.BKK_INT_FUN.GETTRANSACTIONDESC (UD_TYPE,UD_SUBTYPE)                                                               AS txn_type,
              transaction_value*0.01                                                                                                    AS transaction_value,
              to_date(RP_STD.TOLOCALTIME(TXN_DATE_TIME),'DD-MON-YY HH24:MI:SS')                                                         AS loc_txn_date_time,
              BSS.CDA.getLocationDesc(source_participant_id,to_number(SUBSTR(TO_CHAR(device_location,'XXXXXXXX'),-6,6),'XXXXXXXX'),NULL)AS location_name,
              device_id,
              device_location,
              source_participant_id,
              CASE 
                     WHEN source_participant_id = 1 THEN 'BTS-'|| lpad(p.product_type,3,'0')
                     ELSE 'BSS-256'  
                END status
            FROM cut_pi_exit CUT
            left join syscd_product p on (CUT.DATA_VERSION=P.DATA_VERSION) AND (CUT.product_type=p.product_type) and (CUT.product_issuer_id=p.issuer_id)
            WHERE ud_type           = 3
            AND ud_subtype          in (91,93) --Purse use on exit,multiride use on exit
            AND cch_txn_approved    = 'Y'
            and iss_txn_reflection  = 'N'
            AND settlement_date    = TRUNC(sysdate-1)
            and source_participant_id = 1
            and transaction_value <> 0
            AND card_serial_number                IN
              (SELECT card_serial_number
              FROM
                ((SELECT card_serial_number,
                  acclst.state,
                  acclst.action,
                  MAX(last_activity)
                FROM actionlist.card_actionlist ca,
                  actionlist.actionlist acclst
                WHERE acclst.entry_id   = ca.entry_id
                and acclst.state       in (2,3,4,9)
                AND acclst.action      IN (2,3) --block Top up and ATU
                AND card_serial_number IN
                  (SELECT card_serial_number FROM carrot.member WHERE is_active = 'N'
                  )
                GROUP BY card_serial_number,
                  acclst.state,
                  acclst.action
                )union all 
                --Add block all and state delete condition eff on 12.12.2015 --
                (SELECT card_serial_number,
                  acclst.state,
                  acclst.action,
                  MAX(last_activity) 
                from actionlist.card_actionlist ca,
                actionlist.actionlist acclst
                where acclst.entry_id   = ca.entry_id
                and acclst.state     = 9 --deleted
                AND acclst.action    = 1 --block all
                AND card_serial_number IN
                  (SELECT card_serial_number FROM carrot.member WHERE is_active = 'N'
                  )
                GROUP BY card_serial_number,
                  acclst.state,
                  acclst.action
                ))
             --   where card_serial_number = 580010262
                )
            UNION ALL
            SELECT '88'
              || lpad(CARD_SERIAL_NUMBER,9,0) card_serial_number,
              REPORTS.BKK_INT_FUN.GETTRANSACTIONDESC (UD_TYPE,UD_SUBTYPE)                                                               AS txn_type,
              transaction_value*0.01                                                                                                    AS transaction_value,
              to_date(RP_STD.TOLOCALTIME(TXN_DATE_TIME),'DD-MON-YY HH24:MI:SS')                                                         AS loc_txn_date_time,
              BSS.CDA.getLocationDesc(source_participant_id,to_number(SUBSTR(TO_CHAR(device_location,'XXXXXXXX'),-6,6),'XXXXXXXX'),NULL)AS location_name,
              device_id,
              device_location,
              source_participant_id,
              CASE 
                     WHEN source_participant_id = 1 THEN 'BTS-'|| lpad(p.product_type,3,'0')
                     ELSE 'BSS-256'  
                END status
            FROM cut_pi_financial CUT
            left join syscd_product p on (CUT.DATA_VERSION=P.DATA_VERSION) AND (CUT.product_type=p.product_type) and (CUT.product_issuer_id=p.issuer_id)
            WHERE ud_type           = 3
            AND ud_subtype         IN (3,79) --Multiride issue,reverse
            AND source_participant_id = 1
            AND cch_txn_approved    = 'Y'
            AND iss_txn_reflection  = 'N'
            AND settlement_date    = TRUNC(sysdate-1)
            AND card_serial_number                IN
               (SELECT card_serial_number
              FROM
                ((SELECT card_serial_number,
                  acclst.state,
                  acclst.action,
                  MAX(last_activity)
                FROM actionlist.card_actionlist ca,
                  actionlist.actionlist acclst
                WHERE acclst.entry_id   = ca.entry_id
                and acclst.state       in (2,3,4,9)
                AND acclst.action      IN (2,3) --block Top up and ATU
                AND card_serial_number IN
                  (SELECT card_serial_number FROM carrot.member WHERE is_active = 'N'
                  )
                GROUP BY card_serial_number,
                  acclst.state,
                  acclst.action
                )union all 
                --Add block all and state delete condition eff on 12.12.2015 --
                (SELECT card_serial_number,
                  acclst.state,
                  acclst.action,
                  MAX(last_activity) 
                from actionlist.card_actionlist ca,
                actionlist.actionlist acclst
                where acclst.entry_id   = ca.entry_id
                and acclst.state     = 9 --deleted
                AND acclst.action    = 1 --block all
                AND card_serial_number IN
                  (SELECT card_serial_number FROM carrot.member WHERE is_active = 'N'
                  )
                GROUP BY card_serial_number,
                  acclst.state,
                  acclst.action
                ))
              --  where card_serial_number = 580010262 --
                )
            UNION ALL
            SELECT '88'
              || lpad(CARD_SERIAL_NUMBER,9,0) card_serial_number,
              REPORTS.BKK_INT_FUN.GETTRANSACTIONDESC (UD_TYPE,UD_SUBTYPE)                                                               AS txn_type,
              transaction_value*0.01                                                                                                    AS transaction_value,
              to_date(RP_STD.TOLOCALTIME(TXN_DATE_TIME),'DD-MON-YY HH24:MI:SS')                                                         AS loc_txn_date_time,
              BSS.CDA.getLocationDesc(source_participant_id,to_number(SUBSTR(TO_CHAR(device_location,'XXXXXXXX'),-6,6),'XXXXXXXX'),NULL)AS location_name,
              device_id,
              device_location,
              source_participant_id,
             'BSS-256' as status
            FROM cut_pi_financial CUT
            where ud_type           = 3
            AND ud_subtype         IN (10,16,39) --Topup
            AND cch_txn_approved    = 'Y'
            and iss_txn_reflection  = 'N'
            AND settlement_date    = TRUNC(sysdate-1)
            AND card_serial_number                IN
               (SELECT card_serial_number
              FROM
                ((SELECT card_serial_number,
                  acclst.state,
                  acclst.action,
                  MAX(last_activity)
                FROM actionlist.card_actionlist ca,
                  actionlist.actionlist acclst
                WHERE acclst.entry_id   = ca.entry_id
                AND acclst.state       IN (2,3,4,9)
                AND acclst.action      IN (2,3)
                AND card_serial_number IN
                  (SELECT card_serial_number FROM carrot.member WHERE is_active = 'N'
                  )
                GROUP BY card_serial_number,
                  acclst.state,
                  acclst.action
                )union all 
                --Add block all and state delete condition eff on 12.12.2015 --
                (SELECT card_serial_number,
                  acclst.state,
                  acclst.action,
                  MAX(last_activity) 
                from actionlist.card_actionlist ca,
                actionlist.actionlist acclst
                where acclst.entry_id   = ca.entry_id
                and acclst.state     = 9 --deleted
                AND acclst.action    = 1 --block all
                AND card_serial_number IN
                  (SELECT card_serial_number FROM carrot.member WHERE is_active = 'N'
                  )
                GROUP BY card_serial_number,
                  acclst.state,
                  acclst.action
                ))
               -- where card_serial_number = 580010262 
                )
                UNION ALL
            SELECT '88'
              || lpad(CARD_SERIAL_NUMBER,9,0) card_serial_number,
              REPORTS.BKK_INT_FUN.GETTRANSACTIONDESC (UD_TYPE,UD_SUBTYPE)                                                               AS txn_type,
              transaction_value*0.01                                                                                                    AS transaction_value,
              to_date(RP_STD.TOLOCALTIME(TXN_DATE_TIME),'DD-MON-YY HH24:MI:SS')                                                         AS loc_txn_date_time,
              BSS.CDA.getLocationDesc(source_participant_id,to_number(SUBSTR(TO_CHAR(device_location,'XXXXXXXX'),-6,6),'XXXXXXXX'),NULL)AS location_name,
              device_id,
              device_location,
              source_participant_id,
              'BSS-256'  as status
            FROM cut_pi_financial CUT
            WHERE ud_type           = 3
            AND ud_subtype         IN (13,19) --retail usage
            AND cch_txn_approved    = 'Y'
            and iss_txn_reflection  = 'N'
            AND source_participant_id <> 91 -- Not give point at BSP usage eff on 12.12.2015 --
            AND settlement_date    = TRUNC(sysdate-1)
            AND card_serial_number                IN
               (SELECT card_serial_number
              FROM
                ((SELECT card_serial_number,
                  acclst.state,
                  acclst.action,
                  MAX(last_activity)
                FROM actionlist.card_actionlist ca,
                  actionlist.actionlist acclst
                WHERE acclst.entry_id   = ca.entry_id
                AND acclst.state       IN (2,3,4,9)
                AND acclst.action      IN (2,3)
                AND card_serial_number IN
                  (SELECT card_serial_number FROM carrot.member WHERE is_active = 'N'
                  )
                GROUP BY card_serial_number,
                  acclst.state,
                  acclst.action
                )union all 
                --Add block all and state delete condition eff on 12.12.2015 --
                (SELECT card_serial_number,
                  acclst.state,
                  acclst.action,
                  MAX(last_activity) 
                from actionlist.card_actionlist ca,
                actionlist.actionlist acclst
                where acclst.entry_id   = ca.entry_id
                and acclst.state     = 9 --deleted
                AND acclst.action    = 1 --block all
                AND card_serial_number IN
                  (SELECT card_serial_number FROM carrot.member WHERE is_active = 'N'
                  )
                GROUP BY card_serial_number,
                  acclst.state,
                  acclst.action
                ))
               -- where card_serial_number = 580010262 
                );
            
       ------***************Detail****************-----------;
      loop
        fetch detail into 
        v_card_serial_number,
        v_txn_type,
        v_transaction_value,
        v_loc_txn_date_time,
        v_location_name,
        v_device_id,
        v_device_location,
        v_source_id,
        v_status
        ; 

        EXIT WHEN detail%NOTFOUND;
        

        v_log := v_card_serial_number || ',' || v_txn_type || ',' || v_transaction_value || ',' || v_loc_txn_date_time || ',' ||v_location_name || ',' || v_device_id || ',' || v_device_location || ',' || v_source_id || ',' || v_status ||CHR(13);
       
          UTL_FILE.PUT_LINE(fHandle, v_log);
          UTL_FILE.FFLUSH(fHandle);
        
        end loop;
        close detail;
      ------------------------------------------
      UTL_FILE.FCLOSE(fHandle);
      
      -------Remove file more than 14 days---------
      BEGIN
             UTL_FILE.FREMOVE('EX_BE', 'Missing transaction on THOR Date '|| to_char(sysdate-14, 'YYYYMMDD') || '.csv');
      EXCEPTION
        WHEN others THEN
          NULL;
      END;
      --------------------------------------------
      
      end;
      

      DECLARE
          SMTPSERVERNAME VARCHAR2(200);
          SENDER VARCHAR2(200);
          RECIPIENT VARCHAR2(250);
          CCRECIPIENT VARCHAR2(250);
          BCCRECIPIENT VARCHAR2(250);
          SUBJECT VARCHAR2(250);
          BODY VARCHAR2(250);
          ERRORMESSAGE VARCHAR2(250);
          ATTACHMENTS SENDMAILJPKG.ATTACHMENTS_LIST;
          v_Return NUMBER;
          BEGIN
           
            dbms_java.grant_permission( 'BSS', 'SYS:java.io.FilePermission', '/export/home/ntusers/anchisai/EX_BE/Missing_transaction_on_THOR_Date_'|| to_char(sysdate,'YYYYMMDD') ||'.csv', 'read' );
            --dbms_java.grant_permission( 'BSS', 'SYS:java.io.FilePermission', '/export/home/ntusers/anchisai/EX_BE/Weekly_blacklist_file_from_BBL'|| to_char(sysdate,'YYYYMMDD') ||'.csv', 'read' );
            --dbms_java.grant_permission( 'BSS', 'SYS:java.io.FilePermission', '/export/home/ntusers/anchisai/EX_BE/Weekly_blacklist_card_statistic_detail'|| to_char(sysdate,'YYYYMMDD') ||'.csv', 'read' );
            commit;
            SMTPSERVERNAME := '127.0.0.1';
            SENDER := 'be@rabbit.co.th';
            RECIPIENT := 'ITC@rabbit.co.th';
            CCRECIPIENT := 'be@rabbit.co.th';
            BCCRECIPIENT := NULL;
            SUBJECT := 'Missing transaction on THOR Date ' || to_char(sysdate, 'YYYYMMDD') ;
            BODY := 'Dear IT Carrot,' || CHR(13) || CHR(13) ||
        
                        '      Missing transaction on THOR settlement date ' || to_char(sysdate-1, 'YYYYMMDD') || ' as attached.' || CHR(13) || CHR(13) ||
        
                      'Best Regards,'|| CHR(13) ||
                      'BSS Backend'
                      ;
            -- Modify the code to initialize the variable
            ATTACHMENTS := SENDMAILJPKG.ATTACHMENTS_LIST('/export/home/ntusers/anchisai/EX_BE/Missing_transaction_on_THOR_Date_'|| to_char(sysdate,'YYYYMMDD') ||'.csv');
            v_Return := SENDMAILJPKG.SENDMAIL(
              SMTPSERVERNAME => SMTPSERVERNAME,
              SENDER => SENDER,
              RECIPIENT => RECIPIENT,
              CCRECIPIENT => CCRECIPIENT,
              BCCRECIPIENT => BCCRECIPIENT,
              SUBJECT => SUBJECT,
              BODY => BODY,
              ERRORMESSAGE => ERRORMESSAGE,
              ATTACHMENTS => ATTACHMENTS
            );
            
          END;

    
end DAILY_MISSING_TXN_CARROT;

procedure WEEKLY_CARD_PERSO_SUMMARY

    AS 
    
    BEGIN
          
      declare
        fHandle UTL_FILE.FILE_TYPE; 
        TYPE GenCurTyp IS REF CURSOR;
        detail GenCurTyp;
        
        v_file_name varchar2(100);
        v_yyyy varchar2(4);
        v_mm varchar2(2);
        v_dd varchar2(2);
        v_provider_name varchar2(20);
        v_vol number;
        v_log varchar2(300);

      begin
      
        fHandle :=utl_file.fopen('EX_BE','Daily Perso file on '|| to_char(sysdate,'YYYYMMDD') ||'.csv','w');--Opening a file
        
        v_log := 'file_name,year,month,day,provider_name,volume,';
        UTL_FILE.PUT_LINE(fHandle, v_log);
      
      -----------------Detail------------------  
      open detail for 
      ------***************Detail****************----------
       
          select file_name,substr(file_name,17,4) as YYYY,substr(file_name,21,2) as MM,substr(file_name,23,2) as DD,
          case  when substr(file_name,26,9) = '000B_0100' Then 'BBL Credit'
                when substr(file_name,26,9) = '000B_0000' Then 'BBL Debit'
                when substr(file_name,26,9) = '000E_0001' Then 'AEON'
                when substr(file_name,26,9) = '0029_0001' Then 'MPAY'
                else 'Error'
                end as Provider_name
          , COUNT(*) from ATUAGENT.ATU_PERSONALISE_DETAIL where substr(file_name,17,8) = to_char(sysdate,'YYYYMMDD') GROUP BY FILE_NAME ;
          
       ------***************Detail****************-----------;
      loop
        fetch detail into 
        v_file_name,
        v_yyyy,
        v_mm,
        v_dd,
        v_provider_name,
        v_vol
        ; 

        EXIT WHEN detail%NOTFOUND;
        

        v_log := v_file_name || ',' || v_yyyy || ',' || v_mm || ',' || v_dd || ',' ||v_provider_name || ',' || v_vol ||CHR(13);

        
          UTL_FILE.PUT_LINE(fHandle, v_log);
          UTL_FILE.FFLUSH(fHandle);
        
        end loop;
        close detail;
      ------------------------------------------
      UTL_FILE.FCLOSE(fHandle);
      end;
      
      -- Generate Summary -------
      declare
        fHandle UTL_FILE.FILE_TYPE; 
        TYPE GenCurTyp IS REF CURSOR;
        detail GenCurTyp;
        
        v_Provider_Name varchar2(100);
        v_Sum_of_volume number;
        v_log varchar2(300);

      begin
      
        fHandle :=utl_file.fopen('EX_BE','Weekly Summary Perso file on '|| to_char(sysdate,'YYYYMMDD') ||'.csv','w');--Opening a file
        
        v_log := 'Provider Name,Sum of volume,';
        UTL_FILE.PUT_LINE(fHandle, v_log);
      
      -----------------Detail------------------  
      open detail for 
      ------***************Detail****************----------
       
      select x.Provider_name as Provider_Name, sum(x.vol) as "Sum_of_volume" from 
      (
                select file_name, to_date(substr(file_name,17,8),'yyyymmdd') as Dates, substr(file_name,17,4) as YYYY,substr(file_name,21,2) as MM,substr(file_name,23,2) as DD,
                case  when substr(file_name,26,9) = '000B_0100' Then 'BBL Credit'
                      when substr(file_name,26,9) = '000B_0000' Then 'BBL Debit'
                      when substr(file_name,26,4) = '000E' Then 'AEON'
                      when substr(file_name,26,4) = '0029' Then 'MPAY'
                      else 'Error'
                      end as Provider_name
                , COUNT(*) as vol from ATUAGENT.ATU_PERSONALISE_DETAIL  GROUP BY FILE_NAME ) x
        where x.Dates > sysdate - 9 and x.Dates < sysdate - 1
        group by x.Provider_name;
          
       ------***************Detail****************-----------;
      loop
        fetch detail into 
        v_Provider_Name,
        v_Sum_of_volume
        ; 

        EXIT WHEN detail%NOTFOUND;
        

        v_log := v_Provider_Name || ',' ||  v_Sum_of_volume ||CHR(13);

        
          UTL_FILE.PUT_LINE(fHandle, v_log);
          UTL_FILE.FFLUSH(fHandle);
        
        end loop;
        close detail;
      ------------------------------------------
      UTL_FILE.FCLOSE(fHandle);
      end;
      
      

      DECLARE
          SMTPSERVERNAME VARCHAR2(200);
          SENDER VARCHAR2(200);
          RECIPIENT VARCHAR2(250);
          CCRECIPIENT VARCHAR2(250);
          BCCRECIPIENT VARCHAR2(250);
          SUBJECT VARCHAR2(250);
          BODY VARCHAR2(250);
          ERRORMESSAGE VARCHAR2(250);
          ATTACHMENTS SENDMAILJPKG.ATTACHMENTS_LIST;
          v_Return NUMBER;
          BEGIN
           
            --dbms_java.grant_permission( 'BSS', 'SYS:java.io.FilePermission', '/export/home/ntusers/anchisai/EX_BE/Daily Perso file on '|| to_char(sysdate,'YYYYMMDD') ||'.csv', 'read' );
            --dbms_java.grant_permission( 'BSS', 'SYS:java.io.FilePermission', '/export/home/ntusers/anchisai/EX_BE/Weekly Summary Perso file on '|| to_char(sysdate,'YYYYMMDD') ||'.csv', 'read' );
            --dbms_java.grant_permission( 'BSS', 'SYS:java.io.FilePermission', '/export/home/ntusers/anchisai/EX_BE/Weekly_blacklist_card_statistic_detail'|| to_char(sysdate,'YYYYMMDD') ||'.csv', 'read' );
            commit;
            SMTPSERVERNAME := '127.0.0.1';
            SENDER := 'be@rabbit.co.th';
            -- RECIPIENT := 'be@rabbit.co.th, ukitc@rabbit.co.th';
            RECIPIENT := 'prasits@rabbit.co.th';
            -- CCRECIPIENT := 'be@rabbit.co.th';
            BCCRECIPIENT := NULL;
            SUBJECT := 'Week Summary Perso file on'|| to_char(sysdate,'YYYYMMDD') ;
            BODY := 'Dear Card center,' || CHR(13) || CHR(13) ||
        
                        '      Week Summary Perso file between '|| to_char(sysdate-8,'YYYYMMDD') || ' and ' || to_char(sysdate-1,'YYYYMMDD') || ' as attached.' || CHR(13) || CHR(13) ||
        
                      'Best Regards,'|| CHR(13) ||
                      'BSS Backend'
                      ;
            -- Modify the code to initialize the variable
            --ATTACHMENTS := SENDMAILJPKG.ATTACHMENTS_LIST('/export/home/ntusers/anchisai/EX_BE/Weekly Summary Perso file on '|| to_char(sysdate,'YYYYMMDD')||'.csv');

            v_Return := SENDMAILJPKG.SENDMAIL(
              SMTPSERVERNAME => SMTPSERVERNAME,
              SENDER => SENDER,
              RECIPIENT => RECIPIENT,
              CCRECIPIENT => CCRECIPIENT,
              BCCRECIPIENT => BCCRECIPIENT,
              SUBJECT => SUBJECT,
              BODY => BODY,
              ERRORMESSAGE => ERRORMESSAGE,
              ATTACHMENTS => ATTACHMENTS
            );
            
          END;

    
end WEEKLY_CARD_PERSO_SUMMARY;
  
procedure DAILY_CARD_PERSO_SUMMARY

    AS 

    BEGIN
          

      declare
        fHandle UTL_FILE.FILE_TYPE; 
        TYPE GenCurTyp IS REF CURSOR;
        detail GenCurTyp;
        v_file_name varchar2(100);
        v_yyyy varchar2(4);
        v_mm varchar2(2);
        v_dd varchar2(2);
        v_provider_name varchar2(20);
        v_vol number;
        v_log varchar2(300);
        v_date DATE := trunc(SYSDATE);
      begin
        
        fHandle :=utl_file.fopen('EX_BE','Daily_Summary_Perso_file_on_'|| to_char(v_date,'YYYYMMDD') ||'.csv','w');--Opening a file
        
        v_log := 'file_name,year,month,day,provider_name,volume,';
        UTL_FILE.PUT_LINE(fHandle, v_log);
      
      -----------------Detail------------------  
      open detail for 
      ------***************Detail****************----------
       
          select file_name,substr(file_name,17,4) as YYYY,substr(file_name,21,2) as MM,substr(file_name,23,2) as DD,
          case  when substr(file_name,26,9) = '000B_0100' Then 'BBL Credit'
                when substr(file_name,26,9) = '000B_0000' Then 'BBL Debit'
                when substr(file_name,26,9) = '000E_0001' Then 'AEON'
                when substr(file_name,26,9) = '0029_0001' Then 'MPAY'
                when substr(file_name,26,4) = '0058' Then 'BSS'
                else 'Error'
                end as Provider_name
          , COUNT(*) from ATUAGENT.ATU_PERSONALISE_DETAIL 
          where substr(file_name,17,8) = to_char(sysdate-1,'YYYYMMDD') --changed from to_char(sysdate,'YYYYMMDD') 21.06.2017
          or (substr(file_name,17,8) = to_char(sysdate-2,'YYYYMMDD')
          and substr(file_name,26,9) = '000B_0100') GROUP BY FILE_NAME  ;

          --, COUNT(*) from ATUAGENT.ATU_PERSONALISE_DETAIL where substr(file_name,17,8) = to_char(sysdate,'YYYYMMDD') GROUP BY FILE_NAME ;
          --, COUNT(*) from ATUAGENT.ATU_PERSONALISE_DETAIL where 1=1 GROUP BY FILE_NAME ORDER BY FILE_NAME DESC;
       ------***************Detail****************-----------;
      loop
        fetch detail into 
        v_file_name,
        v_yyyy,
        v_mm,
        v_dd,
        v_provider_name,
        v_vol
        ; 

        EXIT WHEN detail%NOTFOUND;
        

        v_log := v_file_name || ',' || v_yyyy || ',' || v_mm || ',' || v_dd || ',' ||v_provider_name || ',' || v_vol ||CHR(13);

        
          UTL_FILE.PUT_LINE(fHandle, v_log);
          UTL_FILE.FFLUSH(fHandle);
        
        end loop;
        close detail;
      ------------------------------------------
      UTL_FILE.FCLOSE(fHandle);
      end;
      
      

      DECLARE
          SMTPSERVERNAME VARCHAR2(200);
          SENDER VARCHAR2(200);
          RECIPIENT VARCHAR2(250);
          CCRECIPIENT VARCHAR2(250);
          BCCRECIPIENT VARCHAR2(250);
          SUBJECT VARCHAR2(250);
          BODY VARCHAR2(250);
          ERRORMESSAGE VARCHAR2(250);
          ATTACHMENTS SENDMAILJPKG.ATTACHMENTS_LIST;
          v_Return NUMBER;
          v_date DATE := trunc(SYSDATE);
          BEGIN
           
            dbms_java.grant_permission( 'BSS', 'SYS:java.io.FilePermission', '/export/home/ntusers/anchisai/EX_BE/Daily_Summary_Perso_file_on_'|| to_char(v_date,'YYYYMMDD') ||'.csv', 'read' );
            --dbms_java.grant_permission( 'BSS', 'SYS:java.io.FilePermission', '/export/home/ntusers/anchisai/EX_BE/Weekly Summary Perso file on '|| to_char(sysdate,'YYYYMMDD') ||'.csv', 'read' );
            --dbms_java.grant_permission( 'BSS', 'SYS:java.io.FilePermission', '/export/home/ntusers/anchisai/EX_BE/Weekly_blacklist_card_statistic_detail'|| to_char(sysdate,'YYYYMMDD') ||'.csv', 'read' );
            commit;
            SMTPSERVERNAME := '127.0.0.1';
            SENDER := 'be@rabbit.co.th';
            RECIPIENT := 'be@rabbit.co.th, cm@rabbit.co.th';
            -- RECIPIENT := 'prasits@rabbit.co.th';
            -- CCRECIPIENT := 'be@rabbit.co.th';
            BCCRECIPIENT := NULL;
            SUBJECT := 'Daily Summary Perso file on'|| to_char(sysdate,'YYYYMMDD') ;
            BODY := 'Dear Card center,' || CHR(13) || CHR(13) ||
        
                        '      Daily Summary Perso file on '|| to_char(sysdate,'YYYYMMDD') || ' as attached.' || CHR(13) || CHR(13) ||
        
                      'Best Regards,'|| CHR(13) ||
                      'BSS Backend'
                      ;
            -- Modify the code to initialize the variable
            ATTACHMENTS := SENDMAILJPKG.ATTACHMENTS_LIST('/export/home/ntusers/anchisai/EX_BE/Daily_Summary_Perso_file_on_'|| to_char(v_date,'YYYYMMDD') ||'.csv');

            v_Return := SENDMAILJPKG.SENDMAIL(
              SMTPSERVERNAME => SMTPSERVERNAME,
              SENDER => SENDER,
              RECIPIENT => RECIPIENT,
              CCRECIPIENT => CCRECIPIENT,
              BCCRECIPIENT => BCCRECIPIENT,
              SUBJECT => SUBJECT,
              BODY => BODY,
              ERRORMESSAGE => ERRORMESSAGE,
              ATTACHMENTS => ATTACHMENTS
            );
            
          END;

    
end DAILY_CARD_PERSO_SUMMARY;
  
procedure DAILY_GEN_MPOS_MID_FILE

    AS 

    BEGIN
          

      declare
        fHandle UTL_FILE.FILE_TYPE; 
        TYPE GenCurTyp IS REF CURSOR;
        detail GenCurTyp;
        v_device_id varchar2(100);
        v_PARTICIPANT_ID varchar2(5);
        v_location varchar2(15);
        v_status varchar2(2);
        v_date DATE := SYSDATE;

        v_log varchar2(255);
      begin
        
        fHandle :=utl_file.fopen('MPOS_MID','MID_'|| to_char(v_date,'YYYYMMDD')|| '_'|| substr(TO_CHAR (SYSDATE),11,2)||substr(TO_CHAR (SYSDATE),14,2)||substr(TO_CHAR (SYSDATE),17,2) ||'_01.csv','w');--Opening a file
        
        v_log := 'DEVICE_ID,PARTICIPANT_ID,LOCATION_CODE,STATUS';
        UTL_FILE.PUT_LINE(fHandle, v_log);
      
      -----------------Detail------------------  
      open detail for 
      ------***************Detail****************----------
       
      select device_id, PARTICIPANT_ID,to_number(substr(to_char(location,'XXXXXXXX'),-6,6),'XXXXXXXX') as location,status 
from DEVICE.DEVICE_STATUS where ACQUIRER_ID = 44;
       ------***************Detail****************-----------;
      loop
        fetch detail into 
        v_device_id,
        v_PARTICIPANT_ID,
        v_location,
        v_status
        ; 

        EXIT WHEN detail%NOTFOUND;   

        v_log := v_device_id || ',' || v_PARTICIPANT_ID || ',' || v_location || ',' || v_status ||CHR(13);        
          UTL_FILE.PUT_LINE(fHandle, v_log);
          UTL_FILE.FFLUSH(fHandle);
        end loop;
        close detail;
      ------------------------------------------
      UTL_FILE.FCLOSE(fHandle);
      end;
    
end DAILY_GEN_MPOS_MID_FILE;

procedure daily_summary_blacklist_b007

    AS 

    BEGIN
          
       DECLARE
          SMTPSERVERNAME VARCHAR2(200);
          SENDER VARCHAR2(200);
          RECIPIENT VARCHAR2(250);
          CCRECIPIENT VARCHAR2(250);
          BCCRECIPIENT VARCHAR2(250);
          subject varchar2(250);
          BODY VARCHAR2(1200);
          ERRORMESSAGE VARCHAR2(250);
          ATTACHMENTS SENDMAILJPKG.ATTACHMENTS_LIST;
          v_return number;
          v_settlement_date date := trunc(sysdate-1);
          v_date varchar2(12) := to_char(sysdate-1, 'YYYYMMDD');
          v_processed_date date;
          v_bl_action varchar2(20);
          v_bl_reason varchar2(200);
          v_vol number;
          v_content varchar2(1000);
          v_content_all varchar2(1200);
          type ref_cursor is ref cursor;
          detail_cur ref_cursor;
          
          BEGIN
            
            open detail_cur for
              
             /*select 'Blacklist_reason= '||
              CASE BLACKLIST_INCLUDE_REASON
                WHEN 0
                THEN 'Filter out - Card not included to blacklist'
                WHEN 1
                THEN 'Block Topup or Block ATU'
                WHEN 2
                THEN 'Block ALL and participant in ATU'
                WHEN 3
                THEN 'Block All and NOT participant in ATU'
                else 'n/a'
              END || ', Count_card=' ||
              COUNT(csc_serial_number)
            FROM atuagent.atu_blacklist_filter
            WHERE settlement_date = v_settlement_date
            GROUP BY settlement_date,
              TRUNC(processed_date_time),
              reports.bkk_int_fun.getactionlistcode (BLOCK_ACTION, 1, 'en' ),
              CASE BLACKLIST_INCLUDE_REASON
                WHEN 0
                THEN 'Filter out - Card not included to blacklist'
                WHEN 1
                THEN 'Block Topup or Block ATU'
                WHEN 2
                THEN 'Block ALL and participant in ATU'
                WHEN 3
                THEN 'Block All and NOT participant in ATU'
                else 'n/a'
              end ;*/
              
              SELECT *
                FROM
                  (SELECT 'Blacklist_reason= '
                    ||
                    CASE BLACKLIST_INCLUDE_REASON
                      WHEN 0
                      THEN 'Filter out - Card not included to blacklist'
                      WHEN 1
                      THEN 'Block Topup or Block ATU'
                      WHEN 2
                      THEN 'Block ALL and participant in ATU'
                      WHEN 3
                      THEN 'Block ALL and NOT participant in ATU'
                      ELSE 'n/a'
                    END
                    || ', Count_card='
                    || COUNT(csc_serial_number) AS detail
                  FROM atuagent.atu_blacklist_filter
                  WHERE settlement_date = v_settlement_date
                  GROUP BY settlement_date,
                    TRUNC(processed_date_time),
                    reports.bkk_int_fun.getactionlistcode (BLOCK_ACTION, 1, 'en' ),
                    CASE BLACKLIST_INCLUDE_REASON
                      WHEN 0
                      THEN 'Filter out - Card not included to blacklist'
                      WHEN 1
                      THEN 'Block Topup or Block ATU'
                      WHEN 2
                      THEN 'Block ALL and participant in ATU'
                      WHEN 3
                      THEN 'Block ALL and NOT participant in ATU'
                      ELSE 'n/a'
                    END
                  ORDER BY detail
                  )
                UNION ALL
                  (SELECT 'Summary blacklist (Block ALL,Block Topup and Block ATU)= '
                    || SUM(vol) AS detail
                  FROM
                    (SELECT
                      CASE BLACKLIST_INCLUDE_REASON
                        WHEN 0
                        THEN 'Filter out - Card not included to blacklist'
                        WHEN 1
                        THEN 'Block Topup or Block ATU'
                        WHEN 2
                        THEN 'Block ALL and participant in ATU'
                        WHEN 3
                        THEN 'Block ALL and NOT participant in ATU'
                        ELSE 'n/a'
                      END ,
                      COUNT(csc_serial_number) AS vol
                    FROM atuagent.atu_blacklist_filter
                    WHERE settlement_date         = v_settlement_date
                    AND blacklist_include_reason IN (1,2,3)
                    GROUP BY
                      CASE BLACKLIST_INCLUDE_REASON
                        WHEN 0
                        THEN 'Filter out - Card not included to blacklist'
                        WHEN 1
                        THEN 'Block Topup or Block ATU'
                        WHEN 2
                        THEN 'Block ALL and participant in ATU'
                        WHEN 3
                        THEN 'Block ALL and NOT participant in ATU'
                        ELSE 'n/a'
                      END
                    )
                  ); 
              
        loop
          fetch detail_cur into v_content;
          exit when detail_cur%notfound;
              
              v_content_all := v_content_all || chr(13) || chr(13) ||v_content;
              
           end loop;--end loop detail--
        close detail_cur;
            
            SMTPSERVERNAME := '127.0.0.1';
            sender := 'be@rabbit.co.th';
            RECIPIENT := 'be@rabbit.co.th';
            CCRECIPIENT := NULL;
            bccrecipient := null;
            subject := 'Summary Blacklist on s.' || v_date ;
            body := 'Dear Team,' || chr(13) || chr(13) ||  
                        'Summary Blacklist from file on Settlement Date: ' || v_date ||
                         v_content_all || chr(13) || chr(13) ||
  
                      
                      'Best Regards,'|| CHR(13) 
                      ;
            -- Modify the code to initialize the variable
           
            v_Return := SENDMAILJPKG.SENDMAIL(
              SMTPSERVERNAME => SMTPSERVERNAME,
              SENDER => SENDER,
              RECIPIENT => RECIPIENT,
              CCRECIPIENT => CCRECIPIENT,
              BCCRECIPIENT => BCCRECIPIENT,
              SUBJECT => SUBJECT,
              BODY => BODY,
              ERRORMESSAGE => ERRORMESSAGE,
              ATTACHMENTS => ATTACHMENTS
            );
            
          END;
    
end daily_summary_blacklist_b007;

procedure DAILY_PS009_ACC
(      vcursor			      OUT	t_cur,
      settle_date		    IN DATE,
      sp_id             IN NUMBER
 ) AS   
   dtsettledt       DATE   := reports.bkk_int_dfv.getdefaultsettledate;
   vstdt            DATE;   
    BEGIN
      IF settle_date IS NULL
        THEN
           vstdt := dtsettledt;
        ELSE
           vstdt := TRUNC (settle_date);
        END IF; 
      OPEN vcursor FOR
/*AS 
    BEGIN
          
           DECLARE
        
          fhandle utl_file.file_type;
          v_date VARCHAR2(11);
          TYPE gencurtyp IS REF CURSOR;
              detail gencurtyp;
              v_log  VARCHAR2(1000);
              v_header_rec VARCHAR2(1000);
                          
                    V_CARD_SERIAL_NUMBER VARCHAR2(100);
                    V_SETTLEMENT_DATE VARCHAR2(100);
                    V_RECON_DATE VARCHAR2(100); 
                    V_SRC_NAME VARCHAR2(100);
                    V_LOCATION_NAME VARCHAR2(100);
                    V_BSS_CARD_TYPE VARCHAR2(100);
                    V_CARD_VOLUME number;
                    V_CARD_DEPOSIT_VALUE number;
                    V_CARD_FEE_VALUE number;
                    V_FIRST_ADD_VALUE number;
                    V_SUM_SALE_VALUE number;

            BEGIN
              ----get settlement_date ----
              SELECT to_char(SYSDATE-1,'DD-MON-YYYY')
              INTO v_date
              FROM dual;
            ---------------------------
            fhandle :=utl_file.fopen('EX_DATA_BE','DAILY_PS009_ACC_s.'|| v_date || '.csv','w');--Opening a file
            -------------- HEADER ----------------
            SELECT 'SETTLEMENT DATE,TRANSDATE,CUS NAME,LOCATION NAME,CARD TYPE,S/N CARD,CARD VOLUME,DEPOSIT VALUE,CARD FEE,ADD VALUE,SALE VALUE' AS HEADER
            INTO v_header_rec
            FROM dual ;
            --------------END HEADER ----------------
            --------------WRITE HEADER---------------
            v_log := v_header_rec ||chr(13);
            utl_file.put_line(fhandle, v_log);
            -----------------------------------------
            OPEN detail FOR     */

select SETTLEMENT_DATE 
,TRANSDATE 
,CUS_NAME ,LOCATION_NAME,CARD_TYPE,CARD_SERIAL_NUMBER,CARD_VOLUME,DEPOSIT_VALUE,CARD_FEE,ADD_VALUE,SALE_VALUE
from (    
      select c_i.card_serial_number ,
      --c_i.settlement_date
      to_CHAR( c_i.settlement_date,'DD-MON-YYYY') AS SETTLEMENT_DATE,
      to_CHAR(c_i.reconciliation_date,'DD-MON-YYYY') AS TRANSDATE,
      -- c_i.reconciliation_date AS recon_date, 
       --c_i.reconciliation_date AS recon_date, 
       c_i.service_participant_id as serv_name,
       reports.bkk_int_fun.getparticipantname(c_i.service_participant_id) as CUS_NAME,
       BSS.CDA.getLocationDesc(c_i.source_participant_id,to_number(SUBSTR(TO_CHAR(c_i.device_location,'XXXXXXXX'),-6,6),'XXXXXXXX'),NULL)||' Station' as LOCATION_NAME,
     -- bss_reports.pkg_fun.getlocationnamefromdevtypeid(c_i.device_location_type, c_i.source_participant_id, c_i.device_location_code)||' Station' as location_name,
      case when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 A'
      then 'Special Rabbit for Adult - Superman'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 B'
      then 'Special Rabbit for Adult - Batman'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 C'
      then 'Special Rabbit for Adult - Wonder Woman'
      when p_i.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 A'
      then 'Special Rabbit for Student - Justice League'
      when p_i.passenger_type = 5 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Advertising'
      then 'Standard - Rabbit  Adult  VGI'
      --change on 30.10.2015--
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 D'
      then 'Specail Rabbit for Adult - Woodstock Snoopy (D)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 E'
      then 'Specail  Rabbit for Adult - Hugs Snoopy (E)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 F'
      then 'Specail Rabbit for Adult - Camp Snoopy (F)'
      -----end change----
      --change on 16.02.2016--
       when p_i.passenger_type = 8 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Advertising'
      then 'Standard - Rabbit Adult Advertising Type1'
      when p_i.passenger_type = 9 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Advertising'
      then 'Standard - Rabbit Student Advertising Type1'
      when p_i.passenger_type = 10 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Advertising'
      then 'Standard - Rabbit Senior Advertising Type1'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 G'
      then 'Special Rabbit for Adult - Batman Showdonwn (G)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 H'
      then 'Special Rabbit for Adult - The Flash Showdonwn (H)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 I'
      then 'Special Rabbit for Adult - Green Lantern Showdonwn (I)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 J'
      then 'Special Rabbit for Adult - The Joker Showdonwn (J)'
      when p_i.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 G'
      then 'Special Rabbit for Student - Bat Moblie Showdonwn (G)'
      -----end change----
      --change on 22.04.2016--
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 K'
      then 'Special Rabbit for Adult - Red Angry Birds Movie (K)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 L'
      then 'Special Rabbit for Adult - Bomb Angry Birds Movie (L)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 M'
      then 'Special Rabbit for Adult - Chuck Angry Birds Movie (M)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 N'
      then 'Special Rabbit for Adult - Pigs Angry Birds Movie (N)'
      when p_i.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 K'
      then 'Special Rabbit for Student - Red Angry Birds Movie (K)'
      -----end change----
       --change on 22.09.2016--
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 O'
      then 'Special Rabbit for Adult - Hello Kitty Red&Bad Maru (O)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 P'
      then 'Special Rabbit for Adult - Hello Kitty Pink&Bad Maru (P)'
      when p_i.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 O'
      then 'Special Rabbit for Student  - Hello Kitty Std.&Bad Maru(O)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 Q'
      then 'Special Rabbit for Adult - Bad Badtz White Kitty&Maru(Q)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 R'
      then 'Special Rabbit for Adult - Bad Badtz Black Kitty&Maru (R)'
      when p_i.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 Q'
      then 'Special Rabbit for Student - Bad Badtz Std. Kitty&Maru (Q)'
      -----end change----
       --change on 27.12.2016--
       /*   Special Adult  Collectible 199 S เปลี่ยนเป็น Special Rabbit for Adult - Kumamon Red (S)
   Special Adult  Collectible 199 T เปลี่ยนเป็น Special Rabbit for Adult - Kumamon Black (T)
   Special Adult  Collectible 199 U เปลี่ยนเป็น Special Rabbit for Adult - Kumamon White (U)
   Special Student  Collectible 199 S เปลี่ยนเป็น Special Rabbit for Student - Kumamon Student (S)*/
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 S'
      then 'Special Rabbit for Adult - Kumamon Red (S)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 T'
      then 'Special Rabbit for Adult - Kumamon Black (T)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 U'
      then 'Special Rabbit for Adult - Kumamon White (U)'
      when p_i.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 S'
      then 'Special Rabbit for Student - Kumamon Student (S)'
      -----end change----
       when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 V'
      then 'Special Rabbit for Adult - Gudetama Yellow (V)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 W'
      then 'Special Rabbit for Adult - Gudetama White (W)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 X'
      then 'Special Rabbit for Adult - Gudetama Lazy (X)'
      when p_i.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 V'
      then 'Special Rabbit for Student - Gudetama Student (V)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 250'
      then 'Special Rabbit for Adult - Snowflake'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 Y'
      then 'Special Rabbit for Adult - Moomin Mint (Y)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 Z'
      then 'Special Rabbit for Adult - Moomin White (Z)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 AA'
      then 'Special Rabbit for Adult - Moomin Pink (AA)'
      when p_i.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 Y'
      then 'Special Rabbit for Student - Moomin and friend (Y)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 BB'
      then 'Special Rabbit for Adult - We Bare Bears GRIZZ (BB)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 CC'
      then 'Special Rabbit for Adult - We Bare Bears ICEBEAR (CC)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 DD'
      then 'Special Rabbit for Adult - We Bare Bears PANDA (DD)'
      when p_i.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 BB'
      then 'Special Rabbit for Student - We Bare Bears STUDENT (BB)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 350 A'
      then 'Special Rabbit for Adult - Gundam Blue (A)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 350 B'
      then 'Special Rabbit for Adult - Zaku Red (B)'      
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 100 (A)'
      then 'Special Rabbit for Adult - Cony (100 A)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 100 (B)'
      then 'Special Rabbit for Adult - Brown (100 B)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 100 (C)'
      then 'Special Rabbit for Adult - Choco (100 C)'
      when p_i.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 100 (A)'
      then 'Special Rabbit for Student - Moon Green (100 A)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 EE'
      then 'Special Rabbit for Adult - Sesame Street White (EE)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 FF'
      then 'Special Rabbit for Adult - Sesame Street Blue (FF)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 GG'
      then 'Special Rabbit for Adult - Sesame Street Black (GG)'
      when p_i.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 EE'
      then 'Special Rabbit for Student - Sesame Street Student (EE)'
      --change on 31.05.2019--      
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 100 (D)'
      then 'Special Rabbit for Adult - Nude Pink 100 (D)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 100 (E)'
      then 'Special Rabbit for Adult - Sky Blue 100 (E)'
      when p_i.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 100 (D)'
      then 'Special Rabbit for Student - Light Green 100 (D)'
       --change on 01.08.2019--
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 HH'
      then 'Special Rabbit for Adult - Conan Black (HH)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 II'
      then 'Special Rabbit for Adult - Conan Blue (II)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 JJ'
      then 'Special Rabbit for Adult - Conan White (JJ)'
      when p_i.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 HH'
      then 'Special Rabbit for Student - Conan Student (HH)'
       --change on 25.10.2019--
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 269 (A)'
      then 'Special Rabbit for Adult - Hello Kitty-Pink 269 (A)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 269 (B)'
      then 'Special Rabbit for Adult - Hello Kitty-White 269 (B)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 269 (C)'
      then 'Special Rabbit for Adult - Hello Kitty-Red 269 (C)'
      when p_i.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 269 (A)'
      then 'Special Rabbit for Student - Hello Kitty-Pink 269 (A)'
      --change on 26.02.2020--
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 KK'
      then 'Special Rabbit for Adult - Pompom Yellow 199 (KK)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 LL'
      then 'Special Rabbit for Adult - Pompom Cup 199 (LL)'
      when p_i.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 KK'
      then 'Special Rabbit for Student - Pompom Yellow Student 199 (KK)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 MM'
      then 'Special Rabbit for Adult - Cinnamon Pool 199 (MM)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 NN'
      then 'Special Rabbit for Adult - Cinnamon Blue 199 (NN)'
      when p_i.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 MM'
      then 'Special Rabbit for Student - Cinnamon Blue Student 199 (MM)'
      --change on 25.06.2020--
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 OO'
      then 'Special Rabbit for Adult - My Melody Pink 199 (OO)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 PP'
      then 'Special Rabbit for Adult - My Melody Red 199 (PP)'
      when p_i.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 OO'
      then 'Special Rabbit for Student - My Melody Pink 199 (OO)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 (QQ)'
      then 'Special Rabbit for Adult - Little Twin Pink 199 (QQ)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 (RR)'
      then 'Special Rabbit for Adult - Little Twin Purple 199 (RR)'
      when p_i.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 (QQ)'
      then 'Special Rabbit for Student - Little Twin Blue 199 (QQ)'
      --change on 09.11.2020--
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 299 (A)'
      then 'Special Rabbit for Adult - Dragon Ball Z Black 299 (A)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 299 (B)'
      then 'Special Rabbit for Adult - Dragon Ball Z Blue 299 (B)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 299 (C)'
      then 'Special Rabbit for Adult - Dragon Ball Z Purple 299 (C)'
      -----change on 23.07.2021----
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 159 (A)'
      then 'Special Rabbit for Adult - Doraemon 159 (A)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 159 (B)'
      then 'Special Rabbit for Adult - Doraemon & Nobita 159 (B)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 159 (C)'
      then 'Special Rabbit for Adult - Doraemon Group 159 (C)'
      ------ end change ----
      
      else reports.bkk_int_fun.getpassengertype(p_i.passenger_type) end as CARD_TYPE,
      bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type) as product_sale_desc,
      --count(c_i.card_serial_number) as card_volume, 
      count(c_i.card_serial_number) as card_volume,
      sum((p_i.payment_value0+p_i.payment_value1+p_i.payment_value2)*0.01) as purse_issue_value, --p_i.card_serial_number as cardsn_pi,
      sum((nvl(c_d.payment_value0,0)+nvl(c_d.payment_value1,0)+nvl(c_d.payment_value2,0))*0.01) as deposit_value, --c_d.card_serial_number as cardsn_cd,
      --sum((nvl(c_f.payment_value0,0)+nvl(c_f.payment_value1,0)+nvl(c_f.payment_value2,0))*0.01) as card_fee_value, --, --c_f.card_serial_number as cardsn_cf,
      case when sum((nvl(c_f.payment_value0,0)+nvl(c_f.payment_value1,0)+nvl(c_f.payment_value2,0))*0.01) = 0 then 
      sum((nvl(c_sf.payment_value0,0)+nvl(c_sf.payment_value1,0)+nvl(c_sf.payment_value2,0)))*0.01
      else sum((nvl(c_f.payment_value0,0)+nvl(c_f.payment_value1,0)+nvl(c_f.payment_value2,0))*0.01) end
      as card_fee,
      sum((nvl(fav_i.payment_value0,0)+nvl(fav_i.payment_value1,0)+nvl(fav_i.payment_value2,0))*0.01) as add_value,
      sum((nvl(c_sf.payment_value0,0)+nvl(c_sf.payment_value1,0)+nvl(c_sf.payment_value2,0)))*0.01 as card_sale_fee_value
      ,(
      sum((nvl(c_d.payment_value0,0)+nvl(c_d.payment_value1,0)+nvl(c_d.payment_value2,0))*0.01)
      +sum((nvl(c_f.payment_value0,0)+nvl(c_f.payment_value1,0)+nvl(c_f.payment_value2,0))*0.01)
      +sum((nvl(fav_i.payment_value0,0)+nvl(fav_i.payment_value1,0)+nvl(fav_i.payment_value2,0))*0.01)
      +sum((nvl(c_sf.payment_value0,0)+nvl(c_sf.payment_value1,0)+nvl(c_sf.payment_value2,0)))*0.01
      ) as sale_value
      from
      (select settlement_date, reconciliation_date, service_participant_id, source_participant_id, 
         null as device_location_type,to_number(SUBSTR(TO_CHAR(device_location,'XXXXXXXX'),-6,6),'XXXXXXXX') as device_location_code, device_id, 
          card_serial_number
          ,card_issuer_id, card_type, card_life_cycle_count,device_location
              from cut_ci_maintenance
              where ud_type=1 and ud_subtype=3  --Card Issue
              and cch_txn_approved='Y'
              and settlement_date= vstdt --TRUNC(SYSDATE-1)
             -- and (sp_id IS NULL OR  service_participant_id = sp_id)
          ) c_i 
          
          left join
          
          (select card_issuer_id, card_serial_number, card_life_cycle_count, card_type, application_passenger_type as passenger_type, 
          sum(payment_value0) as payment_value0, sum(payment_value1) as payment_value1, sum(payment_value2) as payment_value2
              from cut_pi_financial
              where ud_type=3 and ud_subtype=1  --Purse Issue
              and cch_txn_approved='Y'
              and settlement_date= vstdt-- TRUNC(SYSDATE-1)
              --and (sp_id IS NULL OR  service_participant_id = sp_id)
              group by card_issuer_id, card_serial_number, card_life_cycle_count, card_type, application_passenger_type
          ) p_i
          on c_i.card_serial_number = p_i.card_serial_number 
          and c_i.card_issuer_id = p_i.card_issuer_id 
          and c_i.card_life_cycle_count = p_i.card_life_cycle_count 
          and c_i.card_type = p_i.card_type 
          
          left join
          
          (select card_issuer_id, card_serial_number, card_life_cycle_count, card_type, 
          sum(payment_value0) as payment_value0, sum(payment_value1) as payment_value1, sum(payment_value2) as payment_value2
              from CUT_CI_FINANCIAL
              where ud_type=1 and ud_subtype=9  --Card Deposit
              and cch_txn_approved='Y'
              and settlement_date= vstdt --TRUNC(SYSDATE-1)
             -- and (sp_id IS NULL OR  service_participant_id = sp_id)
              group by card_issuer_id, card_serial_number, card_life_cycle_count, card_type
          ) c_d
          on c_i.card_serial_number = c_d.card_serial_number 
          and c_i.card_issuer_id = c_d.card_issuer_id 
          and c_i.card_life_cycle_count = c_d.card_life_cycle_count 
          and c_i.card_type = c_d.card_type 
          
          left join
          
          (select card_issuer_id, card_serial_number, card_life_cycle_count, card_type, --payment_value0, payment_value1, payment_value2
          sum(payment_value0) as payment_value0, sum(payment_value1) as payment_value1, sum(payment_value2) as payment_value2
              from CUT.CUT_CI_FINANCIAL
              where ud_type=1 and ud_subtype=22  --Card Fee
              and cch_txn_approved='Y'
              and settlement_date= vstdt --TRUNC(SYSDATE-1)
             -- and (sp_id IS NULL OR  service_participant_id = sp_id)
              group by card_issuer_id, card_serial_number, card_life_cycle_count, card_type
          ) c_f
          on c_i.card_serial_number = c_f.card_serial_number 
          and c_i.card_issuer_id = c_f.card_issuer_id 
          and c_i.card_life_cycle_count = c_f.card_life_cycle_count 
          and c_i.card_type = c_f.card_type 
          
          left join
          
          (select card_issuer_id, card_serial_number, card_life_cycle_count, card_type, --payment_value0, payment_value1, payment_value2
          sum(payment_value0) as payment_value0, sum(payment_value1) as payment_value1, sum(payment_value2) as payment_value2
              from cut_pi_financial pf
              where pf.ud_type = 3 and pf.ud_subtype = 10 --Purse Add (First Add Value)
              and pf.settlement_date = vstdt --TRUNC(SYSDATE-1)
            --  and (sp_id IS NULL OR  pf.service_participant_id = sp_id)
              and pf.cch_txn_approved = 'Y' 
              and (pf.card_serial_number, pf.ptsn) in 
                (select pp.card_serial_number, pp.ptsn+1 as ptsn
                from cut_pi_financial pp 
                where pp.settlement_date=pf.settlement_date
                and pp.ud_type=3 and pp.ud_subtype=1 and pp.device_id = pf.device_id 
                and pf.txn_date_time between pp.txn_date_time and pp.txn_date_time+3/86400
                and pp.cch_txn_approved = 'Y' 
                and pp.service_participant_id = pf.service_participant_id 
                )
              group by card_issuer_id, card_serial_number, card_life_cycle_count, card_type
          ) fav_i
          on c_i.card_serial_number = fav_i.card_serial_number 
          and c_i.card_issuer_id = fav_i.card_issuer_id 
          and c_i.card_life_cycle_count = fav_i.card_life_cycle_count 
          and c_i.card_type = fav_i.card_type 
          
          left join
          
          (select card_issuer_id, card_serial_number, card_life_cycle_count, card_type, --payment_value0, payment_value1, payment_value2
          sum(payment_value0) as payment_value0, sum(payment_value1) as payment_value1, sum(payment_value2) as payment_value2
              from cut_cardholder_fee
              where ud_type=4 and ud_subtype=50  --Card Sale Fee
              and cch_txn_approved='Y'
              and settlement_date= vstdt --TRUNC(SYSDATE-1)
            --  and (sp_id IS NULL OR  service_participant_id = sp_id)
              group by card_issuer_id, card_serial_number, card_life_cycle_count, card_type
          ) c_sf
          on c_i.card_serial_number = c_sf.card_serial_number 
          and c_i.card_issuer_id = c_sf.card_issuer_id 
          and c_i.card_life_cycle_count = c_sf.card_life_cycle_count 
          and c_i.card_type = c_sf.card_type 

    group by c_i.card_serial_number,c_i.settlement_date, c_i.reconciliation_date, 
    c_i.service_participant_id , reports.bkk_int_fun.getparticipantname(c_i.service_participant_id),
    c_i.source_participant_id , reports.bkk_int_fun.getparticipantname(c_i.source_participant_id) ,
    BSS.CDA.getLocationDesc(c_i.source_participant_id,to_number(SUBSTR(TO_CHAR(c_i.device_location,'XXXXXXXX'),-6,6),'XXXXXXXX'),NULL),
   -- bss_reports.pkg_fun.getlocationnamefromdevtypeid(c_i.device_location_type, c_i.source_participant_id, c_i.device_location_code),
    p_i.passenger_type, reports.bkk_int_fun.getpassengertype(p_i.passenger_type), 
    bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)
)    ;
    
 /*   loop
              fetch detail
              INTO 
                V_SETTLEMENT_DATE,
                V_RECON_DATE,
                V_SRC_NAME,
                V_LOCATION_NAME,
                V_BSS_CARD_TYPE,
                V_CARD_SERIAL_NUMBER,
                V_CARD_VOLUME,
                V_CARD_DEPOSIT_VALUE,
                V_CARD_FEE_VALUE,
                V_FIRST_ADD_VALUE,
                V_SUM_SALE_VALUE;

              
              exit
            WHEN detail%notfound;
             
              v_log := V_SETTLEMENT_DATE||','||V_RECON_DATE||','||V_SRC_NAME||','||V_LOCATION_NAME||','||V_BSS_CARD_TYPE||','||V_CARD_SERIAL_NUMBER||','||V_CARD_VOLUME||','||V_CARD_DEPOSIT_VALUE||','||V_CARD_FEE_VALUE||','||V_FIRST_ADD_VALUE||','||V_SUM_SALE_VALUE||chr(13);
              
              utl_file.put_line(fhandle, v_log);
              utl_file.fflush(fhandle);
              
            END loop ;
            CLOSE detail;

            utl_file.fclose(fhandle);
          END;
          
         --send mail--
           DECLARE
          smtpservername VARCHAR2(200);
          sender VARCHAR2(200);
          recipient VARCHAR2(250);
          ccrecipient VARCHAR2(250);
          bccrecipient VARCHAR2(250);
          subject VARCHAR2(250);
          BODY VARCHAR2(250);
          errormessage VARCHAR2(250);
          attachments sendmailjpkg.attachments_list;
          v_return NUMBER;
          v_date date;
         
          BEGIN
          
            SELECT to_char(SYSDATE-1,'dd-MON-yyyy')
              INTO v_date
              FROM dual;
            dbms_java.grant_permission( 'BSS', 'SYS:java.io.FilePermission', '/export/home/bssuser/dba_directory/PL_SQL/EX_DATA/DAILY_PS009_ACC_s.'|| to_char(SYSDATE-1,'DD-MON-YYYY') || '.csv', 'read' );
            COMMIT;
            smtpservername := '127.0.0.1';
            sender := 'be@rabbit.co.th';
            recipient := 'supalerkw@rabbit.co.th,nattamontakrank@rabbit.co.th';
            ccrecipient := 'be@rabbit.co.th';
            bccrecipient := NULL;
            subject := 'PS009-S009 Card and Product Sale Summary Report Acc_s.'|| to_char(SYSDATE-1, 'YYYYMMDD') ;
            BODY := 'Dear ALL,' || chr(13) || chr(13) ||
        
                        '    DAILY_PS009_ACC s.' || to_char(SYSDATE-1, 'YYYYMMDD') || ' as attached.' || chr(13) || chr(13) ||
        
                      'Best Regards,'|| chr(13) 
                      ;
            -- Modify the code to initialize the variable
             attachments := sendmailjpkg.attachments_list('/export/home/bssuser/dba_directory/PL_SQL/EX_DATA/DAILY_PS009_ACC_s.'|| to_char(SYSDATE-1,'DD-MON-YYYY') || '.csv');
              v_return := sendmailjpkg.sendmail(
              smtpservername => smtpservername,
              sender => sender,
              recipient => recipient,
              ccrecipient => ccrecipient,
              bccrecipient => bccrecipient,
              subject => subject,
              BODY => BODY,
              errormessage => errormessage,
              attachments => attachments
            );
            END;*/
end DAILY_PS009_ACC;

procedure ps009_s009_cardsalesummary_acc(
      vcursor			      OUT	t_cur,
      settle_date		    IN DATE,
      sp_id             IN NUMBER
   ) AS
   
   dtsettledt       DATE   := reports.bkk_int_dfv.getdefaultsettledate;
   vstdt            DATE;
   
    BEGIN
  
      IF settle_date IS NULL
        THEN
           vstdt := dtsettledt;
        ELSE
           vstdt := TRUNC (settle_date);
        END IF;
  
      OPEN vcursor FOR
      

select SETTLEMENT_DATE,RECON_DATE,SERV_NAME,	SRC_NAME,	LOCATION_NAME,	BSS_CARD_TYPE,
PRODUCT_SALE_DESC,CARD_VOLUME,PURSE_ISSUE_VALUE,CARD_DEPOSIT_VALUE,	CARD_FEE_VALUE,	FIRST_ADD_VALUE,
CARD_SALE_FEE_VALUE,SUM_SALE_VALUE
from (    
      select c_i.settlement_date, 
       c_i.reconciliation_date AS recon_date, 
       --c_i.reconciliation_date AS recon_date, 
       c_i.service_participant_id as serv_name,
       reports.bkk_int_fun.getparticipantname(c_i.service_participant_id) as src_name,
       BSS.CDA.getLocationDesc(c_i.source_participant_id,to_number(SUBSTR(TO_CHAR(c_i.device_location,'XXXXXXXX'),-6,6),'XXXXXXXX'),NULL)||' Station' as location_name,
     -- bss_reports.pkg_fun.getlocationnamefromdevtypeid(c_i.device_location_type, c_i.source_participant_id, c_i.device_location_code)||' Station' as location_name,
      case when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 A'
      then 'Special Rabbit for Adult - Superman'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 B'
      then 'Special Rabbit for Adult - Batman'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 C'
      then 'Special Rabbit for Adult - Wonder Woman'
      when p_i.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 A'
      then 'Special Rabbit for Student - Justice League'
      when p_i.passenger_type = 5 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Advertising'
      then 'Standard - Rabbit  Adult  VGI'
      --change on 30.10.2015--
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 D'
      then 'Specail Rabbit for Adult - Woodstock Snoopy (D)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 E'
      then 'Specail  Rabbit for Adult - Hugs Snoopy (E)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 F'
      then 'Specail Rabbit for Adult - Camp Snoopy (F)'
      -----end change----
      --change on 16.02.2016--
       when p_i.passenger_type = 8 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Advertising'
      then 'Standard - Rabbit Adult Advertising Type1'
      when p_i.passenger_type = 9 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Advertising'
      then 'Standard - Rabbit Student Advertising Type1'
      when p_i.passenger_type = 10 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Advertising'
      then 'Standard - Rabbit Senior Advertising Type1'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 G'
      then 'Special Rabbit for Adult - Batman Showdonwn (G)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 H'
      then 'Special Rabbit for Adult - The Flash Showdonwn (H)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 I'
      then 'Special Rabbit for Adult - Green Lantern Showdonwn (I)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 J'
      then 'Special Rabbit for Adult - The Joker Showdonwn (J)'
      when p_i.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 G'
      then 'Special Rabbit for Student - Bat Moblie Showdonwn (G)'
      -----end change----
      --change on 22.04.2016--
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 K'
      then 'Special Rabbit for Adult - Red Angry Birds Movie (K)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 L'
      then 'Special Rabbit for Adult - Bomb Angry Birds Movie (L)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 M'
      then 'Special Rabbit for Adult - Chuck Angry Birds Movie (M)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 N'
      then 'Special Rabbit for Adult - Pigs Angry Birds Movie (N)'
      when p_i.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 K'
      then 'Special Rabbit for Student - Red Angry Birds Movie (K)'
      -----end change----
       --change on 22.09.2016--
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 O'
      then 'Special Rabbit for Adult - Hello Kitty Red&Bad Maru (O)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 P'
      then 'Special Rabbit for Adult - Hello Kitty Pink&Bad Maru (P)'
      when p_i.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 O'
      then 'Special Rabbit for Student  - Hello Kitty Std.&Bad Maru(O)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 Q'
      then 'Special Rabbit for Adult - Bad Badtz White Kitty&Maru(Q)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 R'
      then 'Special Rabbit for Adult - Bad Badtz Black Kitty&Maru (R)'
      when p_i.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 Q'
      then 'Special Rabbit for Student - Bad Badtz Std. Kitty&Maru (Q)'
      -----end change----
       --change on 27.12.2016--
       /*   Special Adult  Collectible 199 S เปลี่ยนเป็น Special Rabbit for Adult - Kumamon Red (S)
   Special Adult  Collectible 199 T เปลี่ยนเป็น Special Rabbit for Adult - Kumamon Black (T)
   Special Adult  Collectible 199 U เปลี่ยนเป็น Special Rabbit for Adult - Kumamon White (U)
   Special Student  Collectible 199 S เปลี่ยนเป็น Special Rabbit for Student - Kumamon Student (S)*/
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 S'
      then 'Special Rabbit for Adult - Kumamon Red (S)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 T'
      then 'Special Rabbit for Adult - Kumamon Black (T)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 U'
      then 'Special Rabbit for Adult - Kumamon White (U)'
      when p_i.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 S'
      then 'Special Rabbit for Student - Kumamon Student (S)'
      -----end change----
       when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 V'
      then 'Special Rabbit for Adult - Gudetama Yellow (V)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 W'
      then 'Special Rabbit for Adult - Gudetama White (W)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 X'
      then 'Special Rabbit for Adult - Gudetama Lazy (X)'
      when p_i.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 V'
      then 'Special Rabbit for Student - Gudetama Student (V)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 250'
      then 'Special Rabbit for Adult - Snowflake'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 Y'
      then 'Special Rabbit for Adult - Moomin Mint (Y)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 Z'
      then 'Special Rabbit for Adult - Moomin White (Z)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 AA'
      then 'Special Rabbit for Adult - Moomin Pink (AA)'
      when p_i.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 Y'
      then 'Special Rabbit for Student - Moomin and friend (Y)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 BB'
      then 'Special Rabbit for Adult - We Bare Bears GRIZZ (BB)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 CC'
      then 'Special Rabbit for Adult - We Bare Bears ICEBEAR (CC)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 DD'
      then 'Special Rabbit for Adult - We Bare Bears PANDA (DD)'
      when p_i.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 BB'
      then 'Special Rabbit for Student - We Bare Bears STUDENT (BB)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 350 A'
      then 'Special Rabbit for Adult - Gundam Blue (A)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 350 B'
      then 'Special Rabbit for Adult - Zaku Red (B)'      
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 100 (A)'
      then 'Special Rabbit for Adult - Cony (100 A)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 100 (B)'
      then 'Special Rabbit for Adult - Brown (100 B)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 100 (C)'
      then 'Special Rabbit for Adult - Choco (100 C)'
      when p_i.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 100 (A)'
      then 'Special Rabbit for Student - Moon Green (100 A)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 EE'
      then 'Special Rabbit for Adult - Sesame Street White (EE)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 FF'
      then 'Special Rabbit for Adult - Sesame Street Blue (FF)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 GG'
      then 'Special Rabbit for Adult - Sesame Street Black (GG)'
      when p_i.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 EE'
      then 'Special Rabbit for Student - Sesame Street Student (EE)'
      --change on 31.05.2019--      
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 100 (D)'
      then 'Special Rabbit for Adult - Nude Pink 100 (D)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 100 (E)'
      then 'Special Rabbit for Adult - Sky Blue 100 (E)'
      when p_i.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 100 (D)'
      then 'Special Rabbit for Student - Light Green 100 (D)'
       --change on 01.08.2019--
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 HH'
      then 'Special Rabbit for Adult - Conan Black (HH)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 II'
      then 'Special Rabbit for Adult - Conan Blue (II)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 JJ'
      then 'Special Rabbit for Adult - Conan White (JJ)'
      when p_i.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 HH'
      then 'Special Rabbit for Student - Conan Student (HH)'
       --change on 25.10.2019--
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 269 (A)'
      then 'Special Rabbit for Adult - Hello Kitty-Pink 269 (A)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 269 (B)'
      then 'Special Rabbit for Adult - Hello Kitty-White 269 (B)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 269 (C)'
      then 'Special Rabbit for Adult - Hello Kitty-Red 269 (C)'
      when p_i.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 269 (A)'
      then 'Special Rabbit for Student - Hello Kitty-Pink 269 (A)'
      --change on 26.02.2020--
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 KK'
      then 'Special Rabbit for Adult - Pompom Yellow 199 (KK)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 LL'
      then 'Special Rabbit for Adult - Pompom Cup 199 (LL)'
      when p_i.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 KK'
      then 'Special Rabbit for Student - Pompom Yellow Student 199 (KK)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 MM'
      then 'Special Rabbit for Adult - Cinnamon Pool 199 (MM)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 NN'
      then 'Special Rabbit for Adult - Cinnamon Blue 199 (NN)'
      when p_i.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 MM'
      then 'Special Rabbit for Student - Cinnamon Blue Student 199 (MM)'
      --change on 25.06.2020--
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 OO'
      then 'Special Rabbit for Adult - My Melody Pink 199 (OO)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 PP'
      then 'Special Rabbit for Adult - My Melody Red 199 (PP)'
      when p_i.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 OO'
      then 'Special Rabbit for Student - My Melody Pink 199 (OO)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 (QQ)'
      then 'Special Rabbit for Adult - Little Twin Pink 199 (QQ)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 (RR)'
      then 'Special Rabbit for Adult - Little Twin Purple 199 (RR)'
      when p_i.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 (QQ)'
      then 'Special Rabbit for Student - Little Twin Blue 199 (QQ)'
      --change on 09.11.2020--
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 299 (A)'
      then 'Special Rabbit for Adult - Dragon Ball Z Black 299 (A)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 299 (B)'
      then 'Special Rabbit for Adult - Dragon Ball Z Blue 299 (B)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 299 (C)'
      then 'Special Rabbit for Adult - Dragon Ball Z Purple 299 (C)'
      -----change 23.07.2021----
       when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 159 (A)'
      then 'Special Rabbit for Adult - Doraemon 159 (A)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 159 (B)'
      then 'Special Rabbit for Adult - Doraemon & Nobita 159 (B)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 159 (C)'
      then 'Special Rabbit for Adult - Doraemon Group 159 (C)'
      ------ end change ----
      else reports.bkk_int_fun.getpassengertype(p_i.passenger_type) end as bss_card_type,
      bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type) as product_sale_desc,
      --count(c_i.card_serial_number) as card_volume, 
      count(c_i.card_serial_number) as card_volume,
      sum((p_i.payment_value0+p_i.payment_value1+p_i.payment_value2)*0.01) as purse_issue_value, --p_i.card_serial_number as cardsn_pi,
      sum((nvl(c_d.payment_value0,0)+nvl(c_d.payment_value1,0)+nvl(c_d.payment_value2,0))*0.01) as card_deposit_value, --c_d.card_serial_number as cardsn_cd,
      --sum((nvl(c_f.payment_value0,0)+nvl(c_f.payment_value1,0)+nvl(c_f.payment_value2,0))*0.01) as card_fee_value, --, --c_f.card_serial_number as cardsn_cf,
      case when sum((nvl(c_f.payment_value0,0)+nvl(c_f.payment_value1,0)+nvl(c_f.payment_value2,0))*0.01) = 0 then 
      sum((nvl(c_sf.payment_value0,0)+nvl(c_sf.payment_value1,0)+nvl(c_sf.payment_value2,0)))*0.01
      else sum((nvl(c_f.payment_value0,0)+nvl(c_f.payment_value1,0)+nvl(c_f.payment_value2,0))*0.01) end
      as card_fee_value,
      sum((nvl(fav_i.payment_value0,0)+nvl(fav_i.payment_value1,0)+nvl(fav_i.payment_value2,0))*0.01) as first_add_value,
      sum((nvl(c_sf.payment_value0,0)+nvl(c_sf.payment_value1,0)+nvl(c_sf.payment_value2,0)))*0.01 as card_sale_fee_value
      ,(
      sum((nvl(c_d.payment_value0,0)+nvl(c_d.payment_value1,0)+nvl(c_d.payment_value2,0))*0.01)
      +sum((nvl(c_f.payment_value0,0)+nvl(c_f.payment_value1,0)+nvl(c_f.payment_value2,0))*0.01)
      +sum((nvl(fav_i.payment_value0,0)+nvl(fav_i.payment_value1,0)+nvl(fav_i.payment_value2,0))*0.01)
      +sum((nvl(c_sf.payment_value0,0)+nvl(c_sf.payment_value1,0)+nvl(c_sf.payment_value2,0)))*0.01
      ) as sum_sale_value
      from
      (select settlement_date, reconciliation_date, service_participant_id, source_participant_id, 
         null as device_location_type,to_number(SUBSTR(TO_CHAR(device_location,'XXXXXXXX'),-6,6),'XXXXXXXX') as device_location_code, device_id, 
          card_serial_number
          ,card_issuer_id, card_type, card_life_cycle_count,device_location
              from cut_ci_maintenance
              where ud_type=1 and ud_subtype=3  --Card Issue
              and cch_txn_approved='Y'
              and settlement_date=vstdt
              and (sp_id IS NULL OR  service_participant_id = sp_id)
          ) c_i 
          
          left join
          
          (select card_issuer_id, card_serial_number, card_life_cycle_count, card_type, application_passenger_type as passenger_type, 
          sum(payment_value0) as payment_value0, sum(payment_value1) as payment_value1, sum(payment_value2) as payment_value2
              from cut_pi_financial
              where ud_type=3 and ud_subtype=1  --Purse Issue
              and cch_txn_approved='Y'
              and settlement_date=vstdt
              and (sp_id IS NULL OR  service_participant_id = sp_id)
              group by card_issuer_id, card_serial_number, card_life_cycle_count, card_type, application_passenger_type
          ) p_i
          on c_i.card_serial_number = p_i.card_serial_number 
          and c_i.card_issuer_id = p_i.card_issuer_id 
          and c_i.card_life_cycle_count = p_i.card_life_cycle_count 
          and c_i.card_type = p_i.card_type 
          
          left join
          
          (select card_issuer_id, card_serial_number, card_life_cycle_count, card_type, 
          sum(payment_value0) as payment_value0, sum(payment_value1) as payment_value1, sum(payment_value2) as payment_value2
              from CUT_CI_FINANCIAL
              where ud_type=1 and ud_subtype=9  --Card Deposit
              and cch_txn_approved='Y'
              and settlement_date=vstdt
              and (sp_id IS NULL OR  service_participant_id = sp_id)
              group by card_issuer_id, card_serial_number, card_life_cycle_count, card_type
          ) c_d
          on c_i.card_serial_number = c_d.card_serial_number 
          and c_i.card_issuer_id = c_d.card_issuer_id 
          and c_i.card_life_cycle_count = c_d.card_life_cycle_count 
          and c_i.card_type = c_d.card_type 
          
          left join
          
          (select card_issuer_id, card_serial_number, card_life_cycle_count, card_type, --payment_value0, payment_value1, payment_value2
          sum(payment_value0) as payment_value0, sum(payment_value1) as payment_value1, sum(payment_value2) as payment_value2
              from CUT.CUT_CI_FINANCIAL
              where ud_type=1 and ud_subtype=22  --Card Fee
              and cch_txn_approved='Y'
              and settlement_date=vstdt
              and (sp_id IS NULL OR  service_participant_id = sp_id)
              group by card_issuer_id, card_serial_number, card_life_cycle_count, card_type
          ) c_f
          on c_i.card_serial_number = c_f.card_serial_number 
          and c_i.card_issuer_id = c_f.card_issuer_id 
          and c_i.card_life_cycle_count = c_f.card_life_cycle_count 
          and c_i.card_type = c_f.card_type 
          
          left join
          
          (select card_issuer_id, card_serial_number, card_life_cycle_count, card_type, --payment_value0, payment_value1, payment_value2
          sum(payment_value0) as payment_value0, sum(payment_value1) as payment_value1, sum(payment_value2) as payment_value2
              from cut_pi_financial pf
              where pf.ud_type = 3 and pf.ud_subtype = 10 --Purse Add (First Add Value)
              and pf.settlement_date =vstdt
              and (sp_id IS NULL OR  pf.service_participant_id = sp_id)
              and pf.cch_txn_approved = 'Y' 
              and (pf.card_serial_number, pf.ptsn) in 
                (select pp.card_serial_number, pp.ptsn+1 as ptsn
                from cut_pi_financial pp 
                where pp.settlement_date=pf.settlement_date
                and pp.ud_type=3 and pp.ud_subtype=1 and pp.device_id = pf.device_id 
                and pf.txn_date_time between pp.txn_date_time and pp.txn_date_time+3/86400
                and pp.cch_txn_approved = 'Y' 
                and pp.service_participant_id = pf.service_participant_id 
                )
              group by card_issuer_id, card_serial_number, card_life_cycle_count, card_type
          ) fav_i
          on c_i.card_serial_number = fav_i.card_serial_number 
          and c_i.card_issuer_id = fav_i.card_issuer_id 
          and c_i.card_life_cycle_count = fav_i.card_life_cycle_count 
          and c_i.card_type = fav_i.card_type 
          
          left join
          
          (select card_issuer_id, card_serial_number, card_life_cycle_count, card_type, --payment_value0, payment_value1, payment_value2
          sum(payment_value0) as payment_value0, sum(payment_value1) as payment_value1, sum(payment_value2) as payment_value2
              from cut_cardholder_fee
              where ud_type=4 and ud_subtype=50  --Card Sale Fee
              and cch_txn_approved='Y'
              and settlement_date=vstdt
              and (sp_id IS NULL OR  service_participant_id = sp_id)
              group by card_issuer_id, card_serial_number, card_life_cycle_count, card_type
          ) c_sf
          on c_i.card_serial_number = c_sf.card_serial_number 
          and c_i.card_issuer_id = c_sf.card_issuer_id 
          and c_i.card_life_cycle_count = c_sf.card_life_cycle_count 
          and c_i.card_type = c_sf.card_type 

    group by c_i.settlement_date, c_i.reconciliation_date, 
    c_i.service_participant_id , reports.bkk_int_fun.getparticipantname(c_i.service_participant_id),
    c_i.source_participant_id , reports.bkk_int_fun.getparticipantname(c_i.source_participant_id) ,
    BSS.CDA.getLocationDesc(c_i.source_participant_id,to_number(SUBSTR(TO_CHAR(c_i.device_location,'XXXXXXXX'),-6,6),'XXXXXXXX'),NULL),
   -- bss_reports.pkg_fun.getlocationnamefromdevtypeid(c_i.device_location_type, c_i.source_participant_id, c_i.device_location_code),
    p_i.passenger_type, reports.bkk_int_fun.getpassengertype(p_i.passenger_type), 
    bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)
)    ;
    
end ps009_s009_cardsalesummary_acc;
     
procedure MONTHLY_PS009_ACC(
      vcursor            OUT      t_cur,
      start_date         IN       DATE,
      end_date           IN       DATE,
     sp_id             IN NUMBER
      --vlocid      IN    NUMBER
   ) AS
   
     dtstartdt        DATE   := reports.bkk_int_dfv.getlastmonthfirsdate;
     vstdt            DATE;
     
     dtenddt          DATE   := reports.bkk_int_dfv.getlastmonthlastdate(sysdate);
     vendt            DATE;
     
       
    BEGIN
      
      IF start_date IS NULL
      THEN
         vstdt := dtstartdt;
      ELSE
         vstdt := TRUNC (start_date);
      END IF;
  
      IF end_date IS NULL
      THEN
         vendt := dtenddt;
      ELSE
         vendt := TRUNC (end_date);
      END IF;
     
              
      OPEN vcursor FOR
           
select  startDate ,EndDate,
PS009,BSS_CARD_TYPE,
CARD_VOLUME,
PURSE_ISSUE_VALUE,
CARD_DEPOSIT_VALUE,
CARD_FEE_VALUE,
FIRST_ADD_VALUE,
CARD_SALE_FEE_VALUE,
SUM_SALE_VALUE 
,CUS_NAME
from (
select vstdt as startDate , vendt as EndDate, null as PS009,BSS_CARD_TYPE,
sum(CARD_VOLUME) as CARD_VOLUME,
sum(PURSE_ISSUE_VALUE) as PURSE_ISSUE_VALUE,
sum(CARD_DEPOSIT_VALUE) as CARD_DEPOSIT_VALUE,
sum(CARD_FEE_VALUE) as CARD_FEE_VALUE,
sum(FIRST_ADD_VALUE) as FIRST_ADD_VALUE,
sum(CARD_SALE_FEE_VALUE) as CARD_SALE_FEE_VALUE,
sum(SUM_SALE_VALUE) as SUM_SALE_VALUE
,CUS_NAME
from (    
      select null as PS009, reports.bkk_int_fun.getparticipantname(c_i.service_participant_id) as CUS_NAME,
      case when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 A'
      then 'Special Rabbit for Adult - Superman'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 B'
      then 'Special Rabbit for Adult - Batman'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 C'
      then 'Special Rabbit for Adult - Wonder Woman'
      when p_i.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 A'
      then 'Special Rabbit for Student - Justice League'
      when p_i.passenger_type = 5 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Advertising'
      then 'Standard - Rabbit  Adult  VGI'
      --change on 30.10.2015--
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 D'
      then 'Specail Rabbit for Adult - Woodstock Snoopy (D)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 E'
      then 'Specail  Rabbit for Adult - Hugs Snoopy (E)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 F'
      then 'Specail Rabbit for Adult - Camp Snoopy (F)'
      -----end change----
      --change on 16.02.2016--
       when p_i.passenger_type = 8 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Advertising'
      then 'Standard - Rabbit Adult Advertising Type1'
      when p_i.passenger_type = 9 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Advertising'
      then 'Standard - Rabbit Student Advertising Type1'
      when p_i.passenger_type = 10 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Advertising'
      then 'Standard - Rabbit Senior Advertising Type1'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 G'
      then 'Special Rabbit for Adult - Batman Showdonwn (G)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 H'
      then 'Special Rabbit for Adult - The Flash Showdonwn (H)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 I'
      then 'Special Rabbit for Adult - Green Lantern Showdonwn (I)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 J'
      then 'Special Rabbit for Adult - The Joker Showdonwn (J)'
      when p_i.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 G'
      then 'Special Rabbit for Student - Bat Moblie Showdonwn (G)'
      -----end change----
      --change on 22.04.2016--
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 K'
      then 'Special Rabbit for Adult - Red Angry Birds Movie (K)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 L'
      then 'Special Rabbit for Adult - Bomb Angry Birds Movie (L)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 M'
      then 'Special Rabbit for Adult - Chuck Angry Birds Movie (M)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 N'
      then 'Special Rabbit for Adult - Pigs Angry Birds Movie (N)'
      when p_i.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 K'
      then 'Special Rabbit for Student - Red Angry Birds Movie (K)'
      -----end change----
       --change on 22.09.2016--
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 O'
      then 'Special Rabbit for Adult - Hello Kitty Red&Bad Maru (O)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 P'
      then 'Special Rabbit for Adult - Hello Kitty Pink&Bad Maru (P)'
      when p_i.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 O'
      then 'Special Rabbit for Student  - Hello Kitty Std.&Bad Maru(O)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 Q'
      then 'Special Rabbit for Adult - Bad Badtz White Kitty&Maru(Q)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 R'
      then 'Special Rabbit for Adult - Bad Badtz Black Kitty&Maru (R)'
      when p_i.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 Q'
      then 'Special Rabbit for Student - Bad Badtz Std. Kitty&Maru (Q)'
      -----end change----
       --change on 27.12.2016--
       /*   Special Adult  Collectible 199 S เปลี่ยนเป็น Special Rabbit for Adult - Kumamon Red (S)
   Special Adult  Collectible 199 T เปลี่ยนเป็น Special Rabbit for Adult - Kumamon Black (T)
   Special Adult  Collectible 199 U เปลี่ยนเป็น Special Rabbit for Adult - Kumamon White (U)
   Special Student  Collectible 199 S เปลี่ยนเป็น Special Rabbit for Student - Kumamon Student (S)*/
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 S'
      then 'Special Rabbit for Adult - Kumamon Red (S)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 T'
      then 'Special Rabbit for Adult - Kumamon Black (T)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 U'
      then 'Special Rabbit for Adult - Kumamon White (U)'
      when p_i.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 S'
      then 'Special Rabbit for Student - Kumamon Student (S)'
      -----end change----
       when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 V'
      then 'Special Rabbit for Adult - Gudetama Yellow (V)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 W'
      then 'Special Rabbit for Adult - Gudetama White (W)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 X'
      then 'Special Rabbit for Adult - Gudetama Lazy (X)'
      when p_i.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 V'
      then 'Special Rabbit for Student - Gudetama Student (V)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 250'
      then 'Special Rabbit for Adult - Snowflake'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 Y'
      then 'Special Rabbit for Adult - Moomin Mint (Y)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 Z'
      then 'Special Rabbit for Adult - Moomin White (Z)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 AA'
      then 'Special Rabbit for Adult - Moomin Pink (AA)'
      when p_i.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 Y'
      then 'Special Rabbit for Student - Moomin and friend (Y)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 BB'
      then 'Special Rabbit for Adult - We Bare Bears GRIZZ (BB)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 CC'
      then 'Special Rabbit for Adult - We Bare Bears ICEBEAR (CC)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 DD'
      then 'Special Rabbit for Adult - We Bare Bears PANDA (DD)'
      when p_i.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 BB'
      then 'Special Rabbit for Student - We Bare Bears STUDENT (BB)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 350 A'
      then 'Special Rabbit for Adult - Gundam Blue (A)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 350 B'
      then 'Special Rabbit for Adult - Zaku Red (B)'      
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 100 (A)'
      then 'Special Rabbit for Adult - Cony (100 A)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 100 (B)'
      then 'Special Rabbit for Adult - Brown (100 B)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 100 (C)'
      then 'Special Rabbit for Adult - Choco (100 C)'
      when p_i.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 100 (A)'
      then 'Special Rabbit for Student - Moon Green (100 A)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 EE'
      then 'Special Rabbit for Adult - Sesame Street White (EE)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 FF'
      then 'Special Rabbit for Adult - Sesame Street Blue (FF)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 GG'
      then 'Special Rabbit for Adult - Sesame Street Black (GG)'
      when p_i.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 EE'
      then 'Special Rabbit for Student - Sesame Street Student (EE)'
      --change on 31.05.2019--      
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 100 (D)'
      then 'Special Rabbit for Adult - Nude Pink 100 (D)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 100 (E)'
      then 'Special Rabbit for Adult - Sky Blue 100 (E)'
      when p_i.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 100 (D)'
      then 'Special Rabbit for Student - Light Green 100 (D)'
       --change on 01.08.2019--
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 HH'
      then 'Special Rabbit for Adult - Conan Black (HH)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 II'
      then 'Special Rabbit for Adult - Conan Blue (II)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 JJ'
      then 'Special Rabbit for Adult - Conan White (JJ)'
      when p_i.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 HH'
      then 'Special Rabbit for Student - Conan Student (HH)'
       --change on 25.10.2019--
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 269 (A)'
      then 'Special Rabbit for Adult - Hello Kitty-Pink 269 (A)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 269 (B)'
      then 'Special Rabbit for Adult - Hello Kitty-White 269 (B)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 269 (C)'
      then 'Special Rabbit for Adult - Hello Kitty-Red 269 (C)'
      when p_i.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 269 (A)'
      then 'Special Rabbit for Student - Hello Kitty-Pink 269 (A)'
      --change on 26.02.2020--
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 KK'
      then 'Special Rabbit for Adult - Pompom Yellow 199 (KK)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 LL'
      then 'Special Rabbit for Adult - Pompom Cup 199 (LL)'
      when p_i.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 KK'
      then 'Special Rabbit for Student - Pompom Yellow Student 199 (KK)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 MM'
      then 'Special Rabbit for Adult - Cinnamon Pool 199 (MM)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 NN'
      then 'Special Rabbit for Adult - Cinnamon Blue 199 (NN)'
      when p_i.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 MM'
      then 'Special Rabbit for Student - Cinnamon Blue Student 199 (MM)'
      --change on 25.06.2020--
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 OO'
      then 'Special Rabbit for Adult - My Melody Pink 199 (OO)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 PP'
      then 'Special Rabbit for Adult - My Melody Red 199 (PP)'
      when p_i.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 OO'
      then 'Special Rabbit for Student - My Melody Pink 199 (OO)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 (QQ)'
      then 'Special Rabbit for Adult - Little Twin Pink 199 (QQ)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 (RR)'
      then 'Special Rabbit for Adult - Little Twin Purple 199 (RR)'
      when p_i.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 199 (QQ)'
      then 'Special Rabbit for Student - Little Twin Blue 199 (QQ)'
      --change on 09.11.2020--
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 299 (A)'
      then 'Special Rabbit for Adult - Dragon Ball Z Black 299 (A)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 299 (B)'
      then 'Special Rabbit for Adult - Dragon Ball Z Blue 299 (B)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 299 (C)'
      then 'Special Rabbit for Adult - Dragon Ball Z Purple 299 (C)'
      ----- change on 23.07.2021----
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 159 (A)'
      then 'Special Rabbit for Adult - Doraemon 159 (A)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 159 (B)'
      then 'Special Rabbit for Adult - Doraemon & Nobita 159 (B)'
      when p_i.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)='Collectible 159 (C)'
      then 'Special Rabbit for Adult - Doraemon Group 159 (C)'
      ------ end change ----
      else reports.bkk_int_fun.getpassengertype(p_i.passenger_type) end as bss_card_type,
      bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type) as product_sale_desc,
      --count(c_i.card_serial_number) as card_volume, 
      count(c_i.card_serial_number) as card_volume,
      sum((p_i.payment_value0+p_i.payment_value1+p_i.payment_value2)*0.01) as purse_issue_value, --p_i.card_serial_number as cardsn_pi,
      sum((nvl(c_d.payment_value0,0)+nvl(c_d.payment_value1,0)+nvl(c_d.payment_value2,0))*0.01) as card_deposit_value, --c_d.card_serial_number as cardsn_cd,
      --sum((nvl(c_f.payment_value0,0)+nvl(c_f.payment_value1,0)+nvl(c_f.payment_value2,0))*0.01) as card_fee_value, --, --c_f.card_serial_number as cardsn_cf,
      case when sum((nvl(c_f.payment_value0,0)+nvl(c_f.payment_value1,0)+nvl(c_f.payment_value2,0))*0.01) = 0 then 
      sum((nvl(c_sf.payment_value0,0)+nvl(c_sf.payment_value1,0)+nvl(c_sf.payment_value2,0)))*0.01
      else sum((nvl(c_f.payment_value0,0)+nvl(c_f.payment_value1,0)+nvl(c_f.payment_value2,0))*0.01) end
      as card_fee_value,
      sum((nvl(fav_i.payment_value0,0)+nvl(fav_i.payment_value1,0)+nvl(fav_i.payment_value2,0))*0.01) as first_add_value,
      sum((nvl(c_sf.payment_value0,0)+nvl(c_sf.payment_value1,0)+nvl(c_sf.payment_value2,0)))*0.01 as card_sale_fee_value
      ,(
      sum((nvl(c_d.payment_value0,0)+nvl(c_d.payment_value1,0)+nvl(c_d.payment_value2,0))*0.01)
      +sum((nvl(c_f.payment_value0,0)+nvl(c_f.payment_value1,0)+nvl(c_f.payment_value2,0))*0.01)
      +sum((nvl(fav_i.payment_value0,0)+nvl(fav_i.payment_value1,0)+nvl(fav_i.payment_value2,0))*0.01)
      +sum((nvl(c_sf.payment_value0,0)+nvl(c_sf.payment_value1,0)+nvl(c_sf.payment_value2,0)))*0.01
      ) as sum_sale_value
      from
      (select card_serial_number,card_issuer_id, card_type, card_life_cycle_count,service_participant_id,source_participant_id
              from cut_ci_maintenance
              where ud_type=1 and ud_subtype=3  --Card Issue
              and cch_txn_approved='Y'
              and settlement_date between TRUNC(vstdt) and TRUNC(vendt)
              and (sp_id IS NULL OR  service_participant_id = sp_id)
          ) c_i 
          
          left join
          
          (select card_issuer_id, card_serial_number, card_life_cycle_count, card_type, application_passenger_type as passenger_type, 
          sum(payment_value0) as payment_value0, sum(payment_value1) as payment_value1, sum(payment_value2) as payment_value2
              from cut_pi_financial
              where ud_type=3 and ud_subtype=1  --Purse Issue
              and cch_txn_approved='Y'
              and settlement_date between TRUNC(vstdt) and TRUNC(vendt)
              and (sp_id IS NULL OR  service_participant_id = sp_id)
              group by card_issuer_id, card_serial_number, card_life_cycle_count, card_type, application_passenger_type
          ) p_i
          on c_i.card_serial_number = p_i.card_serial_number 
          and c_i.card_issuer_id = p_i.card_issuer_id 
          and c_i.card_life_cycle_count = p_i.card_life_cycle_count 
          and c_i.card_type = p_i.card_type 
          
          left join
          
          (select card_issuer_id, card_serial_number, card_life_cycle_count, card_type, 
          sum(payment_value0) as payment_value0, sum(payment_value1) as payment_value1, sum(payment_value2) as payment_value2
              from CUT_CI_FINANCIAL
              where ud_type=1 and ud_subtype=9  --Card Deposit
              and cch_txn_approved='Y'
              and settlement_date between TRUNC(vstdt) and TRUNC(vendt)
              and (sp_id IS NULL OR  service_participant_id = sp_id)
              group by card_issuer_id, card_serial_number, card_life_cycle_count, card_type
          ) c_d
          on c_i.card_serial_number = c_d.card_serial_number 
          and c_i.card_issuer_id = c_d.card_issuer_id 
          and c_i.card_life_cycle_count = c_d.card_life_cycle_count 
          and c_i.card_type = c_d.card_type 
          
          left join
          
          (select card_issuer_id, card_serial_number, card_life_cycle_count, card_type, --payment_value0, payment_value1, payment_value2
          sum(payment_value0) as payment_value0, sum(payment_value1) as payment_value1, sum(payment_value2) as payment_value2
              from CUT.CUT_CI_FINANCIAL
              where ud_type=1 and ud_subtype=22  --Card Fee
              and cch_txn_approved='Y'
              and settlement_date between TRUNC(vstdt) and TRUNC(vendt)
              and (sp_id IS NULL OR  service_participant_id = sp_id)
              group by card_issuer_id, card_serial_number, card_life_cycle_count, card_type
          ) c_f
          on c_i.card_serial_number = c_f.card_serial_number 
          and c_i.card_issuer_id = c_f.card_issuer_id 
          and c_i.card_life_cycle_count = c_f.card_life_cycle_count 
          and c_i.card_type = c_f.card_type 
          
          left join
          
          (select card_issuer_id, card_serial_number, card_life_cycle_count, card_type, --payment_value0, payment_value1, payment_value2
          sum(payment_value0) as payment_value0, sum(payment_value1) as payment_value1, sum(payment_value2) as payment_value2
              from cut_pi_financial pf
              where pf.ud_type = 3 and pf.ud_subtype = 10 --Purse Add (First Add Value)
              and pf.settlement_date between TRUNC(vstdt) and TRUNC(vendt)
              and (sp_id IS NULL OR  pf.service_participant_id = sp_id)
              and pf.cch_txn_approved = 'Y' 
              and (pf.card_serial_number, pf.ptsn) in 
                (select pp.card_serial_number, pp.ptsn+1 as ptsn
                from cut_pi_financial pp 
                where pp.settlement_date=pf.settlement_date
                and pp.ud_type=3 and pp.ud_subtype=1 and pp.device_id = pf.device_id 
                and pf.txn_date_time between pp.txn_date_time and pp.txn_date_time+3/86400
                and pp.cch_txn_approved = 'Y' 
                and pp.service_participant_id = pf.service_participant_id 
                )
              group by card_issuer_id, card_serial_number, card_life_cycle_count, card_type
          ) fav_i
          on c_i.card_serial_number = fav_i.card_serial_number 
          and c_i.card_issuer_id = fav_i.card_issuer_id 
          and c_i.card_life_cycle_count = fav_i.card_life_cycle_count 
          and c_i.card_type = fav_i.card_type 
          
          left join
          
          (select card_issuer_id, card_serial_number, card_life_cycle_count, card_type, --payment_value0, payment_value1, payment_value2
          sum(payment_value0) as payment_value0, sum(payment_value1) as payment_value1, sum(payment_value2) as payment_value2
              from cut_cardholder_fee
              where ud_type=4 and ud_subtype=50  --Card Sale Fee
              and cch_txn_approved='Y'
              and settlement_date between TRUNC(vstdt) and TRUNC(vendt)
              and (sp_id IS NULL OR  service_participant_id = sp_id)
              group by card_issuer_id, card_serial_number, card_life_cycle_count, card_type
          ) c_sf
          on c_i.card_serial_number = c_sf.card_serial_number 
          and c_i.card_issuer_id = c_sf.card_issuer_id 
          and c_i.card_life_cycle_count = c_sf.card_life_cycle_count 
          and c_i.card_type = c_sf.card_type 

    group by p_i.passenger_type, reports.bkk_int_fun.getpassengertype(p_i.passenger_type), 
    bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)
    ,service_participant_id
)  
group by BSS_CARD_TYPE,CUS_NAME
);
    
end MONTHLY_PS009_ACC;
 
PROCEDURE ps009_s009_cardsalesummary_new(
      vcursor			      OUT	t_cur,
      settle_date		    IN DATE,
      sp_id             IN NUMBER
   ) AS
   
   dtsettledt       DATE   := reports.bkk_int_dfv.getdefaultsettledate;
   vstdt            DATE;
   
    BEGIN
  
      IF settle_date IS NULL
        THEN
           vstdt := dtsettledt;
        ELSE
           vstdt := TRUNC (settle_date);
        END IF;
  
      OPEN vcursor FOR
      
      select c_i.settlement_date, 
       --to_char(c_i.reconciliation_date,'DD/MM/YYYY') AS recon_date, 
       c_i.reconciliation_date AS recon_date, 
       c_i.service_participant_id || '-' || reports.bkk_int_fun.getparticipantname(c_i.service_participant_id) as serv_name,
       c_i.source_participant_id  || '-' || reports.bkk_int_fun.getparticipantname(c_i.source_participant_id) as src_name,
      bss_reports.pkg_fun.getlocationnamefromdevtypeid(c_i.device_location_type, c_i.source_participant_id, c_i.device_location_code) as location_name,
      p_i.passenger_type, reports.bkk_int_fun.getpassengertype(p_i.passenger_type) as bss_card_type, 
      bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type) as product_sale_desc,
      --count(c_i.card_serial_number) as card_volume, 
      count(c_i.card_serial_number) as card_volume,
      sum((p_i.payment_value0+p_i.payment_value1+p_i.payment_value2)*0.01) as purse_issue_value, --p_i.card_serial_number as cardsn_pi,
      sum((nvl(c_d.payment_value0,0)+nvl(c_d.payment_value1,0)+nvl(c_d.payment_value2,0))*0.01) as card_deposit_value, --c_d.card_serial_number as cardsn_cd,
      sum((nvl(c_f.payment_value0,0)+nvl(c_f.payment_value1,0)+nvl(c_f.payment_value2,0))*0.01) as card_fee_value, --, --c_f.card_serial_number as cardsn_cf,
      sum((nvl(fav_i.payment_value0,0)+nvl(fav_i.payment_value1,0)+nvl(fav_i.payment_value2,0))*0.01) as first_add_value,
      sum((nvl(c_sf.payment_value0,0)+nvl(c_sf.payment_value1,0)+nvl(c_sf.payment_value2,0)))*0.01 as card_sale_fee_value
      ,(
      sum((nvl(c_d.payment_value0,0)+nvl(c_d.payment_value1,0)+nvl(c_d.payment_value2,0))*0.01)
      +sum((nvl(c_f.payment_value0,0)+nvl(c_f.payment_value1,0)+nvl(c_f.payment_value2,0))*0.01)
      +sum((nvl(fav_i.payment_value0,0)+nvl(fav_i.payment_value1,0)+nvl(fav_i.payment_value2,0))*0.01)
      +sum((nvl(c_sf.payment_value0,0)+nvl(c_sf.payment_value1,0)+nvl(c_sf.payment_value2,0)))*0.01
      ) as sum_sale_value
      from
          (select settlement_date, reconciliation_date, service_participant_id, source_participant_id, 
          device_location_type, device_location_code, device_id, 
          card_serial_number
          ,card_issuer_id, card_type, card_life_cycle_count
              from rp_txn
              where ud_type=1 and ud_subtype=3  --Card Issue
              and cch_txn_approved='Y'
              and settlement_date=vstdt
              and (sp_id IS NULL OR  service_participant_id = sp_id)
          ) c_i 
          
          left join
          
          (select card_issuer_id, card_serial_number, card_life_cycle_count, card_type, passenger_type, 
          sum(payment_value0) as payment_value0, sum(payment_value1) as payment_value1, sum(payment_value2) as payment_value2
              from rp_txn
              where ud_type=3 and ud_subtype=1  --Purse Issue
              and cch_txn_approved='Y'
              and settlement_date=vstdt
              and (sp_id IS NULL OR  service_participant_id = sp_id)
              group by card_issuer_id, card_serial_number, card_life_cycle_count, card_type, passenger_type
          ) p_i
          on c_i.card_serial_number = p_i.card_serial_number 
          and c_i.card_issuer_id = p_i.card_issuer_id 
          and c_i.card_life_cycle_count = p_i.card_life_cycle_count 
          and c_i.card_type = p_i.card_type 
          
          left join
          
          (select card_issuer_id, card_serial_number, card_life_cycle_count, card_type, 
          sum(payment_value0) as payment_value0, sum(payment_value1) as payment_value1, sum(payment_value2) as payment_value2
              from rp_txn
              where ud_type=1 and ud_subtype=9  --Card Deposit
              and cch_txn_approved='Y'
              and settlement_date=vstdt
              and (sp_id IS NULL OR  service_participant_id = sp_id)
              group by card_issuer_id, card_serial_number, card_life_cycle_count, card_type
          ) c_d
          on c_i.card_serial_number = c_d.card_serial_number 
          and c_i.card_issuer_id = c_d.card_issuer_id 
          and c_i.card_life_cycle_count = c_d.card_life_cycle_count 
          and c_i.card_type = c_d.card_type 
          
          left join
          
          (select card_issuer_id, card_serial_number, card_life_cycle_count, card_type, --payment_value0, payment_value1, payment_value2
          sum(payment_value0) as payment_value0, sum(payment_value1) as payment_value1, sum(payment_value2) as payment_value2
              from rp_txn
              where ud_type=1 and ud_subtype=22  --Card Fee
              and cch_txn_approved='Y'
              and settlement_date=vstdt
              and (sp_id IS NULL OR  service_participant_id = sp_id)
              group by card_issuer_id, card_serial_number, card_life_cycle_count, card_type
          ) c_f
          on c_i.card_serial_number = c_f.card_serial_number 
          and c_i.card_issuer_id = c_f.card_issuer_id 
          and c_i.card_life_cycle_count = c_f.card_life_cycle_count 
          and c_i.card_type = c_f.card_type 
          
          left join
          
          (select card_issuer_id, card_serial_number, card_life_cycle_count, card_type, --payment_value0, payment_value1, payment_value2
          sum(payment_value0) as payment_value0, sum(payment_value1) as payment_value1, sum(payment_value2) as payment_value2
              from rp_txn pf
              where pf.ud_type = 3 and pf.ud_subtype = 10 --Purse Add (First Add Value)
              and pf.settlement_date =vstdt
              and (sp_id IS NULL OR  pf.service_participant_id = sp_id)
              and pf.cch_txn_approved = 'Y' 
              and (pf.card_serial_number, pf.ptsn) in 
                (select pp.card_serial_number, pp.ptsn+1 as ptsn
                from rp_txn pp 
                where pp.settlement_date=pf.settlement_date
                and pp.ud_type=3 and pp.ud_subtype=1 and pp.device_id = pf.device_id 
                and pf.txn_date_time between pp.txn_date_time and pp.txn_date_time+3/86400
                and pp.cch_txn_approved = 'Y' 
                and pp.service_participant_id = pf.service_participant_id 
                )
              group by card_issuer_id, card_serial_number, card_life_cycle_count, card_type
          ) fav_i
          on c_i.card_serial_number = fav_i.card_serial_number 
          and c_i.card_issuer_id = fav_i.card_issuer_id 
          and c_i.card_life_cycle_count = fav_i.card_life_cycle_count 
          and c_i.card_type = fav_i.card_type 
          
          left join
          
          (select card_issuer_id, card_serial_number, card_life_cycle_count, card_type, --payment_value0, payment_value1, payment_value2
          sum(payment_value0) as payment_value0, sum(payment_value1) as payment_value1, sum(payment_value2) as payment_value2
              from rp_txn
              where ud_type=4 and ud_subtype=50  --Card Sale Fee
              and cch_txn_approved='Y'
              and settlement_date=vstdt
              and (sp_id IS NULL OR  service_participant_id = sp_id)
              group by card_issuer_id, card_serial_number, card_life_cycle_count, card_type
          ) c_sf
          on c_i.card_serial_number = c_sf.card_serial_number 
          and c_i.card_issuer_id = c_sf.card_issuer_id 
          and c_i.card_life_cycle_count = c_sf.card_life_cycle_count 
          and c_i.card_type = c_sf.card_type 

    group by c_i.settlement_date, c_i.reconciliation_date, 
    c_i.service_participant_id , reports.bkk_int_fun.getparticipantname(c_i.service_participant_id),
    c_i.source_participant_id , reports.bkk_int_fun.getparticipantname(c_i.source_participant_id) ,
    bss_reports.pkg_fun.getlocationnamefromdevtypeid(c_i.device_location_type, c_i.source_participant_id, c_i.device_location_code),
    p_i.passenger_type, reports.bkk_int_fun.getpassengertype(p_i.passenger_type), 
    bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)
    ;
    
    --query from cut--
  /*   select c_i.settlement_date, 
       --to_char(c_i.reconciliation_date,'DD/MM/YYYY') AS recon_date, 
       c_i.reconciliation_date AS recon_date, 
       c_i.service_participant_id || '-' || reports.bkk_int_fun.getparticipantname(c_i.service_participant_id) as serv_name,
       c_i.source_participant_id  || '-' || reports.bkk_int_fun.getparticipantname(c_i.source_participant_id) as src_name,
       BSS.CDA.getLocationDesc(c_i.source_participant_id,to_number(SUBSTR(TO_CHAR(c_i.device_location,'XXXXXXXX'),-6,6),'XXXXXXXX'),NULL)as location_name,
      --bss_reports.pkg_fun.getlocationnamefromdevtypeid(c_i.device_location_type, c_i.source_participant_id, c_i.device_location_code) as location_name,
      p_i.passenger_type, reports.bkk_int_fun.getpassengertype(p_i.passenger_type) as bss_card_type, 
      bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type) as product_sale_desc,
      --count(c_i.card_serial_number) as card_volume, 
      count(c_i.card_serial_number) as card_volume,
      sum((p_i.payment_value0+p_i.payment_value1+p_i.payment_value2)*0.01) as purse_issue_value, --p_i.card_serial_number as cardsn_pi,
      sum((nvl(c_d.payment_value0,0)+nvl(c_d.payment_value1,0)+nvl(c_d.payment_value2,0))*0.01) as card_deposit_value, --c_d.card_serial_number as cardsn_cd,
      sum((nvl(c_f.payment_value0,0)+nvl(c_f.payment_value1,0)+nvl(c_f.payment_value2,0))*0.01) as card_fee_value, --, --c_f.card_serial_number as cardsn_cf,
      sum((nvl(fav_i.payment_value0,0)+nvl(fav_i.payment_value1,0)+nvl(fav_i.payment_value2,0))*0.01) as first_add_value,
      sum((nvl(c_sf.payment_value0,0)+nvl(c_sf.payment_value1,0)+nvl(c_sf.payment_value2,0)))*0.01 as card_sale_fee_value
      ,(
      sum((nvl(c_d.payment_value0,0)+nvl(c_d.payment_value1,0)+nvl(c_d.payment_value2,0))*0.01)
      +sum((nvl(c_f.payment_value0,0)+nvl(c_f.payment_value1,0)+nvl(c_f.payment_value2,0))*0.01)
      +sum((nvl(fav_i.payment_value0,0)+nvl(fav_i.payment_value1,0)+nvl(fav_i.payment_value2,0))*0.01)
      +sum((nvl(c_sf.payment_value0,0)+nvl(c_sf.payment_value1,0)+nvl(c_sf.payment_value2,0)))*0.01
      ) as sum_sale_value
      from
          (select settlement_date, reconciliation_date, service_participant_id, source_participant_id, 
         null as device_location_type,to_number(SUBSTR(TO_CHAR(device_location,'XXXXXXXX'),-6,6),'XXXXXXXX') as device_location_code, device_id, 
          card_serial_number
          ,card_issuer_id, card_type, card_life_cycle_count,device_location
              from cut_ci_maintenance
              where ud_type=1 and ud_subtype=3  --Card Issue
              and cch_txn_approved='Y'
              and settlement_date=vstdt--'19-MAY-2017'
              and (sp_id IS NULL OR  service_participant_id = sp_id)
          ) c_i 
          
          left join
          
          (select card_issuer_id, card_serial_number, card_life_cycle_count, card_type, application_passenger_type as passenger_type, 
          sum(payment_value0) as payment_value0, sum(payment_value1) as payment_value1, sum(payment_value2) as payment_value2
              from cut_pi_financial
              where ud_type=3 and ud_subtype=1  --Purse Issue
              and cch_txn_approved='Y'
              and settlement_date=vstdt--'19-MAY-2017'
              and (sp_id IS NULL OR  service_participant_id = sp_id)
              group by card_issuer_id, card_serial_number, card_life_cycle_count, card_type, application_passenger_type
          ) p_i
          on c_i.card_serial_number = p_i.card_serial_number 
          and c_i.card_issuer_id = p_i.card_issuer_id 
          and c_i.card_life_cycle_count = p_i.card_life_cycle_count 
          and c_i.card_type = p_i.card_type 
          
          left join
          
          (select card_issuer_id, card_serial_number, card_life_cycle_count, card_type, 
          sum(payment_value0) as payment_value0, sum(payment_value1) as payment_value1, sum(payment_value2) as payment_value2
              from CUT_CI_FINANCIAL
              where ud_type=1 and ud_subtype=9  --Card Deposit
              and cch_txn_approved='Y'
              and settlement_date=vstdt--'19-MAY-2017'
              and (sp_id IS NULL OR  service_participant_id = sp_id)
              group by card_issuer_id, card_serial_number, card_life_cycle_count, card_type
          ) c_d
          on c_i.card_serial_number = c_d.card_serial_number 
          and c_i.card_issuer_id = c_d.card_issuer_id 
          and c_i.card_life_cycle_count = c_d.card_life_cycle_count 
          and c_i.card_type = c_d.card_type 
          
          left join
          
          (select card_issuer_id, card_serial_number, card_life_cycle_count, card_type, --payment_value0, payment_value1, payment_value2
          sum(payment_value0) as payment_value0, sum(payment_value1) as payment_value1, sum(payment_value2) as payment_value2
              from CUT.CUT_CI_FINANCIAL
              where ud_type=1 and ud_subtype=22  --Card Fee
              and cch_txn_approved='Y'
              and settlement_date=vstdt--'19-MAY-2017'
              and (sp_id IS NULL OR  service_participant_id = sp_id)
              group by card_issuer_id, card_serial_number, card_life_cycle_count, card_type
          ) c_f
          on c_i.card_serial_number = c_f.card_serial_number 
          and c_i.card_issuer_id = c_f.card_issuer_id 
          and c_i.card_life_cycle_count = c_f.card_life_cycle_count 
          and c_i.card_type = c_f.card_type 
          
          left join
          
          (select card_issuer_id, card_serial_number, card_life_cycle_count, card_type, --payment_value0, payment_value1, payment_value2
          sum(payment_value0) as payment_value0, sum(payment_value1) as payment_value1, sum(payment_value2) as payment_value2
              from cut_pi_financial pf
              where pf.ud_type = 3 and pf.ud_subtype = 10 --Purse Add (First Add Value)
              and pf.settlement_date =vstdt--'19-MAY-2017'
              and (sp_id IS NULL OR  pf.service_participant_id = sp_id)
              and pf.cch_txn_approved = 'Y' 
              and (pf.card_serial_number, pf.ptsn) in 
                (select pp.card_serial_number, pp.ptsn+1 as ptsn
                from cut_pi_financial pp 
                where pp.settlement_date=pf.settlement_date
                and pp.ud_type=3 and pp.ud_subtype=1 and pp.device_id = pf.device_id 
                and pf.txn_date_time between pp.txn_date_time and pp.txn_date_time+3/86400
                and pp.cch_txn_approved = 'Y' 
                and pp.service_participant_id = pf.service_participant_id 
                )
              group by card_issuer_id, card_serial_number, card_life_cycle_count, card_type
          ) fav_i
          on c_i.card_serial_number = fav_i.card_serial_number 
          and c_i.card_issuer_id = fav_i.card_issuer_id 
          and c_i.card_life_cycle_count = fav_i.card_life_cycle_count 
          and c_i.card_type = fav_i.card_type 
          
          left join
          
          (select card_issuer_id, card_serial_number, card_life_cycle_count, card_type, --payment_value0, payment_value1, payment_value2
          sum(payment_value0) as payment_value0, sum(payment_value1) as payment_value1, sum(payment_value2) as payment_value2
              from cut_cardholder_fee
              where ud_type=4 and ud_subtype=50  --Card Sale Fee
              and cch_txn_approved='Y'
              and settlement_date=vstdt-- '19-MAY-2017'
              and (sp_id IS NULL OR  service_participant_id = sp_id)
              group by card_issuer_id, card_serial_number, card_life_cycle_count, card_type
          ) c_sf
          on c_i.card_serial_number = c_sf.card_serial_number 
          and c_i.card_issuer_id = c_sf.card_issuer_id 
          and c_i.card_life_cycle_count = c_sf.card_life_cycle_count 
          and c_i.card_type = c_sf.card_type 

    group by c_i.settlement_date, c_i.reconciliation_date, 
    c_i.service_participant_id , reports.bkk_int_fun.getparticipantname(c_i.service_participant_id),
    c_i.source_participant_id , reports.bkk_int_fun.getparticipantname(c_i.source_participant_id) ,
    BSS.CDA.getLocationDesc(c_i.source_participant_id,to_number(SUBSTR(TO_CHAR(c_i.device_location,'XXXXXXXX'),-6,6),'XXXXXXXX'),NULL),
   -- bss_reports.pkg_fun.getlocationnamefromdevtypeid(c_i.device_location_type, c_i.source_participant_id, c_i.device_location_code),
    p_i.passenger_type, reports.bkk_int_fun.getpassengertype(p_i.passenger_type), 
    bss_reports.pkg_fun.getproductsaledesc(c_i.card_serial_number, c_i.card_issuer_id, c_i.card_life_cycle_count, c_i.card_type)
    ;
   */
   END ps009_s009_cardsalesummary_new;
   
PROCEDURE z203_retailexceptiontxn_new (
                                     v_cursor OUT t_cur,
                                     start_date IN DATE,
                                     end_date IN DATE
                                     )
  AS
  vstartdate DATE;
  venddate DATE;
  BEGIN
    IF start_date IS NOT NULL
    THEN
      vstartdate := TRUNC (start_date);
    ELSE
      vstartdate := reports.bkk_int_dfv.getdefaultsettledate;
    END IF;

    IF end_date IS NOT NULL
    THEN
      venddate := TRUNC (end_date);
    ELSE
      venddate := reports.bkk_int_dfv.getdefaultsettledate;
    END IF;

    OPEN v_cursor FOR
    
    SELECT /*NAME:z203_retailexceptiontxn_new*/
    rte.eft_terminal_id,
    rte.settlement_date,
    reports.bkk_int_fun.getparticipantname (rte.service_participant_id) AS spgid,
    reports.bkk_int_fun.getparticipantname (rte.source_participant_id) AS spid,
    --TO_CHAR (rte.device_id, 'XXXXXXX') device_id,
    trim(TO_CHAR (rte.device_id, 'XXXXXXXX')) device_id,
    rte.equipment_number,
    reports.bkk_int_fun.getexceptiontypelongdesc (SUBSTR (rte.exception_list, 1, 3)) AS exception_category,
    CASE
      WHEN rte.cch_txn_approved = 'Y'
      THEN 'GFS'
      WHEN rte.cch_txn_approved = 'N'
      THEN 'NGFS'
    ELSE NULL
    END AS gfsngfs,
    rte.card_serial_number AS split_card_serial_number, 
    rte.udsn,
    rte.exception_list, rte.business_date,
    reports.bkk_int_fun.gettransactiondesc
    (rte.ud_type,
     rte.ud_subtype
     ) AS txn_desc,
    NVL ((rte.transaction_value * 0.01), 0) AS transaction_value
    FROM cut_pi_financial rte
          --, systemcd.v_part_and_role1 vpar
    WHERE rte.settlement_date BETWEEN vstartdate AND venddate
    AND rte.service_participant_id = 11
    AND cch_exception = 'Y'
    AND iss_txn_reflection = 'N';
    
  END z203_retailexceptiontxn_new;

procedure summary_device_usage (
                                     v_cursor out t_cur/*,
                                     device_type  in varchar2*/
                                    -- end_date IN DATE
                                     )
  as
 -- v_device_type varchar2(20);
 -- venddate DATE;
  begin
   /* if device_type is not null
    THEN
      v_device_type := trim(device_type);
    else
      v_device_type := null;
    END IF;*/

    OPEN v_cursor FOR
    
      select participant_id,
      SUBSTR(participant_name,0,22) as participant_name,
      location_id,
      SUBSTR(location_name,0,40) AS location_name,
      device_id,
      device_type,
      equipment_no,
      last_used_time,
      csc_reader_1,
      application_major,
      application_minor,
      count_txn,
      sum_value
    FROM bss_anchisai.usage_by_device_type;

    
  end summary_device_usage;

PROCEDURE support_b001_blocked_card (
                                     v_cursor OUT t_cur,
                                     start_date IN DATE,
                                     end_date IN DATE
                                     )
  AS
  vstartdate DATE;
  venddate DATE;
  BEGIN
    IF start_date IS NOT NULL
    THEN
      vstartdate := TRUNC (start_date);
    ELSE
      vstartdate := reports.bkk_int_dfv.getdefaultsettledate;
    END IF;

    IF end_date IS NOT NULL
    THEN
      venddate := TRUNC (end_date);
    ELSE
      venddate := reports.bkk_int_dfv.getdefaultsettledate;
    END IF;

    OPEN v_cursor FOR
    
    select  rcca.card_serial_number,service_participant_id AS participiant_id,
                  reports.rp_std.getparticipantlongname
                                  (service_participant_id)
                                                          as participant_name,
                --  bss_reports.pkg_fun.getlocationnamefromdevid(source_participant_id,device_id) AS location_desc,
                  BSS.CDA.getLocationDesc(source_participant_id,to_number(SUBSTR(TO_CHAR(device_location,'XXXXXXXX'),-6,6),'XXXXXXXX'),NULL) as location_desc,
                 /* reports.bkk_int_fun.getlocationdesc
                                  (FLOOR (device_location / 16777216),
                                   BITAND (device_location, 16777215),
                                   service_participant_id,
                                   data_version,
                                   'en'
                                  ) AS location_desc,*/
                  reports.bkk_int_fun.getpassengertype(aa.passenger_type)AS card_type,
                  rcca.device_id,
                  rp_std.tolocaltime (rcca.txn_date_time) AS txn_date_time,settlement_date,reconciliation_date,
                  REPORTS.BKK_INT_FUN.GETTRANSACTIONDESC (UD_TYPE,UD_SUBTYPE) AS TXN_TYPE,rcca.block_flag,
                  case
                  when ud_type = 1 and ud_subtype = 7 and rcca.block_flag = 0 then 'NO BLOCK'
                  when ud_type = 1 and ud_subtype = 6 and rcca.block_flag = 1 then 'BLOCK ALL'
                  when ud_type = 1 and ud_subtype = 6 and rcca.block_flag = 2 then 'BLOCK TOPUP'
                  when ud_type = 1 and ud_subtype = 6 and rcca.block_flag = 3 then 'BLOCK AUTO TOPUP'
                  when ud_type = 1 and ud_subtype = 7 and rcca.block_flag = 5 then 'UNBLOCK AUTO TOPUP'
                  when ud_type = 1 and ud_subtype = 7 and rcca.block_flag = 1 then 'UNBLOCK ALL'
                  end as block_flag_desc, rcca.reason_code,
                  rcca.reason_code || '  ' ||reports.bkk_int_fun.getactionlistreason
                                                 (rcca.reason_code,
                                                  1,
                                                  'en'
                                                 ) AS reason
       FROM cut_ci_blocking rcca, application.application_account aa
               WHERE rcca.cch_txn_approved = 'Y'
                    AND rcca.iss_txn_reflection = 'N'
                    AND rcca.card_serial_number = aa.csc_serial_number
                    AND rcca.card_type = aa.csc_type
                    AND rcca.settlement_date between vstartdate and venddate
                    AND rcca.card_issuer_id = aa.csc_issuer_id
                    AND rcca.card_life_cycle_count = aa.csc_lifecycle_count
               ORDER BY rcca.card_serial_number;
    
  END support_b001_blocked_card;
  
procedure GEN_ATU_TXN_FILE_FOR_DA

    AS 

    BEGIN
          
        DECLARE
            fHandle UTL_FILE.FILE_TYPE;
            v_date VARCHAR2(11);
          TYPE GenCurTyp
          IS
            REF
            CURSOR;
              detail GenCurTyp;
              v_log                VARCHAR2(250);
              v_header_rec         VARCHAR2(250);
              v_trailer_rec        VARCHAR2(250);
              v_record_type        VARCHAR2(1);
              v_txn_date_time      VARCHAR2(25);
              v_card_serial_number VARCHAR2(25);
              v_txn_value          VARCHAR2(25);
              v_src_participant_id VARCHAR2(50);
            BEGIN
              ----get settlement_date ----
              /*  select to_char(max(settlement_date-1),'dd-MON-yyyy')
              into v_date
              from streaming_session_history;*/
              SELECT TO_CHAR(sysdate-1,'dd-MON-yyyy')
              INTO v_date
              FROM dual;
            ---------------------------
            fHandle :=utl_file.fopen('DA_REPORT','BSS_ATU_DATA_'|| TO_CHAR(sysdate, 'YYYYMMDD') || '.DAT','w');--Opening a file
            -------------- HEADER ----------------
            SELECT 'RABBIT_CARD|ACTIVATION_DATE|REGISTRATION_SOURCE|TOP_UP_AMOUNT' AS header
            INTO v_header_rec
            FROM dual ;
            --------------END HEADER ----------------
            --------------WRITE HEADER---------------
            v_log := v_header_rec ||CHR(13);
            UTL_FILE.PUT_LINE(fHandle, v_log);
            -----------------------------------------
            OPEN detail FOR 
             SELECT '088'
                ||lpad(csc_serial_number,9,'0')
                ||BSS_REPORTS.PKG_BSS_REPORT_ATU.CheckLastDigit('088'
                ||lpad(csc_serial_number,9,'0'))                                    AS bss_card_no,
                TO_CHAR(RP_STD.TOLOCALTIME(activated_time),'YYYY/MM/DD HH24:MI:SS') AS txn_date_time,
                reports.bkk_int_fun.getparticipantlongname(agent_id)                AS src_participant_id,
                top_up_amount*0.01                                                  AS purse_autoload_amount
              FROM PRODUCT.PRODUCT_AUTOLOAD_FACILITY
              WHERE agent_id IS NOT NULL
              AND state       = 8 --8-Activated
              ORDER BY txn_date_time;
            LOOP
              FETCH detail
              INTO v_card_serial_number,
                v_txn_date_time,
                v_src_participant_id,
                v_txn_value;
              EXIT
            WHEN detail%NOTFOUND;
              v_log := v_card_serial_number || '|' || v_txn_date_time || '|' || v_src_participant_id || '|' || v_txn_value || CHR(13) ;
              UTL_FILE.PUT_LINE(fHandle, v_log);
              UTL_FILE.FFLUSH(fHandle);
            END LOOP;
            CLOSE detail;
            --------------WRITE Trailer---------------
            --v_log := v_trailer_rec;
            --UTL_FILE.PUT_LINE(fHandle, v_log);
            -----------------------------------------
            UTL_FILE.FCLOSE(fHandle);
          END;
    
end GEN_ATU_TXN_FILE_FOR_DA;

PROCEDURE mc_thai_txn_wt_carrot_mem

    AS 

    BEGIN
          
        DECLARE
            fhandle utl_file.file_type;
            v_date VARCHAR2(11);
          TYPE gencurtyp
          IS
            REF
            CURSOR;
              detail gencurtyp;
              v_log                VARCHAR2(1000);
              v_header_rec         VARCHAR2(450);
              v_card_serial_number NUMBER;
              v_carrot_member      VARCHAR2(2);
              v_bss_txn_type       VARCHAR2(25);
              v_exception_list     VARCHAR2(50);
              v_transaction_value  NUMBER; 
              v_purse_remaining_value NUMBER;
              v_card_sequence_number  NUMBER;
              v_ptsn                  NUMBER;
              v_loc_txn_date_time     DATE;
              v_reconciliation_date   DATE;
              v_settlement_date       DATE;
              v_lav_date_time         DATE;
              v_lav_participant_id    NUMBER;
              v_lav_sam_id            NUMBER;
              v_lav_ptsn              NUMBER;
              v_lav_txn_value         NUMBER;
              v_udsn                  NUMBER;
              v_good_for_settlement   VARCHAR2(10);
              v_original_txn_type     NUMBER;
              v_location_id_trf       NUMBER;
              v_location_name         VARCHAR2(250);
              v_payment_method0       NUMBER;
              v_payment_value0        NUMBER;
              v_equipment_no          VARCHAR2(50);
              v_device_id             NUMBER;
              v_settlement_status     VARCHAR2(10);
              v_src                   NUMBER;
              v_serv                  NUMBER;
              v_dest                  NUMBER;
              v_device_location       NUMBER;
              v_original_file_name    VARCHAR2(500);

            BEGIN
              ----get settlement_date ----
              SELECT to_char(SYSDATE-1,'dd-MON-yyyy')
              INTO v_date
              FROM dual;
            ---------------------------
            fhandle :=utl_file.fopen('EX_BE','McThai_Daily_Transaction_with_carrot_member_status_s.'|| to_char(SYSDATE-1, 'YYYYMMDD') || '.csv','w');--Opening a file
            -------------- HEADER ----------------
            SELECT 'CARD_SERIAL_NUMBER,CARROT_MEMBER,BSS_TXN_TYPE,EXCEPTION_LIST,TRANSACTION_VALUE,PURSE_REMAINING_VALUE,CARD_SEQUENCE_NUMBER,PTSN,LOC_TXN_DATE_TIME,RECONCILIATION_DATE,SETTLEMENT_DATE,LAV_DATE_TIME,LAV_PARTICIPANT_ID,LAV_SAM_ID,LAV_PTSN,LAV_TXN_VALUE,UDSN,GOOD_FOR_SETTLEMENT,ORIGINAL_TXN_TYPE,LOCATION_ID_TRF,LOCATION_NAME,PAYMENT_METHOD0,PAYMENT_VALUE0,EQUIPMENT_NO,DEVICE_ID,SETTLEMENT_STATUS,SRC,SERV,DEST,DEVICE_LOCATION,ORIGINAL_FILE_NAME' AS HEADER
            INTO v_header_rec
            FROM dual ;
            --------------END HEADER ----------------
            --------------WRITE HEADER---------------
            v_log := v_header_rec ||chr(13);
            utl_file.put_line(fhandle, v_log);
            -----------------------------------------
            OPEN detail FOR 
             
             SELECT 
              '88' || lpad(cut_all.card_serial_number,9,'0') AS card_serial_number,m.is_active AS carrot_member,
              cut_all.txn_type AS bss_txn_type,
              exception_list,
              transaction_value*0.01 AS transaction_value,
              purse_remaining_value*0.01 AS purse_remaining_value,
              card_sequence_number,
              ptsn,
              to_date(rp_std.tolocaltime(txn_date_time),'DD-MON-YY HH24:MI:SS') AS loc_txn_date_time,
              to_date(reconciliation_date,'DD-MON-YY HH24:MI:SS') AS reconciliation_date,
              to_date(settlement_date,'DD-MON-YY HH24:MI:SS') AS settlement_date, 
              rp_std.tolocaltime(lav_date_time) AS lav_date_time,
              lav_participant_id, lav_sam_id, lav_ptsn, lav_txn_value,
              udsn,
              CASE WHEN cch_txn_approved = 'Y' THEN 'GFS' ELSE 'NGFS' END AS good_for_settlement,
              original_txn_type,
              location_id_trf,
              l.location_name,
              payment_method0,payment_value0,
              device_status.equipment_no,
              cut_all.device_id,
              CASE WHEN reconciliation_date < settlement_date THEN 'Late TXN' ELSE 'Normal TXN' END AS settlement_status,
              source_participant_id AS src,
              service_participant_id AS serv,
              destination_participant_id AS dest,
              device_location,
              original_file_name
              FROM
              (
              SELECT card_issuer_id,eft_terminal_id,eft_trace_number ,streaming_session_id,product_issuer_id,product_type,cch_txn_not_to_issuer,NULL AS block_flag,host_name,lower_ptsn,upper_ptsn,NULL AS remaining_rides,card_serial_number,transaction_value,purse_remaining_value,reports.bkk_int_fun.gettransactiondesc (ud_type,ud_subtype) AS txn_type,A.exception_list, A.ud_type,A.ud_subtype,A.txn_date_time,reconciliation_date,lav_date_time,A.card_sequence_number,ptsn,'CUT_PI_FINANCIAL' AS table_name,source_participant_id,service_participant_id,destination_participant_id,device_id,udsn,device_location,to_number(substr(to_char(device_location,'XXXXXXXX'),-6,6),'XXXXXXXX') AS location_id_trf, data_version,original_file_name,original_txn_type,settlement_date,iss_txn_reflection,cch_txn_approved
              ,payment_method0,payment_value0,payment_method1,payment_value1,payment_method2,payment_value2,payment_method3,payment_value3
              ,lav_participant_id, lav_sam_id, lav_ptsn, lav_txn_value, lav_remaining_value,  NULL AS lav_remaining_rides, lav_method_of_payment
              FROM cut_pi_financial A
              WHERE ud_type=3 AND ud_subtype IN (13,19)
              ) cut_all
              LEFT JOIN syscd_location l ON (to_number(substr(to_char(cut_all.device_location,'XXXXXXXX'),-6,6),'XXXXXXXX')=l.location_code) AND (cut_all.source_participant_id=l.participant_id) AND (cut_all.data_version=l.data_version) AND (l.location_type IN (9,15,16,21))  
              LEFT JOIN device_status ON cut_all.device_id=device_status.device_id AND cut_all.source_participant_id=device_status.participant_id
              LEFT JOIN systemcd.syscd_txn t ON (cut_all.data_version=t.data_version) AND (cut_all.ud_type=t.txn_type) AND  (cut_all.ud_subtype=t.txn_subtype)
              LEFT JOIN carrot.MEMBER m ON (cut_all.card_serial_number=m.card_serial_number) AND (cut_all.card_issuer_id=m.issuer_id)
              WHERE cut_all.iss_txn_reflection = 'N'
              AND source_participant_id = 42
              and(exception_list IS NULL OR exception_list NOT LIKE '%DDT%')
              AND settlement_date = v_date
              ;   
              
            loop
              fetch detail
              INTO v_card_serial_number,
              v_carrot_member,
              v_bss_txn_type,
              v_exception_list,
              v_transaction_value,
              v_purse_remaining_value,
              v_card_sequence_number,
              v_ptsn,
              v_loc_txn_date_time,
              v_reconciliation_date,
              v_settlement_date,
              v_lav_date_time,
              v_lav_participant_id,
              v_lav_sam_id,
              v_lav_ptsn,
              v_lav_txn_value,
              v_udsn,
              v_good_for_settlement,
              v_original_txn_type,
              v_location_id_trf,
              v_location_name,
              v_payment_method0,
              v_payment_value0,
              v_equipment_no,
              v_device_id,
              v_settlement_status,
              v_src,
              v_serv,
              v_dest,
              v_device_location,
              v_original_file_name;
              exit
            WHEN detail%notfound;
              v_log := v_card_serial_number || ',' || v_carrot_member || ',' || v_bss_txn_type || ',"' || v_exception_list || '",' || v_transaction_value || ',' || v_purse_remaining_value || ',' ||v_card_sequence_number || ',' || v_ptsn || ',' || v_loc_txn_date_time || ',' ||v_reconciliation_date || ',' ||v_settlement_date || ',' ||v_lav_date_time || ',' ||v_lav_participant_id || ',' || v_lav_sam_id || ',' ||v_lav_ptsn || ',' ||v_lav_txn_value || ',' ||v_udsn || ',' ||v_good_for_settlement || ',' || v_original_txn_type || ',' ||v_location_id_trf || ',' ||v_location_name || ',' ||v_payment_method0 || ',' || v_payment_value0 || ',' ||v_equipment_no || ',' ||v_device_id || ',' || v_settlement_status || ',' || v_src || ',' || v_serv || ',' || v_dest || ',' ||v_device_location || ',' || v_original_file_name || chr(13);
              utl_file.put_line(fhandle, v_log);
              utl_file.fflush(fhandle);
            END loop;
            CLOSE detail;

            utl_file.fclose(fhandle);
          END;
          
         --send mail--
      /*    DECLARE
          smtpservername VARCHAR2(200);
          sender VARCHAR2(200);
          recipient VARCHAR2(250);
          ccrecipient VARCHAR2(250);
          bccrecipient VARCHAR2(250);
          subject VARCHAR2(250);
          BODY VARCHAR2(250);
          errormessage VARCHAR2(250);
          attachments sendmailjpkg.attachments_list;
          v_return NUMBER;
          BEGIN
           
            dbms_java.grant_permission( 'BSS', 'SYS:java.io.FilePermission', '/export/home/ntusers/anchisai/EX_BE/McThai_Daily_Transaction_with_carrot_member_status_s.'|| to_char(SYSDATE-1, 'YYYYMMDD') || '.csv', 'read' );
            COMMIT;
            smtpservername := '127.0.0.1';
            sender := 'be@rabbit.co.th';
            recipient := 'pikulw@rabbit.co.th';
            ccrecipient := 'anchisai@rabbit.co.th';
            bccrecipient := NULL;
            subject := 'McThai Daily Transaction with carrot member status s.' || to_char(SYSDATE, 'YYYYMMDD') ;
            BODY := 'Dear Team,' || chr(13) || chr(13) ||
        
                        '    McThai Daily Transaction with carrot member status s.' || to_char(SYSDATE, 'YYYYMMDD') || ' as attached.' || chr(13) || chr(13) ||
        
                      'Best Regards,'|| chr(13) 
                      ;
            -- Modify the code to initialize the variable
            attachments := sendmailjpkg.attachments_list('/export/home/ntusers/anchisai/EX_BE/McThai_Daily_Transaction_with_carrot_member_status_s.'|| to_char(SYSDATE-1, 'YYYYMMDD') || '.csv');
            v_return := sendmailjpkg.sendmail(
              smtpservername => smtpservername,
              sender => sender,
              recipient => recipient,
              ccrecipient => ccrecipient,
              bccrecipient => bccrecipient,
              subject => subject,
              BODY => BODY,
              errormessage => errormessage,
              attachments => attachments
            );
            
          END; 
      */ 
END mc_thai_txn_wt_carrot_mem;

PROCEDURE new_p004_cardusagenquiry (
      vcursor            OUT      t_cur,
      participant_list   IN       VARCHAR2,
      location_list      IN       VARCHAR2,
      txn_typlst         IN       VARCHAR2,
      card_id            IN       VARCHAR2,
      start_date         IN       DATE,
      end_date           IN       DATE
   )
   AS
      vstartdate       DATE;
      venddate         DATE;
      vparticipantid   NUMBER;
      vlocationcode    NUMBER;
      vudtype          NUMBER;
      vudsubtype       NUMBER;
      vtxndesc         VARCHAR2 (151);
      vcardid          NUMBER;
      lang             VARCHAR2 (15)  := reports.bkk_int_dfv.lang1;
      v_max_lifecycle_count NUMBER;
      
   BEGIN
      IF card_id IS NOT NULL
      THEN
         IF card_id = 'ALL'                                  -- Test for ALL.
         THEN
            vcardid := NULL;
         ELSE
            vcardid := TO_NUMBER (card_id);
         END IF;
      ELSE
         vcardid := NULL;
      END IF;

      vparticipantid := reports.bkk_int_fun.getnumberbeforehypheninplist (participant_list);
      vlocationcode := reports.bkk_int_fun.getnumberbeforehypheninplist (location_list);
      vtxndesc := reports.bkk_int_fun.getstringaftertildeinplist (txn_typlst);

      IF start_date IS NOT NULL
      THEN
         vstartdate := TRUNC (start_date);
      ELSE
         vstartdate := reports.bkk_int_dfv.getdefaultsettledate;
      END IF;

      IF end_date IS NOT NULL
      THEN
         venddate := TRUNC (end_date);
      ELSE
         venddate := reports.bkk_int_dfv.getdefaultsettledate;
      END IF;
      
      select max(csc_lifecycle_count) into v_max_lifecycle_count 
      from card_account 
      where csc_serial_number = vcardid;

  OPEN vcursor FOR
    /* SELECT /*rp_sd_patronage.p004_cardusagenquiry*/
          /*  tx.source_participant_id AS participant_id,
            reports.rp_std.getparticipantname(tx.source_participant_id,tx.data_version) AS participant_name,
            tx.device_id AS device_id,
            reports.rp_std.tolocaltime (tx.txn_date_time) business_date,
            reports.bkk_int_fun.getlocationnamefromvlocation(tx.source_participant_id,tx.device_location, NULL) txn_location1,
            reports.rp_std.gettransactiondesc (tx.ud_type, tx.ud_subtype, tx.data_version) AS txn_desc,
            reports.bkk_int_fun.getpassengertype(aa.passenger_type, tx.data_version, Lang) AS passenger_type,
            TO_CHAR (tx.card_serial_number) AS csc_physical_id,
            tx.card_life_cycle_count AS csc_lifecycle, tx.ptsn AS ptsn,
            tx.udsn AS udsn,
            reports.rp_std.tolocaltime (tx.txn_date_time) AS txn_time,
            CASE WHEN  REPORTS.bkk_int_fun.getprodcategorycode(product_type,product_issuer_id,data_version)=3 THEN
-- Uncomment if the report requires that negative values are required for usage
-- Currently this is not the case for purse transactions
--                        CASE
--                            WHEN REPORTS.Rp_Sd_Std.IsUsageTxn (tx.ud_type, tx.ud_subtype) = 1 THEN
--                                -1 * num_rides  -- needs to know if this is an issue
--                            ELSE
                            num_rides
--                        END
                ELSE
                  CASE
                     WHEN tx.number_of_payments = 1
                        THEN (NVL (tx.payment_value0, 0)) * 0.01
                     WHEN tx.number_of_payments = 2
                        THEN   (  NVL (tx.payment_value0, 0)
                                + NVL (tx.payment_value1, 0)
                               )
                             * 0.01
                     WHEN tx.number_of_payments = 3
                        THEN   (  NVL (tx.payment_value0, 0)
                                + NVL (tx.payment_value1, 0)
                                + NVL (tx.payment_value2, 0)
                               )
                             * 0.01
                     WHEN tx.number_of_payments = 4
                        THEN   (  NVL (tx.payment_value0, 0)
                                + NVL (tx.payment_value1, 0)
                                + NVL (tx.payment_value2, 0)
                                + NVL (tx.payment_value3, 0)
                               )
                             * 0.01
                     ELSE 0
                  END
            END AS txn_value,
            case WHEN  REPORTS.bkk_int_fun.getprodcategorycode(product_type,product_issuer_id,data_version)=3 THEN
                    NVL (tx.remaining_rides, 0)
                ELSE
                    NVL (tx.purse_remaining_value, 0) * 0.01
            END AS remaining_value,
            REPORTS.bkk_int_fun.getprodcategorycode(product_type,product_issuer_id,data_version) AS prod_catid,
            value_per_ride,
             NVL (tx.value_per_ride * 0.01, 0)
              AS   avg_value_per_ride
       FROM REPORTS.RV_UD tx, application_account aa   -- Now using RV_UD instead of RP_TXN
      WHERE tx.card_issuer_id = aa.csc_issuer_id
        AND tx.card_life_cycle_count = aa.csc_lifecycle_count
        AND tx.card_serial_number = aa.csc_serial_number
        AND tx.card_type = aa.csc_type
        AND (REPORTS.rp_sd_std.iscsctxn (tx.ud_type, tx.ud_subtype) = 1)
        AND (tx.settlement_date BETWEEN vstartdate AND venddate)
        AND (vcardid IS NULL OR tx.card_serial_number = vcardid)
        AND (vparticipantid IS NULL OR tx.source_participant_id = vparticipantid)
        AND (vlocationcode IS NULL OR REPORTS.bkk_int_fun.getlocationcodefromdeviceid (tx.device_id) = vlocationcode)
        AND (vtxndesc IS NULL OR REPORTS.rp_std.gettransactiondesc (tx.ud_type, tx.ud_subtype) =vtxndesc)
        order by csc_physical_id asc, csc_lifecycle asc, ptsn asc;*/
        
        SELECT source_participant_id AS participant_id,
          reports.bkk_int_fun.getparticipantlongname(source_participant_id) AS participant_name,
          device_id AS device_id,
          reports.rp_std.tolocaltime (txn_date_time) business_date,
          (SELECT location_name
            FROM systemcd.syscd_location
            WHERE participant_id=source_participant_id
            AND id              =device_location_code
            AND location_type   =device_location_type
            AND data_version    =
              (SELECT MAX(data_version) FROM SYSTEMCD.syscd_version
              )
            ) AS txn_location1,
            REPORTS.BKK_INT_FUN.GETTRANSACTIONDESC (UD_TYPE,UD_SUBTYPE)    AS txn_desc,
            null AS passenger_type,
          TO_CHAR (card_serial_number) AS csc_physical_id,
          card_life_cycle_count AS csc_lifecycle, 
          ptsn AS ptsn,
          udsn AS udsn,
          reports.rp_std.tolocaltime (txn_date_time) AS txn_time,
          (NVL (payment_value0, 0)+ NVL (payment_value1, 0)+ NVL (payment_value2, 0))*0.01 AS txn_value,
          purse_remaining_value   *0.01 as remaining_value,
          REPORTS.bkk_int_fun.getprodcategorycode(reports.rp_txn.product_type,reports.rp_txn.product_issuer_id,reports.rp_txn.data_version) AS prod_catid,
          case 
            when product_category = 3 and ud_type = 3 AND ud_subtype =93 then 1--(NVL (payment_value0, 0)+ NVL (payment_value1, 0)+ NVL (payment_value2, 0))*0.01 
            when product_category = 3 and ud_type   = 3
                AND ud_subtype = 3
                THEN to_number(SUBSTR(p.description,INSTR(p.description,' '),3)) 
            else 0 end as value_per_ride,
           nvl( CASE
            when product_category = 3 and ud_type = 3 AND ud_subtype =93 then (NVL (payment_value0, 0)+ NVL (payment_value1, 0)+ NVL (payment_value2, 0))*0.01
                WHEN ud_type   = 3
                AND ud_subtype = 3
                THEN ((NVL (payment_value0, 0)+ NVL (payment_value1, 0)+ NVL (payment_value2, 0))*0.01)/trim(SUBSTR(p.description,INSTR(p.description,' '),3))
              END ,0)                                                              AS avg_value_per_ride
          /*case when product_category                 = 3 then (NVL (payment_value0, 0)+ NVL (payment_value1, 0)+ NVL (payment_value2, 0))*0.01 else 0 end as value_per_ride,
          nvl(CASE
              WHEN ud_type   = 3
              AND ud_subtype = 3
              THEN ((NVL (payment_value0, 0)+ NVL (payment_value1, 0)+ NVL (payment_value2, 0))*0.01)/trim(SUBSTR(p.description,INSTR(p.description,' '),3))
            END,0)                                                               AS avg_value_per_ride*/
          FROM reports.rp_txn
          LEFT JOIN v_product1 p
          ON (reports.rp_txn.product_type      =p.product_type)
          AND (reports.rp_txn.product_issuer_id=p.issuer_id)
          AND product_category                 = 3
          WHERE CARD_LIFE_CYCLE_COUNT          = v_max_lifecycle_count
          AND CARD_ISSUER_ID                   =88
          AND CARD_TYPE                        =6
          AND (settlement_date BETWEEN vstartdate AND venddate)
          AND (vcardid IS NULL OR card_serial_number = vcardid)
          AND (vparticipantid IS NULL OR source_participant_id = vparticipantid)
          AND (vlocationcode IS NULL OR REPORTS.bkk_int_fun.getlocationcodefromdeviceid (device_id) = vlocationcode)
          AND (vtxndesc IS NULL OR REPORTS.rp_std.gettransactiondesc (ud_type, ud_subtype) =vtxndesc)
          ORDER BY txn_date_time ;

    END new_p004_cardusagenquiry;

 PROCEDURE DAILY_CHECK_DEVICE_UDSN_SKIP
      AS 

    BEGIN
          
           DECLARE
        
          fhandle utl_file.file_type;
          v_date VARCHAR2(11);
          TYPE gencurtyp IS REF CURSOR;
              detail gencurtyp;
              v_log  VARCHAR2(1000);
              v_header_rec VARCHAR2(1000);
             
              v_settlement_date date;
              v_source_participant_id number;
              v_location varchar2(150);
              v_device_id number;
              v_udsn number;
              v_diff_udsn number;


            BEGIN
              ----get settlement_date ----
              SELECT to_char(SYSDATE,'DD-MON-YYYY')
              INTO v_date
              FROM dual;
            ---------------------------
            fhandle :=utl_file.fopen('EX_DATA_BE','check_udsn_skip_'|| v_date || '.csv','w');--Opening a file
            -------------- HEADER ----------------
            SELECT ' settlement_date,source_participant_id,location,device_id,udsn,diff_udsn' AS HEADER
            INTO v_header_rec
            FROM dual ;
            --------------END HEADER ----------------
            --------------WRITE HEADER---------------
            v_log := v_header_rec ||chr(13);
            utl_file.put_line(fhandle, v_log);
            -----------------------------------------
            OPEN detail FOR 
                
   select settlement_date,source_participant_id,location,device_id,udsn,diff_udsn from (
        select settlement_date,a.source_participant_id,BSS.CDA.getLocationDesc(source_participant_id,to_number(SUBSTR(TO_CHAR(device_location,'XXXXXXXX'),-6,6),'XXXXXXXX'),NULL) as location,a.device_id,a.udsn,
        coalesce(udsn - lag(udsn) over (order by device_id,udsn), 0)  as diff_udsn,
        coalesce(device_id - lag(device_id) over (order by device_id,udsn), 0)  as diff_device
        from cut_pi_financial a
        where ud_type = 3 and ud_subtype in (10,13,16,19)
        and settlement_date between trunc(sysdate-5) and trunc(sysdate-1)
        and source_participant_id not in (1,4,89,42,90) -- 20171002 Prasit - Removed
       -- and source_participant_id in (10114,10116)  -- 20171002 Prasit - Added
        and iss_txn_reflection = 'N'
        and cch_txn_approved = 'Y'
        group by settlement_date,a.source_participant_id,BSS.CDA.getLocationDesc(source_participant_id,to_number(SUBSTR(TO_CHAR(device_location,'XXXXXXXX'),-6,6),'XXXXXXXX'),NULL),a.device_id,a.udsn)
        where diff_device = 0
        and diff_udsn > 30  -- 
        order by diff_udsn desc;
                              
            loop
              fetch detail
              INTO 
              v_settlement_date ,
              v_source_participant_id,
              v_location,
              v_device_id ,
              v_udsn ,
              v_diff_udsn ;
              
              exit
            WHEN detail%notfound;
             
              v_log := v_settlement_date||','||v_source_participant_id||','||v_location||','||v_device_id||','||v_udsn||','||v_diff_udsn||chr(13);
              
              utl_file.put_line(fhandle, v_log);
              utl_file.fflush(fhandle);
              
            END loop ;
            CLOSE detail;

            utl_file.fclose(fhandle);
          END;
    
     DECLARE
        
          fhandle utl_file.file_type;
          v_date VARCHAR2(11);
          TYPE gencurtyp IS REF CURSOR;
              detail gencurtyp;
              v_log  VARCHAR2(1000);
              v_header_rec VARCHAR2(1000);
             
              v_settlement_date date;
              v_source_participant_id number;
              v_location varchar2(150);
              v_device_id number;
              v_udsn number;
              v_diff_udsn number;


            BEGIN
              ----get settlement_date ----
              SELECT to_char(SYSDATE,'DD-MON-YYYY')
              INTO v_date
              FROM dual;
            ---------------------------
            fhandle :=utl_file.fopen('EX_DATA_BE','check_udsn_smartbus_sun108_'|| v_date || '.csv','w');--Opening a file
            -------------- HEADER ----------------
            SELECT ' settlement_date,source_participant_id,location,device_id,udsn,diff_udsn' AS HEADER
            INTO v_header_rec
            FROM dual ;
            --------------END HEADER ----------------
            --------------WRITE HEADER---------------
            v_log := v_header_rec ||chr(13);
            utl_file.put_line(fhandle, v_log);
            -----------------------------------------
            OPEN detail FOR 
                
   select settlement_date,source_participant_id,location,device_id,udsn,diff_udsn from (
        select settlement_date,a.source_participant_id,BSS.CDA.getLocationDesc(source_participant_id,to_number(SUBSTR(TO_CHAR(device_location,'XXXXXXXX'),-6,6),'XXXXXXXX'),NULL) as location,a.device_id,a.udsn,
        coalesce(udsn - lag(udsn) over (order by device_id,udsn), 0)  as diff_udsn,
        coalesce(device_id - lag(device_id) over (order by device_id,udsn), 0)  as diff_device
        from cut_pi_financial a
        where ud_type = 3 and ud_subtype in (10,13,16,19)
        and settlement_date between trunc(sysdate-5) and trunc(sysdate-1)
      --  and source_participant_id not in (1,4,89,42,90) -- 20171002 Prasit - Removed
        and source_participant_id in (109,119,49)  -- 20171002 Prasit - Added
        and iss_txn_reflection = 'N'
        and cch_txn_approved = 'Y'
        group by settlement_date,a.source_participant_id,BSS.CDA.getLocationDesc(source_participant_id,to_number(SUBSTR(TO_CHAR(device_location,'XXXXXXXX'),-6,6),'XXXXXXXX'),NULL),a.device_id,a.udsn)
        where diff_device = 0
        and diff_udsn > 3  -- 
        order by diff_udsn desc;
                              
            loop
              fetch detail
              INTO 
              v_settlement_date ,
              v_source_participant_id,
              v_location,
              v_device_id ,
              v_udsn ,
              v_diff_udsn ;
              
              exit
            WHEN detail%notfound;
             
              v_log := v_settlement_date||','||v_source_participant_id||','||v_location||','||v_device_id||','||v_udsn||','||v_diff_udsn||chr(13);
              
              utl_file.put_line(fhandle, v_log);
              utl_file.fflush(fhandle);
              
            END loop ;
            CLOSE detail;

            utl_file.fclose(fhandle);
          END;      
           --send mail--
           DECLARE
          smtpservername VARCHAR2(200);
          sender VARCHAR2(200);
          recipient VARCHAR2(250);
          ccrecipient VARCHAR2(250);
          bccrecipient VARCHAR2(250);
          subject VARCHAR2(250);
          BODY VARCHAR2(250);
          errormessage VARCHAR2(250);
          attachments sendmailjpkg.attachments_list;
          v_return NUMBER;
          v_date date;
          card_issue NUMBER;
          card_notkyc NUMBER;
          card_kyc NUMBER;
         
          BEGIN
          
            SELECT to_char(SYSDATE,'dd-MON-yyyy')
              INTO v_date
              FROM dual;
           
           
          
                      
            dbms_java.grant_permission( 'BSS', 'SYS:java.io.FilePermission', '/export/home/bssuser/dba_directory/PL_SQL/EX_DATA/check_udsn_skip_'|| to_char(SYSDATE,'DD-MON-YYYY') || '.csv', 'read' );
            dbms_java.grant_permission( 'BSS', 'SYS:java.io.FilePermission', '/export/home/bssuser/dba_directory/PL_SQL/EX_DATA/check_udsn_smartbus_sun108_'|| to_char(SYSDATE,'DD-MON-YYYY') || '.csv', 'read' );
            --CARD_KYC_NOT_RECEIVED_AT
            COMMIT;                         
           smtpservername := '127.0.0.1';
            sender := 'be@rabbit.co.th';
            recipient := 'fe@rabbit.co.th,arrakp@rabbit.co.th';
           -- recipient := 'sirilucks@rabbit.co.th';
            ccrecipient := 'be@rabbit.co.th';
            bccrecipient := NULL;
            subject := 'Daily check device udsn skip ' || to_char(SYSDATE, 'YYYYMMDD') ;
            BODY := 'Dear All,' || chr(13) || chr(13) ||                              
                        
                        '    Please find ' || to_char(SYSDATE, 'YYYYMMDD') || ' as attached.' || chr(13) || chr(13) ||
                        
                      'Best Regards,'|| chr(13) 
                      ;
            -- Modify the code to initialize the variable
            attachments := sendmailjpkg.attachments_list('/export/home/bssuser/dba_directory/PL_SQL/EX_DATA/check_udsn_skip_'|| to_char(SYSDATE,'DD-MON-YYYY') || '.csv',
            '/export/home/bssuser/dba_directory/PL_SQL/EX_DATA/check_udsn_smartbus_sun108_'|| to_char(SYSDATE,'DD-MON-YYYY') || '.csv');
            
            
            v_return := sendmailjpkg.sendmail(
              smtpservername => smtpservername,
              sender => sender,
              recipient => recipient,
              ccrecipient => ccrecipient,
              bccrecipient => bccrecipient,
              subject => subject,
              BODY => BODY,
              errormessage => errormessage,
              attachments => attachments
            );
            
          END; 
END DAILY_CHECK_DEVICE_UDSN_SKIP;

procedure DAILY_EXPORT_AMLO_DATA 
    AS 
    
    BEGIN
            
   declare
    fHandle UTL_FILE.FILE_TYPE;
    CARD_SERIAL_NUMBER number;
    BSS_TXN_TYPE varchar2(150);
    EXCEPTION_LIST varchar2(150);
    TRANSACTION_VALUE number;
    PURSE_REMAINING_VALUE number;
    CARD_SEQUENCE_NUMBER number;
    PTSN number;
    LOC_TXN_DATE_TIME date;
    RECONCILIATION_DATE date;
    SETTLEMENT_DATE date;
    UDSN number;
    GOOD_FOR_SETTLEMENT varchar2(10);
    ORIGINAL_TXN_TYPE number;
    LOCATION_ID_TRF number;
    location_name varchar2(200);
    EQUIPMENT_NO varchar2(30);
    DEVICE_ID number;
    SETTLEMENT_STATUS varchar2(10);
    SRC   number;
    SERV  number;
    DEST  number;
    device_location  number;
    ORIGINAL_FILE_NAME  varchar2(200);
    v_log varchar2(2000);
    v_settlement_date date := trunc(sysdate-1);
    v_max_amount number := 50000; 
  
    
    cursor c_txn is
      
       select table1.* from (SELECT 
          '88' || lpad(CARD_SERIAL_NUMBER,9,'0') AS CARD_SERIAL_NUMBER,
          CUT_ALL.TXN_TYPE as BSS_TXN_TYPE,
          EXCEPTION_LIST,
          TRANSACTION_VALUE*0.01 as TRANSACTION_VALUE,
          PURSE_REMAINING_VALUE*0.01 as PURSE_REMAINING_VALUE,
          CARD_SEQUENCE_NUMBER,
          PTSN,
          to_date(RP_STD.TOLOCALTIME(TXN_DATE_TIME),'DD-MON-YY HH24:MI:SS') AS LOC_TXN_DATE_TIME,
          to_date(RECONCILIATION_DATE,'DD-MON-YY HH24:MI:SS') AS RECONCILIATION_DATE,
          to_date(SETTLEMENT_DATE,'DD-MON-YY HH24:MI:SS') AS SETTLEMENT_DATE, 
          UDSN,
          case when cch_txn_approved = 'Y' then 'GFS' else 'NGFS' end AS GOOD_FOR_SETTLEMENT,
          ORIGINAL_TXN_TYPE,
          LOCATION_ID_TRF,
          L.location_name,
          DEVICE_STATUS.EQUIPMENT_NO,
          CUT_ALL.DEVICE_ID,
          case when RECONCILIATION_DATE < SETTLEMENT_DATE then 'Late TXN' else 'Normal TXN' end AS SETTLEMENT_STATUS,
          SOURCE_PARTICIPANT_ID AS SRC,
          SERVICE_PARTICIPANT_ID AS SERV,
          DESTINATION_PARTICIPANT_ID AS DEST,
          device_location,
          ORIGINAL_FILE_NAME
          FROM
          (
          SELECT CARD_LIFE_CYCLE_COUNT,eft_terminal_id,eft_trace_number,streaming_session_id,null as AUTOLOAD_DAILY_LIMIT,null as AUTOLOAD_DAILY_COUNTER,lower_ptsn,upper_ptsn,null as remaining_rides,CARD_SERIAL_NUMBER,TRANSACTION_VALUE,PURSE_REMAINING_VALUE,REPORTS.BKK_INT_FUN.GETTRANSACTIONDESC (UD_TYPE,UD_SUBTYPE) AS TXN_TYPE,A.EXCEPTION_LIST, A.UD_TYPE,A.UD_SUBTYPE,A.TXN_DATE_TIME,RECONCILIATION_DATE,LAV_DATE_TIME,A.CARD_SEQUENCE_NUMBER,PTSN,'CUT_PI_FINANCIAL' AS TABLE_NAME,SOURCE_PARTICIPANT_ID,SERVICE_PARTICIPANT_ID,DESTINATION_PARTICIPANT_ID,DEVICE_ID,UDSN,device_location,to_number(substr(to_char(device_location,'XXXXXXXX'),-6,6),'XXXXXXXX') as location_id_trf, DATA_VERSION,ORIGINAL_FILE_NAME,original_txn_type,SETTLEMENT_DATE,iss_txn_reflection,cch_txn_approved
          ,payment_method0,payment_value0,payment_method1,payment_value1,payment_method2,payment_value2,payment_method3,payment_value3
          ,LAV_PARTICIPANT_ID, LAV_SAM_ID, LAV_PTSN, LAV_TXN_VALUE, LAV_REMAINING_VALUE,  null as LAV_REMAINING_RIDES, LAV_METHOD_OF_PAYMENT
          FROM CUT_PI_FINANCIAL A
          ) cut_all
          left join SYSCD_LOCATION L on (to_number(substr(to_char(CUT_ALL.device_location,'XXXXXXXX'),-6,6),'XXXXXXXX')=L.location_code) and (CUT_ALL.source_participant_id=L.participant_id) and (CUT_ALL.DATA_VERSION=L.DATA_VERSION) and (L.location_type in (9,15,16,21))  
          left join DEVICE_STATUS on CUT_ALL.Device_ID=DEVICE_STATUS.Device_ID and CUT_ALL.SOURCE_PARTICIPANT_ID=DEVICE_STATUS.PARTICIPANT_ID
          left join SYSTEMCD.SYSCD_TXN T on (CUT_ALL.DATA_VERSION=T.DATA_VERSION) AND (CUT_ALL.UD_TYPE=T.TXN_TYPE) AND  (CUT_ALL.UD_SUBTYPE=T.TXN_SUBTYPE)
          where cut_all.iss_txn_reflection = 'N'
          and cut_all.ud_type = 3 and cut_all.ud_subtype in (10,16) 
          and settlement_date = v_settlement_date
          and cch_txn_approved = 'Y'
          )table1 INNER JOIN 
          (select location_code,source_participant_id
          from
          (SELECT L.location_code,trunc(txn_date_time+7/24) AS txn_date,
                        CASE
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('00')
                          THEN '00:00-01:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('01')
                          THEN '01:00-02:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('02')
                          THEN '02:00-03:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('03')
                          THEN '03:00-04:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('04')
                          THEN '04:00-05:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('05')
                          THEN '05:00-06:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('06')
                          THEN '06:00-07:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('07')
                          THEN '07:00-08:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('08')
                          THEN '08:00-09:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('09')
                          THEN '09:00-10:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('10')
                          THEN '10:00-11:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('11')
                          THEN '11:00-12:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('12')
                          THEN '12:00-13:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('13')
                          THEN '13:00-14:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('14')
                          THEN '14:00-15:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('15')
                          THEN '15:00-16:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('16')
                          THEN '16:00-17:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('17')
                          THEN '17:00-18:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('18')
                          THEN '18:00-19:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('19')
                          THEN '19:00-20:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('20')
                          THEN '20:00-21:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('21')
                          THEN '21:00-22:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('22')
                          THEN '22:00-23:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('23')
                          THEN '23:00-00:59'
                        END AS time_group,
                        L.location_name,source_participant_id,
                        source_participant_id
                        ||'-'
                        ||reports.bkk_int_fun.getparticipantlongname(source_participant_id) AS sp_name,
                       card_serial_number,payment_value0*0.01 as txn_value
                      FROM rp_txn r
                      LEFT JOIN SYSCD_LOCATION L
                      ON (r.device_location_code  =L.location_code)
                      AND (r.source_participant_id=L.participant_id)
                      AND (r.DATA_VERSION         =L.DATA_VERSION)
                      AND (L.location_type       IN (9,15,16,21))
                      WHERE ud_type               = 3
                      AND ud_subtype             IN (10,16)
                      AND settlement_date = v_settlement_date
                      AND TRUNC(txn_date_time+7/24) = v_settlement_date
                      AND cch_txn_approved       = 'Y'
                      AND source_participant_id IN (1,4)
                      GROUP BY L.location_code,source_participant_id,
                        TRUNC(txn_date_time+7/24),
                        CASE
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('00')
                          THEN '00:00-01:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('01')
                          THEN '01:00-02:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('02')
                          THEN '02:00-03:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('03')
                          THEN '03:00-04:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('04')
                          THEN '04:00-05:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('05')
                          THEN '05:00-06:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('06')
                          THEN '06:00-07:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('07')
                          THEN '07:00-08:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('08')
                          THEN '08:00-09:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('09')
                          THEN '09:00-10:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('10')
                          THEN '10:00-11:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('11')
                          THEN '11:00-12:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('12')
                          THEN '12:00-13:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('13')
                          THEN '13:00-14:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('14')
                          THEN '14:00-15:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('15')
                          THEN '15:00-16:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('16')
                          THEN '16:00-17:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('17')
                          THEN '17:00-18:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('18')
                          THEN '18:00-19:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('19')
                          THEN '19:00-20:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('20')
                          THEN '20:00-21:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('21')
                          THEN '21:00-22:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('22')
                          THEN '22:00-23:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('23')
                          THEN '23:00-00:59'
                        END ,
                        L.location_name,
                        source_participant_id
                        ||'-'
                        ||reports.bkk_int_fun.getparticipantlongname(source_participant_id) ,
                       card_serial_number,payment_value0
                      union all           
                       SELECT L.location_code,trunc(txn_date_time+7/24) AS txn_date,
                        CASE
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('01')
                          THEN '00:00-01:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('02')
                          THEN '01:00-02:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('03')
                          THEN '02:00-03:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('04')
                          THEN '03:00-04:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('05')
                          THEN '04:00-05:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('06')
                          THEN '05:00-06:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('07')
                          THEN '06:00-07:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('08')
                          THEN '07:00-08:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('09')
                          THEN '08:00-09:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('10')
                          THEN '09:00-10:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('11')
                          THEN '10:00-11:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('12')
                          THEN '11:00-12:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('13')
                          THEN '12:00-13:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('14')
                          THEN '13:00-14:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('15')
                          THEN '14:00-15:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('16')
                          THEN '15:00-16:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('17')
                          THEN '16:00-17:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('18')
                          THEN '17:00-18:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('19')
                          THEN '18:00-19:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('20')
                          THEN '19:00-20:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('21')
                          THEN '20:00-21:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('22')
                          THEN '21:00-22:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('23')
                          THEN '23:00-00:59'
                        END AS time_group,
                        L.location_name,source_participant_id,
                        source_participant_id
                        ||'-'
                        ||reports.bkk_int_fun.getparticipantlongname(source_participant_id) AS sp_name,
                       card_serial_number,payment_value0*0.01 as txn_value
                      FROM rp_txn r
                      LEFT JOIN SYSCD_LOCATION L
                      ON (r.device_location_code  =L.location_code)
                      AND (r.source_participant_id=L.participant_id)
                      AND (r.DATA_VERSION         =L.DATA_VERSION)
                      AND (L.location_type       IN (9,15,16,21))
                      WHERE ud_type               = 3
                      AND ud_subtype             IN (10,16)
                      AND settlement_date = v_settlement_date
                      AND TRUNC(txn_date_time+7/24) = v_settlement_date
                      AND cch_txn_approved  = 'Y'
                      AND source_participant_id IN (1,4)
                      GROUP BY 
                     L.location_code,  trunc(txn_date_time+7/24),
                        CASE
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('01')
                          THEN '00:00-01:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('02')
                          THEN '01:00-02:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('03')
                          THEN '02:00-03:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('04')
                          THEN '03:00-04:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('05')
                          THEN '04:00-05:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('06')
                          THEN '05:00-06:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('07')
                          THEN '06:00-07:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('08')
                          THEN '07:00-08:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('09')
                          THEN '08:00-09:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('10')
                          THEN '09:00-10:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('11')
                          THEN '10:00-11:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('12')
                          THEN '11:00-12:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('13')
                          THEN '12:00-13:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('14')
                          THEN '13:00-14:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('15')
                          THEN '14:00-15:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('16')
                          THEN '15:00-16:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('17')
                          THEN '16:00-17:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('18')
                          THEN '17:00-18:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('19')
                          THEN '18:00-19:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('20')
                          THEN '19:00-20:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('21')
                          THEN '20:00-21:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('22')
                          THEN '21:00-22:59'
                          WHEN TO_CHAR(txn_date_time+7/24,'HH24')IN ('23')
                          THEN '23:00-00:59'
                        END ,
                        L.location_name,source_participant_id,
                        source_participant_id
                        ||'-'
                        ||reports.bkk_int_fun.getparticipantlongname(source_participant_id) ,
                       card_serial_number,payment_value0)
          group by source_participant_id,location_code,txn_date,location_name,sp_name
          having sum(txn_value) > v_max_amount
                      union all 
                      SELECT L.location_code,source_participant_id
                      FROM rp_txn r
                      LEFT JOIN SYSCD_LOCATION L
                      ON (r.device_location_code  =L.location_code)
                      AND (r.source_participant_id=L.participant_id)
                      AND (r.DATA_VERSION         =L.DATA_VERSION)
                      AND (L.location_type       IN (9,15,16,21))
                      WHERE ud_type               = 3
                      AND ud_subtype             IN (10,16)
                      AND settlement_date = v_settlement_date
                      AND TRUNC(txn_date_time+7/24) = v_settlement_date
                      AND cch_txn_approved       = 'Y'
                      AND source_participant_id not in (89,1,4)
                      GROUP BY source_participant_id,
                        L.location_code,TRUNC(txn_date_time+7/24),
                        L.location_name,
                        source_participant_id
                        ||'-'
                        ||reports.bkk_int_fun.getparticipantlongname(source_participant_id)
                      HAVING SUM( payment_value0 )*0.01 > v_max_amount
                      order by source_participant_id,location_code 
          ) table2 --select input to query in cut_table
          ON 
             table1.LOCATION_ID_TRF=table2.location_code
             AND table1.SRC=table2.source_participant_id;--cut
   
    begin  
      fHandle := UTL_FILE.FOPEN('EX_BE', 'Transaction_for_AMLO_Topup_By_Time' || to_char(trunc(sysdate),'YYYYMMDD') || '.csv' , 'w');
      v_log := 'CARD_SERIAL_NUMBER,BSS_TXN_TYPE,EXCEPTION_LIST,TRANSACTION_VALUE,PURSE_REMAINING_VALUE,CARD_SEQUENCE_NUMBER,PTSN,LOC_TXN_DATE_TIME,RECONCILIATION_DATE,SETTLEMENT_DATE,UDSN,GOOD_FOR_SETTLEMENT,ORIGINAL_TXN_TYPE,LOCATION_ID_TRF,location_name,EQUIPMENT_NO,DEVICE_ID,SETTLEMENT_STATUS,SRC,SERV,DEST,device_location,ORIGINAL_FILE_NAME';
      UTL_FILE.PUT_LINE(fHandle, v_log);
      open c_txn;
      loop
        fetch c_txn
          into CARD_SERIAL_NUMBER,BSS_TXN_TYPE,EXCEPTION_LIST,TRANSACTION_VALUE,PURSE_REMAINING_VALUE,CARD_SEQUENCE_NUMBER,PTSN,LOC_TXN_DATE_TIME,RECONCILIATION_DATE,SETTLEMENT_DATE,UDSN,GOOD_FOR_SETTLEMENT,ORIGINAL_TXN_TYPE,LOCATION_ID_TRF,location_name,EQUIPMENT_NO,DEVICE_ID,SETTLEMENT_STATUS,SRC,SERV,DEST,device_location,ORIGINAL_FILE_NAME;
        EXIT WHEN c_txn%NOTFOUND;
        v_log := '"'||CARD_SERIAL_NUMBER||'","'||BSS_TXN_TYPE||'","'||EXCEPTION_LIST||'","'||TRANSACTION_VALUE||'","'||PURSE_REMAINING_VALUE||'","'||CARD_SEQUENCE_NUMBER||'","'||PTSN||'","'||LOC_TXN_DATE_TIME||'","'||RECONCILIATION_DATE||'","'|| SETTLEMENT_DATE||'","'||UDSN||'","'||GOOD_FOR_SETTLEMENT||'","'||ORIGINAL_TXN_TYPE||'","'||LOCATION_ID_TRF||'","'||location_name||'","'|| EQUIPMENT_NO||'","'||DEVICE_ID||'","'||SETTLEMENT_STATUS||'","'||SRC||'","'||SERV||'","'||DEST||'","'||device_location||'","'||ORIGINAL_FILE_NAME||'",';
        UTL_FILE.PUT_LINE(fHandle, v_log);
        UTL_FILE.FFLUSH(fHandle);
      end loop;
      close c_txn;
      UTL_FILE.FCLOSE(fHandle);
      
    end;
    
   if (FileExists('EX_BE','Transaction_for_AMLO_Topup_By_Time' || to_char(trunc(sysdate),'YYYYMMDD') || '.csv') = 1) or 
   (FileExists('EX_BE','Transaction_for_AMLO_Daily_Topup_Summary_' || to_char(trunc(sysdate),'YYYYMMDD') || '.csv') = 1) 
   then
   
   DECLARE
          SMTPSERVERNAME VARCHAR2(200);
          SENDER VARCHAR2(200);
          RECIPIENT VARCHAR2(200);
          CCRECIPIENT VARCHAR2(200);
          BCCRECIPIENT VARCHAR2(200);
          SUBJECT VARCHAR2(200);
          BODY VARCHAR2(200);
          ERRORMESSAGE VARCHAR2(200);
          ATTACHMENTS SENDMAILJPKG.ATTACHMENTS_LIST;
          v_Return NUMBER;
          BEGIN
          
            dbms_java.grant_permission( 'BSS', 'SYS:java.io.FilePermission', '/export/home/ntusers/anchisai/EX_BE/Transaction_for_AMLO_Topup_By_Time' || to_char(trunc(sysdate),'YYYYMMDD') || '.csv', 'read');
        
            commit;
            SMTPSERVERNAME := '127.0.0.1';
            SENDER := 'be@rabbit.co.th';
            RECIPIENT := 'anchisai@rabbit.co.th';
           -- CCRECIPIENT := 'be@rabbit.co.th';
            BCCRECIPIENT := NULL;
            SUBJECT := 'Transaction for AMLO Report ' || to_char(trunc(sysdate),'YYYYMMDD') ;
            BODY := 'Dear QA,' || CHR(13) || CHR(13) ||
        
                        '       Please find Transaction for AMLO Report as attached ka' || CHR(13) || CHR(13) ||
        
                      'Best Regards,'|| CHR(13) 
                      ;
            -- Modify the code to initialize the variable
            ATTACHMENTS := SENDMAILJPKG.ATTACHMENTS_LIST('/export/home/ntusers/anchisai/EX_BE/Transaction_for_AMLO_Topup_By_Time' || to_char(trunc(sysdate),'YYYYMMDD') || '.csv');
            v_Return := SENDMAILJPKG.SENDMAIL(
              SMTPSERVERNAME => SMTPSERVERNAME,
              SENDER => SENDER,
              RECIPIENT => RECIPIENT,
              CCRECIPIENT => CCRECIPIENT,
              BCCRECIPIENT => BCCRECIPIENT,
              SUBJECT => SUBJECT,
              BODY => BODY,
              ERRORMESSAGE => ERRORMESSAGE,
              ATTACHMENTS => ATTACHMENTS
            );
            
          END; 
   else 
    null;
   end if;    
   
end DAILY_EXPORT_AMLO_DATA;

procedure DAILY_CHK_LAST_USED_DEVICE
    AS 
    
    begin
 
          DECLARE
          SMTPSERVERNAME VARCHAR2(200);
          SENDER VARCHAR2(200);
          RECIPIENT VARCHAR2(250);
          CCRECIPIENT VARCHAR2(250);
          BCCRECIPIENT VARCHAR2(250);
          subject varchar2(300);
          BODY VARCHAR2(2000);
          ERRORMESSAGE VARCHAR2(250);
          ATTACHMENTS SENDMAILJPKG.ATTACHMENTS_LIST;
          v_return number;
          v_settlement_date date := trunc(sysdate-1);
          v_date varchar2(12) := to_char(sysdate-1, 'YYYYMMDD');
          v_processed_date date;
          v_bl_action varchar2(20);
          v_bl_reason varchar2(200);
          v_vol number;
          v_count_not_succeed number;
          v_content varchar2(2000);
          v_content_all varchar2(2000);
          v_header varchar2(500) := 'SOURCE_PARTICIPANT_ID,DEVICE_ID,LOCATION_NAME,LAST_USED_TIME';
          type ref_cursor is ref cursor;
          detail_cur ref_cursor;
          
          BEGIN

            open detail_cur for
              
             select source_participant_id  || ',' ||  device_id  || ',' ||  locationdesc  || ',' || last_used_time as detail 
             from(
             select distinct recover_txn.source_participant_id ,  recover_txn.device_id ,  recover_txn.locationdesc, BSS.DEVICE_STATUS.last_used_time
             from 
             (SELECT source_participant_id,
             sam_id AS device_id,
             reports.bkk_int_fun.getlocationnamefromvlocation
             (source_participant_id,
             device_location
             ) AS locationdesc
             FROM rv_cut_pi_financial
             WHERE (reports.bkk_int_fun.isrecovertxn (ud_type, ud_subtype) = 1
             )
             AND cch_txn_approved = 'Y'
             AND settlement_date = v_settlement_date
             GROUP BY source_participant_id,
             reports.bkk_int_fun.getlocationnamefromvlocation
             (source_participant_id,
             device_location
             ),
             sam_id) recover_txn
             left join BSS.DEVICE_STATUS on recover_txn.device_id = BSS.DEVICE_STATUS.DEVICE_ID and BSS.DEVICE_STATUS.participant_id = recover_txn.source_participant_id
             where (trunc(BSS.DEVICE_STATUS.last_used_time) < trunc(sysdate-5) or BSS.DEVICE_STATUS.active = 'N') -- add on 27.03.2017
             and source_participant_id = 42
             ORDER BY BSS.DEVICE_STATUS.last_used_time,source_participant_id asc); 
              
            loop
              fetch detail_cur into v_content;
              exit when detail_cur%notfound;
                  
                  v_content_all := v_content_all || chr(13) ||v_content;
                  
               end loop;--end loop detail--
            close detail_cur;
            
            SMTPSERVERNAME := '127.0.0.1';
            sender := 'be_alerts@rabbit.co.th';
            RECIPIENT := 'fe@rabbit.co.th';
            CCRECIPIENT := 'SPsupport@rabbit.co.th,be@rabbit.co.th,rc@rabbit.co.th';
            bccrecipient := null;
            subject := '[Daily Check] - DMC Purse Add Recover with Last Usage Time on ' || v_date || ' (>5 days)' ;
         

            body := 'Dear All,' || chr(13) || chr(13) ||  
                        
                         v_header || v_content_all || chr(13) || chr(13) || 
                    
                      'Best Regards,'|| CHR(13) 
                      ;
            -- Modify the code to initialize the variable
           
            v_Return := SENDMAILJPKG.SENDMAIL(
              SMTPSERVERNAME => SMTPSERVERNAME,
              SENDER => SENDER,
              RECIPIENT => RECIPIENT,
              CCRECIPIENT => CCRECIPIENT,
              BCCRECIPIENT => BCCRECIPIENT,
              SUBJECT => SUBJECT,
              BODY => BODY,
              ERRORMESSAGE => ERRORMESSAGE,
              ATTACHMENTS => ATTACHMENTS
            );
            
          END;
          
          
         DECLARE
          SMTPSERVERNAME VARCHAR2(200);
          SENDER VARCHAR2(200);
          RECIPIENT VARCHAR2(250);
          CCRECIPIENT VARCHAR2(250);
          BCCRECIPIENT VARCHAR2(250);
          subject varchar2(300);
          BODY VARCHAR2(2000);
          ERRORMESSAGE VARCHAR2(250);
          ATTACHMENTS SENDMAILJPKG.ATTACHMENTS_LIST;
          v_return number;
          v_settlement_date date := trunc(sysdate-1);
          v_date varchar2(12) := to_char(sysdate-1, 'YYYYMMDD');
          v_processed_date date;
          v_bl_action varchar2(20);
          v_bl_reason varchar2(200);
          v_vol number;
          v_count_not_succeed number;
          v_content varchar2(2000);
          v_content_all varchar2(2000);
          v_header varchar2(500) := 'SOURCE_PARTICIPANT_ID,DEVICE_ID,LOCATION_NAME,LAST_USED_TIME';
          type ref_cursor is ref cursor;
          detail_cur ref_cursor;
          
          BEGIN

            open detail_cur for
              
             select source_participant_id  || ',' ||  device_id  || ',' ||  locationdesc  || ',' || last_used_time as detail 
             from(
             select distinct recover_txn.source_participant_id ,  recover_txn.device_id ,  recover_txn.locationdesc, BSS.DEVICE_STATUS.last_used_time
             from 
             (SELECT source_participant_id,
             sam_id AS device_id,
             reports.bkk_int_fun.getlocationnamefromvlocation
             (source_participant_id,
             device_location
             ) AS locationdesc
             FROM rv_cut_pi_financial
             WHERE (reports.bkk_int_fun.isrecovertxn (ud_type, ud_subtype) = 1
             )
             AND cch_txn_approved = 'Y'
             AND settlement_date = v_settlement_date
             GROUP BY source_participant_id,
             reports.bkk_int_fun.getlocationnamefromvlocation
             (source_participant_id,
             device_location
             ),
             sam_id) recover_txn
             left join BSS.DEVICE_STATUS on recover_txn.device_id = BSS.DEVICE_STATUS.DEVICE_ID and BSS.DEVICE_STATUS.participant_id = recover_txn.source_participant_id
             where trunc(BSS.DEVICE_STATUS.last_used_time) < trunc(sysdate-5)
             and acquirer_id = 11
             ORDER BY BSS.DEVICE_STATUS.last_used_time,source_participant_id asc); 
              
            loop
              fetch detail_cur into v_content;
              exit when detail_cur%notfound;
                  
                  v_content_all := v_content_all || chr(13) ||v_content;
                  
               end loop;--end loop detail--
            close detail_cur;
            
            SMTPSERVERNAME := '127.0.0.1';
            sender := 'be_alerts@rabbit.co.th';
            RECIPIENT := 'SPsupport@rabbit.co.th';
            CCRECIPIENT := 'fe@rabbit.co.th,be@rabbit.co.th';
            bccrecipient := null;
            subject := '[Daily Check] - BBL Purse Add Recover with Last Usage Time on ' || v_date || ' (>5 days)' ;
         

            body := 'Dear All,' || chr(13) || chr(13) ||  
                        
                         v_header || v_content_all || chr(13) || chr(13) || 
                    
                      'Best Regards,'|| CHR(13) 
                      ;
            -- Modify the code to initialize the variable
           
            v_Return := SENDMAILJPKG.SENDMAIL(
              SMTPSERVERNAME => SMTPSERVERNAME,
              SENDER => SENDER,
              RECIPIENT => RECIPIENT,
              CCRECIPIENT => CCRECIPIENT,
              BCCRECIPIENT => BCCRECIPIENT,
              SUBJECT => SUBJECT,
              BODY => BODY,
              ERRORMESSAGE => ERRORMESSAGE,
              ATTACHMENTS => ATTACHMENTS
            );
            
          END;   
 
end DAILY_CHK_LAST_USED_DEVICE;

procedure DAILY_CHK_MCTHAI_CD_VERSION
    AS 
    
    begin
          
  declare
        fHandle UTL_FILE.FILE_TYPE; 
        v_date varchar2(11);
        TYPE GenCurTyp IS REF CURSOR;
        detail GenCurTyp;
        v_time_loaded date;
        v_sp_name varchar2(100);
        v_Device_ID varchar2(20);
        v_location_name  varchar2(100);
        v_cd_set number;  
        v_max_date date;
        v_settlement_date date;
        v_log varchar2(800);

      begin
        fHandle :=utl_file.fopen('EX_BE','Reader_CD_VERSION_'|| to_char(sysdate,'YYYYMMDD') ||'.csv','w');--Opening a file
        
        v_log := 'SP_NAME,DEVICE_ID,LOCATION_NAME,CD_SET_VERSION,MAX_DATE,SETTLEMENT_DATE';
        UTL_FILE.PUT_LINE(fHandle, v_log);
      
      -----------------Detail------------------  
      open detail for 
      ------***************Detail****************----------
       
              SELECT source_participant_id
                ||'-'
               -- ||reports.bkk_int_fun.getparticipantlongname(source_participant_id) AS sp_name,
                ||case when reports.BKK_INT_FUN.GetParticipantLongName (source_participant_id) like '%,%' 
                        then  replace  ( reports.BKK_INT_FUN.GetParticipantLongName (source_participant_id),',','')
                        else  reports.BKK_INT_FUN.GetParticipantLongName (source_participant_id)end AS sp_name,
                Device_ID ,
               -- REPORTS.BKK_INT_FUN.GETLOCATIONNAMEFROMvlocation(source_participant_id,device_location) AS location_name,
                BSS.CDA.getLocationDesc(source_participant_id,to_number(SUBSTR(TO_CHAR(device_location,'XXXXXXXX'),-6,6),'XXXXXXXX'),NULL) as location_name,
                MAX(cd_set_version) as cd_set ,
                MAX(txn_date_time+7/24) max_date,
                MAX(settlement_date) AS settlement_date
              FROM cut_pi_financial
              WHERE ud_type   = 3
              AND ud_subtype                          IN (10,13,16,19)
              AND settlement_date BETWEEN TRUNC(sysdate-15) AND TRUNC(sysdate-1)
              AND cch_txn_approved      = 'Y'
              AND iss_txn_reflection    = 'N'
              AND source_participant_id != 1
              GROUP BY source_participant_id,
                Device_ID ,
               -- REPORTS.BKK_INT_FUN.GETLOCATIONNAMEFROMvlocation(source_participant_id,device_location)
                BSS.CDA.getLocationDesc(source_participant_id,to_number(SUBSTR(TO_CHAR(device_location,'XXXXXXXX'),-6,6),'XXXXXXXX'),NULL) 
              ORDER BY MAX(cd_set_version),
               -- REPORTS.BKK_INT_FUN.GETLOCATIONNAMEFROMvlocation(source_participant_id,device_location),
                BSS.CDA.getLocationDesc(source_participant_id,to_number(SUBSTR(TO_CHAR(device_location,'XXXXXXXX'),-6,6),'XXXXXXXX'),NULL),
                settlement_date DESC ;
  
       ------***************Detail****************-----------;
      loop
        fetch detail into 
        v_sp_name ,
        v_Device_ID,
        v_location_name,
        v_cd_set,  
        v_max_date,
        v_settlement_date
        ; 

        EXIT WHEN detail%NOTFOUND;
        
         v_log := v_sp_name || ',' || v_Device_ID || ',"' || v_location_name || '",' || v_cd_set || ',' || v_max_date|| ',' || v_settlement_date || ',' || CHR(13);
          UTL_FILE.PUT_LINE(fHandle, v_log);
          UTL_FILE.FFLUSH(fHandle);
        
        end loop;
        close detail;
      ------------------------------------------
      UTL_FILE.FCLOSE(fHandle);
      end;
      
       DECLARE
          SMTPSERVERNAME VARCHAR2(200);
          SENDER VARCHAR2(200);
          RECIPIENT VARCHAR2(250);
          CCRECIPIENT VARCHAR2(250);
          BCCRECIPIENT VARCHAR2(250);
          SUBJECT VARCHAR2(250);
          BODY VARCHAR2(250);
          ERRORMESSAGE VARCHAR2(250);
          ATTACHMENTS SENDMAILJPKG.ATTACHMENTS_LIST;
          v_Return NUMBER;
          BEGIN
           
            dbms_java.grant_permission( 'BSS', 'SYS:java.io.FilePermission', '/export/home/ntusers/anchisai/EX_BE/Reader_CD_VERSION_'|| to_char(sysdate,'YYYYMMDD') ||'.csv', 'read' );
            commit;
            SMTPSERVERNAME := '127.0.0.1';
            SENDER := 'be@rabbit.co.th';
            RECIPIENT := 'fe@rabbit.co.th,spsupport@rabbit.co.th,adisornp@rabbit.co.th,natthikas@rabbit.co.th,wasino@rabbit.co.th,wasins@rabbit.co.th,benjamast@rabbit.co.th';
            --RECIPIENT := 'apiwatk@rabbit.co.th';
            CCRECIPIENT := 'be@rabbit.co.th';
            BCCRECIPIENT := NULL;
            SUBJECT := 'Reader CD version ' || to_char(sysdate, 'YYYYMMDD') ;
            BODY := 'Dear FE,' || CHR(13) || CHR(13) ||
        
                        '   Please find daily check Reader CD version as attached.' || CHR(13) || CHR(13) ||
        
                      'Best Regards,'|| CHR(13) 
                      ;
            -- Modify the code to initialize the variable
            ATTACHMENTS := SENDMAILJPKG.ATTACHMENTS_LIST('/export/home/ntusers/anchisai/EX_BE/Reader_CD_VERSION_'|| to_char(sysdate,'YYYYMMDD') ||'.csv');
            v_Return := SENDMAILJPKG.SENDMAIL(
              SMTPSERVERNAME => SMTPSERVERNAME,
              SENDER => SENDER,
              RECIPIENT => RECIPIENT,
              CCRECIPIENT => CCRECIPIENT,
              BCCRECIPIENT => BCCRECIPIENT,
              SUBJECT => SUBJECT,
              BODY => BODY,
              ERRORMESSAGE => ERRORMESSAGE,
              ATTACHMENTS => ATTACHMENTS
            );
            
          END;
      
end DAILY_CHK_MCTHAI_CD_VERSION;

procedure DAILY_CHK_BTS_DEVICE_SEND_TXN
    AS 
    
    begin
 
          DECLARE
          SMTPSERVERNAME VARCHAR2(200);
          SENDER VARCHAR2(200);
          RECIPIENT VARCHAR2(250);
          CCRECIPIENT VARCHAR2(250);
          BCCRECIPIENT VARCHAR2(250);
          subject varchar2(300);
          BODY VARCHAR2(2000);
          ERRORMESSAGE VARCHAR2(250);
          ATTACHMENTS SENDMAILJPKG.ATTACHMENTS_LIST;
          
          v_return number;
          v_settlement_date date := trunc(sysdate-1);
          v_date varchar2(12) := to_char(sysdate-1, 'YYYYMMDD');
     
          v_content varchar2(2000);
          v_content_all varchar2(2000);
          v_header varchar2(500) := 'DEVICE_ID,SAM_ID,DEVICE_TYPE_NAME,LOCATION_ID,LOCATION_NAME,EQUIPMENT_NO,LAST_USED_TIME';
          type ref_cursor is ref cursor;
          detail_cur ref_cursor;
          
          BEGIN

            open detail_cur for
              
             select 
              device_id ||','||
              sam_id||','||
              device_type_name ||','||
              to_number(substr(to_char(location,'XXXXXXXX'),-6,6),'XXXXXXXX')||','||
              location_name||','||
              equipment_no||','||
              RP_STD.TOLOCALTIME(last_used_time)
              from DEVICE_STATUS
              where participant_id=1
              and status in (3,5)
              and trunc(last_used_time) < trunc(sysdate -3)
              and trunc(last_used_time) > trunc(sysdate -10)
              and active = 'Y'
              order by last_used_time asc;
              
            loop
              fetch detail_cur into v_content;
              exit when detail_cur%notfound;
                  
                  v_content_all := v_content_all || chr(13) ||v_content;
                  
               end loop;--end loop detail--
            close detail_cur;
            
            SMTPSERVERNAME := '127.0.0.1';
            sender := 'be_alerts@rabbit.co.th';
            RECIPIENT := 'fe@rabbit.co.th';
            CCRECIPIENT := 'be@rabbit.co.th';
            bccrecipient := null;
            subject := '[Daily Check] - BTS device not send txn during 3-10 days ' || v_date  ;
         

            body := 'Dear All,' || chr(13) || chr(13) ||  
            
                        'Please find BTS device not send txn during 3-10 days as below list.' || chr(13) || chr(13) ||
                        
                         v_header || v_content_all || chr(13) || chr(13) || 
                    
                      'Best Regards,'|| CHR(13) 
                      ;
            -- Modify the code to initialize the variable
           
            v_Return := SENDMAILJPKG.SENDMAIL(
              SMTPSERVERNAME => SMTPSERVERNAME,
              SENDER => SENDER,
              RECIPIENT => RECIPIENT,
              CCRECIPIENT => CCRECIPIENT,
              BCCRECIPIENT => BCCRECIPIENT,
              SUBJECT => SUBJECT,
              BODY => BODY,
              ERRORMESSAGE => ERRORMESSAGE,
              ATTACHMENTS => ATTACHMENTS
            );
            
          END;
          
        
 
end DAILY_CHK_BTS_DEVICE_SEND_TXN;

PROCEDURE BOT_CARD_UNINITIALISED 
    AS 
    
    BEGIN
  
     DECLARE
        FHANDLE UTL_FILE.FILE_TYPE; 
        V_DATE VARCHAR2(11);
        TYPE GENCURTYP IS REF CURSOR;
        DETAIL GENCURTYP;
        V_CARD_SERIAL_NUMBER NUMBER;
        V_ACCOUNT_STATE NUMBER;
        V_PROD_TYPE NUMBER;
        V_LEDGER_BALANCE NUMBER;
        V_REMAINING_VALUE NUMBER;
        V_ISSUED_TIME DATE;
        V_LAST_ACTIVITY_TIME DATE;
        V_CARD_TYPE VARCHAR2(50);
        V_LOG VARCHAR2(500);

      BEGIN
        FHANDLE :=UTL_FILE.FOPEN('EX_BE','BOT_Card_Uninitialised_as_at_' || TO_CHAR(SYSDATE,'YYYYMMDD') ||'.csv','w');--Opening a file
        
        V_LOG := 'CARD_SERIAL_NUMBER,ACCOUNT_STATE,PROD_TYPE,LEDGER_BALANCE,REMAINING_VALUE,ISSUED_TIME,LAST_ACTIVITY_TIME,CARD_TYPE';
        UTL_FILE.PUT_LINE(FHANDLE, V_LOG);
      
      -----------------Detail------------------  
      OPEN DETAIL FOR 
      ------***************Detail****************----------
       SELECT CA.CSC_SERIAL_NUMBER,
          CA.ACCOUNT_STATE,
          PA.PROD_TYPE,
          PA.LEDGER_BALANCE    *0.01                                                                          AS LEDGER_BALANCE,
          PA.REMAINING_VALUE   *0.01                                                                          AS REMAINING_VALUE,
          PA.ISSUED_TIME       +7/24                                                                          AS ISSUED_TIME,
          PA.LAST_ACTIVITY_TIME+7/24                                                                          AS LAST_ACTIVITY_TIME ,
          REPORTS.BKK_INT_FUN.GETPASSENGERTYPE (AA.PASSENGER_TYPE,REPORTS.BKK_INT_FUN.GETDATAVERSION(), 'en') AS CARD_TYPE
        FROM PRODUCT.PRODUCT_ACCOUNT PA ,
          APPLICATION_ACCOUNT AA ,
          CARD_ACCOUNT CA
        WHERE CA.CSC_SERIAL_NUMBER = PA.CSC_SERIAL_NUMBER(+)
        AND CA.CSC_LIFECYCLE_COUNT = PA.CSC_LIFECYCLE_COUNT(+)
        AND CA.CSC_ISSUER_ID       = PA.CSC_ISSUER_ID(+)
        AND CA.CSC_TYPE            = PA.CSC_TYPE(+)
        AND CA.CSC_SERIAL_NUMBER   = AA.CSC_SERIAL_NUMBER(+)
        AND CA.CSC_LIFECYCLE_COUNT = AA.CSC_LIFECYCLE_COUNT(+)
        AND CA.CSC_ISSUER_ID       = AA.CSC_ISSUER_ID(+)
        AND CA.CSC_TYPE            = AA.CSC_TYPE(+)
        AND PA.PROD_TYPE           = 256
        AND CA.ACCOUNT_STATE       = 1
        AND PA.REMAINING_VALUE    <> 0;
            
       ------***************Detail****************-----------;
      LOOP
        FETCH DETAIL INTO 
        V_CARD_SERIAL_NUMBER,
        V_ACCOUNT_STATE,
        V_PROD_TYPE,
        V_LEDGER_BALANCE,
        V_REMAINING_VALUE,
        V_ISSUED_TIME,
        V_LAST_ACTIVITY_TIME,
        V_CARD_TYPE
        ; 

        EXIT WHEN DETAIL%NOTFOUND;
        
          V_LOG := V_CARD_SERIAL_NUMBER || ',' || V_ACCOUNT_STATE || ',' || V_PROD_TYPE || ',' || V_LEDGER_BALANCE || ',' || V_REMAINING_VALUE || ',' || V_ISSUED_TIME || ',' || V_LAST_ACTIVITY_TIME || ',' || V_CARD_TYPE || CHR(13);
          UTL_FILE.PUT_LINE(FHANDLE, V_LOG);
          UTL_FILE.FFLUSH(FHANDLE);
        
        END LOOP;
        CLOSE DETAIL;
      ------------------------------------------
      UTL_FILE.FCLOSE(FHANDLE);
      END;
      
      DECLARE
          SMTPSERVERNAME VARCHAR2(200);
          SENDER VARCHAR2(200);
          RECIPIENT VARCHAR2(250);
          CCRECIPIENT VARCHAR2(250);
          BCCRECIPIENT VARCHAR2(250);
          SUBJECT VARCHAR2(250);
          BODY VARCHAR2(250);
          ERRORMESSAGE VARCHAR2(250);
          ATTACHMENTS SENDMAILJPKG.ATTACHMENTS_LIST;
          V_RETURN NUMBER;
          BEGIN
           
            DBMS_JAVA.GRANT_PERMISSION( 'BSS', 'SYS:java.io.FilePermission', '/export/home/ntusers/anchisai/EX_BE/BOT_Card_Uninitialised_as_at_' || TO_CHAR(SYSDATE,'YYYYMMDD') ||'.csv', 'read' );
            COMMIT;
            SMTPSERVERNAME := '127.0.0.1';
            SENDER := 'be@rabbit.co.th';
            RECIPIENT := 'be@rabbit.co.th,rc@rabbit.co.th';
            CCRECIPIENT := NULL;
            BCCRECIPIENT := NULL;
            SUBJECT := '[BOT]Uninitialised card list as at' || TO_CHAR(SYSDATE, 'YYYYMMDD') ;
            BODY := 'Dear RC,' || CHR(13) || CHR(13) ||
        
                        '      Monthly BOT Uninitialised card list as at ' ||TO_CHAR(SYSDATE, 'YYYYMMDD') || ' as attached.' || CHR(13) || CHR(13) ||
        
                      'Best Regards,'|| CHR(13) 
                      ;
            -- Modify the code to initialize the variable
            ATTACHMENTS := SENDMAILJPKG.ATTACHMENTS_LIST('/export/home/ntusers/anchisai/EX_BE/BOT_Card_Uninitialised_as_at_' || TO_CHAR(SYSDATE,'YYYYMMDD') ||'.csv');
            V_RETURN := SENDMAILJPKG.SENDMAIL(
              SMTPSERVERNAME => SMTPSERVERNAME,
              SENDER => SENDER,
              RECIPIENT => RECIPIENT,
              CCRECIPIENT => CCRECIPIENT,
              BCCRECIPIENT => BCCRECIPIENT,
              SUBJECT => SUBJECT,
              BODY => BODY,
              ERRORMESSAGE => ERRORMESSAGE,
              ATTACHMENTS => ATTACHMENTS
            );
            
          END;
      
END BOT_CARD_UNINITIALISED;

PROCEDURE CREATE_WHITE_LIST_EI
    AS 
    
    BEGIN
  
     DECLARE
        FHANDLE UTL_FILE.FILE_TYPE; 
        V_EQUIPMENT_ID VARCHAR2(11);
        V_SERVICE_PROVIDER_ID NUMBER;
        V_SAM_ID  VARCHAR2(11);
        TYPE GENCURTYP IS REF CURSOR;
        DETAIL GENCURTYP;
        V_LOG VARCHAR2(500);

      BEGIN
        FHANDLE :=UTL_FILE.FOPEN('BSS_EXPORT','EI_WHITELIST_'|| TO_CHAR(SYSDATE,'YYYYMMDD') ||'.CSV','w');--Opening a file
        
       -- V_LOG := 'EQUIPMENT_ID';
       -- UTL_FILE.PUT_LINE(FHANDLE, V_LOG);
      
      -----------------Detail------------------  
      OPEN DETAIL FOR 
      ------***************Detail****************----------
      
   /*    SELECT '0x0'
          ||TRIM(TO_CHAR(DEVICE_ID,'XXXXXXXX')) AS EQUIPMENT_ID,
          PARTICIPANT_ID                                                  AS SERVICE_PROVIDER_ID,
          ' 0x0'
          ||TRIM(TO_CHAR(SAM_ID,'XXXXXXXX')) AS SAM_ID
              FROM DEVICE.DEVICE_STATUS A
              WHERE ACQUIRER_ID = 11
              AND STATUS        = 5
              --AND EQUIPMENT_NO = '99960414'
              AND EXISTS
                (SELECT DEVICE_ID
                FROM DEVICE.DEVICE_STATUS B
                WHERE ACQUIRER_ID = 11
                AND STATUS        = 5
                AND B.DEVICE_ID   = A.DEVICE_ID
                --and location = 16777215
                GROUP BY DEVICE_ID
                HAVING COUNT(*) = 1
                )*/
                
               /* SELECT '0x'|| lpad(TRIM(TO_CHAR(DEVICE_ID,'XXXXXXXX')),8,'0') AS EQUIPMENT_ID
                FROM DEVICE.DEVICE_STATUS 
                WHERE ACQUIRER_ID = 11
                AND STATUS        = 5
                AND location = 4294967295
                GROUP BY DEVICE_ID
                HAVING COUNT(*) = 1;
                */
                
              --Fix 28.07.2017--
              SELECT '0x'|| lpad(TRIM(TO_CHAR(DEVICE_ID,'XXXXXXXX')),8,'0') AS EQUIPMENT_ID
                    FROM DEVICE.DEVICE_STATUS A
                    WHERE ACQUIRER_ID = 11
                    AND STATUS        = 5
                    and participant_id <> 22
                    and location = 4294967295
                    AND EXISTS
                      (SELECT DEVICE_ID
                      FROM DEVICE.DEVICE_STATUS B
                      WHERE /*ACQUIRER_ID = 11
                      AND*/ STATUS        = 5
                      AND B.DEVICE_ID   = A.DEVICE_ID
                        GROUP BY DEVICE_ID
                      HAVING COUNT(*) = 1
                      );
                
                
            
       ------***************Detail****************-----------;
      LOOP
        FETCH DETAIL INTO 
        V_EQUIPMENT_ID
      
        ; 

        EXIT WHEN DETAIL%NOTFOUND;
        
          V_LOG := V_EQUIPMENT_ID || CHR(13);
          UTL_FILE.PUT_LINE(FHANDLE, V_LOG);
          UTL_FILE.FFLUSH(FHANDLE);
        
        END LOOP;
        CLOSE DETAIL;
      ------------------------------------------
      UTL_FILE.FCLOSE(FHANDLE);
      END;   
      
END CREATE_WHITE_LIST_EI;

PROCEDURE DAILY_FILE_SUPPORT_RC
    AS 
    
    BEGIN
  
     DECLARE
        FHANDLE UTL_FILE.FILE_TYPE; 
        V_PARTICIPANT_ID NUMBER;
        V_PARTICIPANT_NAME VARCHAR2(150);
        V_SEQ  NUMBER;
        V_TOTAL NUMBER;
        V_SDATE DATE;
        TYPE GENCURTYP IS REF CURSOR;
        DETAIL GENCURTYP;
        V_LOG VARCHAR2(500);

      BEGIN
        FHANDLE :=UTL_FILE.FOPEN('PLSQL_OUT','RETAIL_DEVICES_s.'|| TO_CHAR(SYSDATE-1,'YYYYMMDD') ||'.CSV','w');--Opening a file
        
        V_SDATE := TRUNC(SYSDATE-1);
        
        V_LOG := 'PARTICIPANT_ID,PARTICIPANT_NAME,SEQ,TOTAL';
        UTL_FILE.PUT_LINE(FHANDLE, V_LOG);
      
      -----------------Detail------------------  
      OPEN DETAIL FOR 
      ------***************Detail****************----------
      
            SELECT SYSCD_PART.PARTICIPANT_ID AS PARTICIPANT_ID,
              SYSCD_PART.NAME AS PARTICIPANT_NAME,SEQ,
              COUNT(DISTINCT CUT_PI_FINANCIAL.DEVICE_ID)AS TOTAL
            FROM V_PART1 SYSCD_PART
            LEFT JOIN BSS_REPORTS.RC_DEVICE_NUM_MAP RC
            ON RC.SP_ID = SYSCD_PART.PARTICIPANT_ID 
            LEFT JOIN CUT_PI_FINANCIAL
            ON SYSCD_PART.PARTICIPANT_ID    =CUT_PI_FINANCIAL.SOURCE_PARTICIPANT_ID
            AND UD_TYPE                      =3
            AND UD_SUBTYPE                  IN (10,13,16,19)
            AND CUT_PI_FINANCIAL.ACQUIRER_ID IN (11,12,42,45,46,99,101)
            AND ISS_TXN_REFLECTION           ='N'
            AND CCH_TXN_APPROVED             ='Y'
            AND SETTLEMENT_DATE              = V_SDATE--'06-JUL-2017'
            WHERE SYSCD_PART.ACQUIRER_ID        IN (11,12)
            AND SYSCD_PART.PARTICIPANT_ID NOT IN (11,12)
           -- AND seq < 152
            GROUP BY SEQ,SYSCD_PART.PARTICIPANT_ID,SYSCD_PART.NAME
            ORDER BY SEQ ;
                
            
       ------***************Detail****************-----------;
      LOOP
        FETCH DETAIL INTO 
        V_PARTICIPANT_ID,
        V_PARTICIPANT_NAME,
        V_SEQ,
        V_TOTAL
        ; 

        EXIT WHEN DETAIL%NOTFOUND;
        
          V_LOG := V_PARTICIPANT_ID ||',"'|| V_PARTICIPANT_NAME||'",'||V_SEQ||','||V_TOTAL || CHR(13);
          UTL_FILE.PUT_LINE(FHANDLE, V_LOG);
          UTL_FILE.FFLUSH(FHANDLE);
        
        END LOOP;
        CLOSE DETAIL;
      ------------------------------------------
      UTL_FILE.FCLOSE(FHANDLE);
      END;   
      
     DECLARE
        FHANDLE UTL_FILE.FILE_TYPE; 
        V_PARTICIPANT_ID NUMBER;
        V_PARTICIPANT_NAME VARCHAR2(150);
        V_SEQ  NUMBER;
        V_TOTAL_VOL NUMBER;
        V_TOTAL_VALUE NUMBER(10,2);
        V_SDATE DATE;
        TYPE GENCURTYP IS REF CURSOR;
        DETAIL GENCURTYP;
        V_LOG VARCHAR2(500);

      BEGIN
        FHANDLE :=UTL_FILE.FOPEN('PLSQL_OUT','RETAIL_USAGE_s.'|| TO_CHAR(SYSDATE-1,'YYYYMMDD') ||'.CSV','w');--Opening a file
        
        V_SDATE := TRUNC(SYSDATE-1);
        
        V_LOG := 'PARTICIPANT_ID,PARTICIPANT_NAME,SEQ,TOTAL_VOL,TOTAL_VALUE';
        UTL_FILE.PUT_LINE(FHANDLE, V_LOG);
      
      -----------------Detail------------------  
      OPEN DETAIL FOR 
      ------***************Detail****************----------
      
        SELECT PARTICIPANT_ID,PARTICIPANT_NAME,SEQ,SUM(TOTAL_VOL), SUM(TOTAL_VAL)
          FROM
          (SELECT SYSCD_PART.PARTICIPANT_ID AS PARTICIPANT_ID,
            SYSCD_PART.NAME AS PARTICIPANT_NAME,SEQ, CASE WHEN ON_SUM.TXN_TYPE = 3 AND ON_SUM.TXN_SUB_TYPE IN (16,19) THEN SUM(ON_SUM.GFS_VOLUME) * -1
          ELSE SUM (ON_SUM.GFS_VOLUME) END AS TOTAL_VOL,
            CASE WHEN ON_SUM.TXN_TYPE = 3 AND ON_SUM.TXN_SUB_TYPE IN (16,19) THEN SUM(ON_SUM.GFS_VALUE) * -0.01 
          ELSE SUM (ON_SUM.GFS_VALUE) * 0.01 END AS TOTAL_VAL
          FROM V_PART1 SYSCD_PART
          LEFT JOIN BSS_REPORTS.RC_DEVICE_NUM_MAP_USAGE RC
          ON RC.SP_ID = SYSCD_PART.PARTICIPANT_ID 
          LEFT JOIN FV_EOD_ONLINE_SUMM ON_SUM
          ON SYSCD_PART.PARTICIPANT_ID    = ON_SUM.SOURCE_ID
          AND TXN_TYPE                      =3
          AND TXN_SUB_TYPE                  IN (13,19)
          AND CCH_SETTLEMENT_DATE              = V_SDATE--'06-JUL-2017'
          WHERE  SYSCD_PART.PARTICIPANT_ID = 42
          GROUP BY SEQ,SYSCD_PART.PARTICIPANT_ID,SYSCD_PART.NAME,ON_SUM.TXN_TYPE,
                     ON_SUM.TXN_SUB_TYPE)
                     GROUP BY PARTICIPANT_ID,PARTICIPANT_NAME,SEQ
          UNION
          SELECT PARTICIPANT_ID,PARTICIPANT_NAME,SEQ,SUM(TOTAL_VOL), SUM(TOTAL_VAL)
          FROM
          (SELECT SYSCD_PART.PARTICIPANT_ID AS PARTICIPANT_ID,
            SYSCD_PART.NAME AS PARTICIPANT_NAME,SEQ,
            CASE WHEN ON_SUM.TXN_TYPE = 3 AND ON_SUM.TXN_SUB_TYPE IN (16,19) THEN SUM(ON_SUM.GFS_VOLUME) * -1
          ELSE SUM (ON_SUM.GFS_VOLUME) END AS TOTAL_VOL,
            CASE WHEN ON_SUM.TXN_TYPE = 3 AND ON_SUM.TXN_SUB_TYPE IN (16,19) THEN SUM(ON_SUM.GFS_VALUE) * -0.01 
          ELSE SUM (ON_SUM.GFS_VALUE) * 0.01 END AS TOTAL_VAL
          FROM V_PART1 SYSCD_PART
          LEFT JOIN BSS_REPORTS.RC_DEVICE_NUM_MAP_USAGE RC
          ON RC.SP_ID = SYSCD_PART.PARTICIPANT_ID 
          LEFT JOIN FV_EOD_ONLINE_SUMM ON_SUM
          ON SYSCD_PART.PARTICIPANT_ID    = ON_SUM.SOURCE_ID
          AND TXN_TYPE                      =3
          AND TXN_SUB_TYPE                  IN (13,19)
          AND SERVICE_ID IN (11,42,99,101)
          AND CCH_SETTLEMENT_DATE              = V_SDATE--'06-JUL-2017'
          WHERE SYSCD_PART.ACQUIRER_ID        IN (11)
          AND SYSCD_PART.PARTICIPANT_ID NOT IN (12,11,10001)
         -- AND SEQ < 122 -- latest sp is Sizzler --
          GROUP BY SEQ,SYSCD_PART.PARTICIPANT_ID,SYSCD_PART.NAME,ON_SUM.TXN_TYPE,
                     ON_SUM.TXN_SUB_TYPE)
                     GROUP BY PARTICIPANT_ID,PARTICIPANT_NAME,SEQ
          ORDER BY SEQ;
            
       ------***************Detail****************-----------;
      LOOP
        FETCH DETAIL INTO 
        V_PARTICIPANT_ID,
        V_PARTICIPANT_NAME,
        V_SEQ,
        V_TOTAL_VOL,
        V_TOTAL_VALUE
        ; 

        EXIT WHEN DETAIL%NOTFOUND;
        
          V_LOG := V_PARTICIPANT_ID ||',"'|| V_PARTICIPANT_NAME ||'",'|| V_SEQ ||','|| V_TOTAL_VOL ||','|| V_TOTAL_VALUE || CHR(13);
          UTL_FILE.PUT_LINE(FHANDLE, V_LOG);
          UTL_FILE.FFLUSH(FHANDLE);
        
        END LOOP;
        CLOSE DETAIL;
      ------------------------------------------
      UTL_FILE.FCLOSE(FHANDLE);
      END;    
      
     DECLARE
          SMTPSERVERNAME VARCHAR2(200);
          SENDER VARCHAR2(200);
          RECIPIENT VARCHAR2(250);
          CCRECIPIENT VARCHAR2(250);
          BCCRECIPIENT VARCHAR2(250);
          SUBJECT VARCHAR2(250);
          BODY VARCHAR2(250);
          ERRORMESSAGE VARCHAR2(250);
          ATTACHMENTS SENDMAILJPKG.ATTACHMENTS_LIST;
          v_Return NUMBER;
          BEGIN
           
            dbms_java.grant_permission( 'BSS', 'SYS:java.io.FilePermission', '/export/home/ntusers/anchisai/plsql_out/RETAIL_USAGE_s.'|| TO_CHAR(SYSDATE-1,'YYYYMMDD') ||'.CSV', 'read' );
            dbms_java.grant_permission( 'BSS', 'SYS:java.io.FilePermission', '/export/home/ntusers/anchisai/plsql_out/RETAIL_DEVICES_s.'|| TO_CHAR(SYSDATE-1,'YYYYMMDD') ||'.CSV', 'read' );
            commit;
            SMTPSERVERNAME := '127.0.0.1';
            SENDER := 'be@rabbit.co.th';
            RECIPIENT := 'benjamast@rabbit.co.th';
            CCRECIPIENT := 'be@rabbit.co.th';
            BCCRECIPIENT := NULL;
            SUBJECT := 'Daily No. of device and usage at retail s.' || to_char(sysdate-1, 'YYYYMMDD') ;
            BODY := 'Dear Team,' || CHR(13) || CHR(13) ||
        
                        '      Daily No. of device and usage at retail on s.' ||to_char(sysdate-1, 'YYYYMMDD') || ' as attached.' || CHR(13) || CHR(13) ||
        
                      'Best Regards,'|| CHR(13) 
                      ;
            -- Modify the code to initialize the variable
            ATTACHMENTS := SENDMAILJPKG.ATTACHMENTS_LIST('/export/home/ntusers/anchisai/plsql_out/RETAIL_USAGE_s.'|| TO_CHAR(SYSDATE-1,'YYYYMMDD') ||'.CSV',
            '/export/home/ntusers/anchisai/plsql_out/RETAIL_DEVICES_s.'|| TO_CHAR(SYSDATE-1,'YYYYMMDD') ||'.CSV');
            v_Return := SENDMAILJPKG.SENDMAIL(
              SMTPSERVERNAME => SMTPSERVERNAME,
              SENDER => SENDER,
              RECIPIENT => RECIPIENT,
              CCRECIPIENT => CCRECIPIENT,
              BCCRECIPIENT => BCCRECIPIENT,
              SUBJECT => SUBJECT,
              BODY => BODY,
              ERRORMESSAGE => ERRORMESSAGE,
              ATTACHMENTS => ATTACHMENTS
            );
            
          END;
      
END DAILY_FILE_SUPPORT_RC;

PROCEDURE DAILY_USAGE_ADD_VALUE_BY_RANGE
    AS 
    
    BEGIN
  
     declare
    fHandle UTL_FILE.FILE_TYPE;
    SETTLEMENT_DATE			DATE;
    RECONCILIATION_DATE		DATE;
    SOURCE_PARTICIPANT_ID	NUMBER;
    SOURCE_NAME				VARCHAR2(70);
    SERVICE_PARTICIPANT_ID	NUMBER;
    SERVICE_NAME			VARCHAR2(70);
    PASSENGER_TYPE			NUMBER;
    CARD_TYPE				VARCHAR2(40);
    Volume_0				NUMBER;
    Value_of_0				NUMBER;
    Volum_of_1t100			NUMBER;
    Value_of_1t100			NUMBER;
    Volum_of_101t200		NUMBER;
    Value_of_101t200		NUMBER;
    Volum_of_201t300		NUMBER;
    Value_of_201t300		NUMBER;
    Volum_of_301t400		NUMBER;
    Value_of_301t400		NUMBER;
    Volum_of_401t500		NUMBER;
    Value_of_401t500		NUMBER;
    Volum_of_m500			NUMBER;
    Value_of_m500			NUMBER;
    v_log varchar2(400);
    
    cursor c_ubrs is
    select SETTLEMENT_DATE, RECONCILIATION_DATE, SOURCE_PARTICIPANT_ID, SOURCE_NAME, SERVICE_PARTICIPANT_ID, SERVICE_NAME, PASSENGER_TYPE, 
    CARD_TYPE, "Volume = 0", "Value of = 0", "Volum of 1-100", "Value of 1-100", "Volum of 101-200", "Value of 101-200", "Volum of 201-300", 
    "Value of 201-300", "Volum of 301-400", "Value of 301-400", "Volum of 401-500", "Value of 401-500", "Volum of > 500", "Value of > 500"
    from bss.usage_by_r_sum WHERE settlement_date >= trunc(sysdate - 5);
    
    begin  
      fHandle := UTL_FILE.FOPEN('TON3', 'USAGE_BY_RANGED_SUM_' || to_char(sysdate-1, 'yyyymmdd') || '.csv' , 'w');
      v_log := 'SETTLEMENT_DATE,RECONCILIATION_DATE,SOURCE_PARTICIPANT_ID,SOURCE_NAME,SERVICE_PARTICIPANT_ID,SERVICE_NAME,PASSENGER_TYPE,CARD_TYPE,Volume = 0,Value of = 0,Volum of 1-100,Value of 1-100,Volum of 101-200,Value of 101-200,Volum of 201-300,Value of 201-300,Volum of 301-400,Value of 301-400,Volum of 401-500,Value of 401-500,Volum of > 500,Value of > 500,';
      UTL_FILE.PUT_LINE(fHandle, v_log);
      open c_ubrs;
      loop
        fetch c_ubrs
          into SETTLEMENT_DATE, RECONCILIATION_DATE, SOURCE_PARTICIPANT_ID, SOURCE_NAME, SERVICE_PARTICIPANT_ID, SERVICE_NAME, PASSENGER_TYPE, 
          CARD_TYPE, Volume_0, Value_of_0, Volum_of_1t100, Value_of_1t100, Volum_of_101t200, Value_of_101t200, Volum_of_201t300, Value_of_201t300, 
          Volum_of_301t400, Value_of_301t400, Volum_of_401t500, Value_of_401t500, Volum_of_m500, Value_of_m500;
        EXIT WHEN c_ubrs%NOTFOUND;
        v_log := '"'||SETTLEMENT_DATE||'","'||RECONCILIATION_DATE||'","'||SOURCE_PARTICIPANT_ID||'","'||SOURCE_NAME||'","'||SERVICE_PARTICIPANT_ID||'","'||SERVICE_NAME||'","'||PASSENGER_TYPE||'","'||CARD_TYPE||'","'||Volume_0||'","'||Value_of_0||'","'||Volum_of_1t100||'","'||Value_of_1t100||'","'||Volum_of_101t200||'","'||Value_of_101t200||'","'||Volum_of_201t300||'","'||Value_of_201t300||'","'||Volum_of_301t400||'","'||Value_of_301t400||'","'||Volum_of_401t500||'","'||Value_of_401t500||'","'||Volum_of_m500||'","'||Value_of_m500||'",';
        UTL_FILE.PUT_LINE(fHandle, v_log);
        UTL_FILE.FFLUSH(fHandle);
      end loop;
      close c_ubrs;
      UTL_FILE.FCLOSE(fHandle);
    end;
    
     declare
    fHandle UTL_FILE.FILE_TYPE;
    SETTLEMENT_DATE				DATE;
    RECONCILIATION_DATE			DATE;
    SOURCE_PARTICIPANT_ID		NUMBER;
    SOURCE_SP_NAME				VARCHAR2(40);
    TXN_TYPE            VARCHAR2(50);
    Volume_of_0					NUMBER;
    Volum_of_1t300				NUMBER;
    Value_of_1t300				NUMBER;
    Volum_of_301t500			NUMBER;
    Value_of_301t500			NUMBER;
    Volum_of_501t1000			NUMBER;
    Value_of_501t1000			NUMBER;
    Volum_of_1001t9999			NUMBER;
    Value_of_1001t9999			NUMBER;
    Volum_of_m10000				NUMBER;
    Value_of_m10000				NUMBER;
    PAYMENT1              VARCHAR2(50);
    PAYMENT1_VALUE				NUMBER;
    PAYMENT2              VARCHAR2(50);
    PAYMENT2_VLAUE				NUMBER;
    v_log varchar2(1000);
    
    cursor c_avr is
    select SETTLEMENT_DATE, RECONCILIATION_DATE, SOURCE_PARTICIPANT_ID, SOURCE_SP_NAME, TXN_TYPE, "Volume of 0", "Volum of 0.01-299", "Value of 0.01-299",
    "Volum of 300-499", "Value of 300-499", "Volum of 500-999", "Value of 500-999", "Volum of 1000-9999", "Value of 1000-9999", "Volum of >= 10000", "Value of >= 10000",
    PAYMENT1, PAYMENT1_VALUE, PAYMENT2, PAYMENT2_VLAUE
    from bss.add_value_by_pr_sum WHERE settlement_date >= trunc(sysdate - 5);
    
    begin  
      fHandle := UTL_FILE.FOPEN('TON3', 'ADD_VALUE_BY_RANGE_' || to_char(sysdate-1, 'yyyymmdd') || '.csv' , 'w');
      v_log := 'SETTLEMENT_DATE,RECONCILIATION_DATE,SOURCE_PARTICIPANT_ID,SOURCE_SP_NAME,TXN_TYPE,Volume of 0,Volum of 0.01-299,Value of 0.01-299,Volum of 300-499,Value of 300-499,Volum of 500-999,Value of 500-999,Volum of 1000-9999,Value of 1000-9999,Volum of >= 10000,Value of >= 10000,PAYMENT1,PAYMENT1_VALUE,PAYMENT2,PAYMENT2_VLAUE,';
      UTL_FILE.PUT_LINE(fHandle, v_log);
      open c_avr;
      loop
        fetch c_avr
          into SETTLEMENT_DATE, RECONCILIATION_DATE, SOURCE_PARTICIPANT_ID, SOURCE_SP_NAME, TXN_TYPE, Volume_of_0, Volum_of_1t300, Value_of_1t300, 
          Volum_of_301t500, Value_of_301t500, Volum_of_501t1000, Value_of_501t1000, Volum_of_1001t9999, Value_of_1001t9999, Volum_of_m10000, Value_of_m10000, 
          PAYMENT1, PAYMENT1_VALUE, PAYMENT2, PAYMENT2_VLAUE;
        EXIT WHEN c_avr%NOTFOUND;
        v_log := '"'||SETTLEMENT_DATE||'","'||RECONCILIATION_DATE||'","'||SOURCE_PARTICIPANT_ID||'","'||SOURCE_SP_NAME||'","'||TXN_TYPE||'","'||Volume_of_0||'","'||Volum_of_1t300||'","'||Value_of_1t300||'","'||Volum_of_301t500||'","'||Value_of_301t500||'","'||Volum_of_501t1000||'","'||Value_of_501t1000||'","'||Volum_of_1001t9999||'","'||Value_of_1001t9999||'","'||Volum_of_m10000||'","'||Value_of_m10000||'","'||PAYMENT1||'","'||PAYMENT1_VALUE||'","'||PAYMENT2||'","'||PAYMENT2_VLAUE||'",';
        UTL_FILE.PUT_LINE(fHandle, v_log);
        UTL_FILE.FFLUSH(fHandle);
      end loop;
      close c_avr;
      UTL_FILE.FCLOSE(fHandle);
    end;

  declare
    fHandle UTL_FILE.FILE_TYPE;
    SETTLEMENT_DATE VARCHAR2(50);
    RECONCILIATION_DATE VARCHAR2(50);
    CLAIM_LIMIT_1_DATE VARCHAR2(50);
    BUSINESS_DATE VARCHAR2(50);
    CARD_SERIAL_NUMBER NUMBER;
    LOWER_PTSN NUMBER;
    UPPER_PTSN NUMBER;
    PTSN NUMBER;
    TRANS VARCHAR2(30);
    GAPS NUMBER;
    EXCEPTION_LIST VARCHAR2(50);
    WRITE_OFF_POS NUMBER;
    RECOVERED NUMBER;
    WRITE_OFF_NEG NUMBER;
    UD_TYPE NUMBER;
    UD_SUBTYPE NUMBER;
    IS_GOOD_FOR_SETTLED VARCHAR2(1);
    IS_SEND_TO_ISSUER VARCHAR2(1);
    IS_UPDATE_ACCOUNT VARCHAR2(1);
    SERVICE_PARTICIPANT_ID NUMBER;
    DESTINATION_PARTICIPANT_ID NUMBER;
    v_log varchar2(400);
    
    cursor c_ubrs is
    SELECT TO_CHAR(SETTLEMENT_DATE,'DD-MON-YY HH.MI.SS AM'), TO_CHAR(RECONCILIATION_DATE,'DD-MON-YY HH.MI.SS AM'), TO_CHAR(CLAIM_LIMIT_1_DATE,'DD-MON-YY HH.MI.SS AM'), TO_CHAR(BUSINESS_DATE,'DD-MON-YY HH.MI.SS AM'),
    CARD_SERIAL_NUMBER, LOWER_PTSN, UPPER_PTSN, PTSN, TRANS, GAPS, EXCEPTION_LIST, WRITE_OFF_POS, RECOVERED, WRITE_OFF_NEG, UD_TYPE, UD_SUBTYPE, IS_GOOD_FOR_SETTLED, IS_SEND_TO_ISSUER, IS_UPDATE_ACCOUNT, SERVICE_PARTICIPANT_ID, DESTINATION_PARTICIPANT_ID
    FROM BSS.GAP_ELIMINATE_BY_CARD
    WHERE Settlement_date >= trunc(SYSDATE-1);
    
    begin  
      fHandle := UTL_FILE.FOPEN('TON3', 'GAP_ELIMINATION_BY_CARD_' || to_char(sysdate-1, 'yyyymmdd') || '.csv' , 'w');
      v_log := 'SETTLEMENT_DATE,RECONCILIATION_DATE,CLAIM_LIMIT_1_DATE,BUSINESS_DATE,CARD_SERIAL_NUMBER,LOWER_PTSN,UPPER_PTSN,PTSN,TRANS,GAPS,EXCEPTION_LIST,WRITE_OFF_POS,RECOVERED,WRITE_OFF_NEG,UD_TYPE,UD_SUBTYPE,IS_GOOD_FOR_SETTLED,IS_SEND_TO_ISSUER,IS_UPDATE_ACCOUNT,SERVICE_PARTICIPANT_ID,DESTINATION_PARTICIPANT_ID';
      UTL_FILE.PUT_LINE(fHandle, v_log);
      open c_ubrs;
      loop
        fetch c_ubrs
          into SETTLEMENT_DATE, RECONCILIATION_DATE, CLAIM_LIMIT_1_DATE, BUSINESS_DATE, CARD_SERIAL_NUMBER, LOWER_PTSN, UPPER_PTSN, PTSN, TRANS, GAPS, EXCEPTION_LIST, WRITE_OFF_POS, RECOVERED, WRITE_OFF_NEG, UD_TYPE, UD_SUBTYPE, IS_GOOD_FOR_SETTLED, IS_SEND_TO_ISSUER, IS_UPDATE_ACCOUNT, SERVICE_PARTICIPANT_ID, DESTINATION_PARTICIPANT_ID;
        EXIT WHEN c_ubrs%NOTFOUND;
        v_log := '"'||SETTLEMENT_DATE||'","'||RECONCILIATION_DATE||'","'||CLAIM_LIMIT_1_DATE||'","'||BUSINESS_DATE||'","'||CARD_SERIAL_NUMBER||'","'||LOWER_PTSN||'","'||UPPER_PTSN||'","'||PTSN||'","'||TRANS||'","'||GAPS||'","'||EXCEPTION_LIST||'","'||WRITE_OFF_POS||'","'||RECOVERED||'","'||WRITE_OFF_NEG||'","'||UD_TYPE||'","'||UD_SUBTYPE||'","'||IS_GOOD_FOR_SETTLED||'","'||IS_SEND_TO_ISSUER||'","'||IS_UPDATE_ACCOUNT||'","'||SERVICE_PARTICIPANT_ID||'","'||DESTINATION_PARTICIPANT_ID||'"';
        UTL_FILE.PUT_LINE(fHandle, v_log);
        UTL_FILE.FFLUSH(fHandle);
      end loop;
      close c_ubrs;
      UTL_FILE.FCLOSE(fHandle);
    end;

    declare
    fHandle UTL_FILE.FILE_TYPE;
    SETTLEMENT_DATE				VARCHAR2(50);
    RECONCILIATION_DATE			VARCHAR2(50);
    CLAIM_LIMIT_1_DATE			VARCHAR2(50);
    BUSINESS_DATE				VARCHAR2(50);
    CARD_SERIAL_NUMBER			NUMBER;
    PTSN						NUMBER;
    LAV_PTSN					NUMBER;
    LAV_DATE_TIME				VARCHAR2(50);
    LAV_LOCATION_CODE			NUMBER;
    LAV_SAM_ID					NUMBER;
    EXCEPTION_LIST				VARCHAR2(70);
    RECOVERED					NUMBER;
    IS_GOOD_FOR_SETTLED			VARCHAR2(2);
    IS_SEND_TO_ISSUER			VARCHAR2(2);
    IS_UPDATE_ACCOUNT			VARCHAR2(2);
    SERVICE_PARTICIPANT_ID		NUMBER;
    DESTINATION_PARTICIPANT_ID	NUMBER;
    v_log varchar2(350);
    
    cursor c_grc is
    select  TO_CHAR(SETTLEMENT_DATE,'DD-MON-YY HH.MI.SS AM'), TO_CHAR(RECONCILIATION_DATE,'DD-MON-YY HH.MI.SS AM'), TO_CHAR(CLAIM_LIMIT_1_DATE,'DD-MON-YY HH.MI.SS AM'), TO_CHAR(BUSINESS_DATE,'DD-MON-YY HH.MI.SS AM'), 
    CARD_SERIAL_NUMBER, PTSN, LAV_PTSN, TO_CHAR(LAV_DATE_TIME,'DD-MON-YY HH.MI.SS AM'), 
    LAV_LOCATION_CODE, LAV_SAM_ID, EXCEPTION_LIST, RECOVERED, IS_GOOD_FOR_SETTLED, IS_SEND_TO_ISSUER, IS_UPDATE_ACCOUNT, SERVICE_PARTICIPANT_ID,
    DESTINATION_PARTICIPANT_ID
    from bss.GAP_R_BY_CARD WHERE settlement_date >= trunc(sysdate - 5);
    
    begin  
      fHandle := UTL_FILE.FOPEN('TON3', 'GAP_RECOVER_BY_CARD_' || to_char(sysdate-1, 'yyyymmdd') || '.csv' , 'w');
      v_log := 'SETTLEMENT_DATE,RECONCILIATION_DATE,CLAIM_LIMIT_1_DATE,BUSINESS_DATE,CARD_SERIAL_NUMBER,PTSN,LAV_PTSN,LAV_DATE_TIME,LAV_LOCATION_CODE,LAV_SAM_ID,EXCEPTION_LIST,RECOVERED,IS_GOOD_FOR_SETTLED,IS_SEND_TO_ISSUER,IS_UPDATE_ACCOUNT,SERVICE_PARTICIPANT_ID,DESTINATION_PARTICIPANT_ID,';
      UTL_FILE.PUT_LINE(fHandle, v_log);
      open c_grc;
      loop
        fetch c_grc
          into SETTLEMENT_DATE, RECONCILIATION_DATE, CLAIM_LIMIT_1_DATE, BUSINESS_DATE, CARD_SERIAL_NUMBER, PTSN, LAV_PTSN, LAV_DATE_TIME, 
          LAV_LOCATION_CODE, LAV_SAM_ID, EXCEPTION_LIST, RECOVERED, IS_GOOD_FOR_SETTLED, IS_SEND_TO_ISSUER, IS_UPDATE_ACCOUNT, 
          SERVICE_PARTICIPANT_ID, DESTINATION_PARTICIPANT_ID;
        EXIT WHEN c_grc%NOTFOUND;
        v_log := '"'||SETTLEMENT_DATE||'","'||RECONCILIATION_DATE||'","'||CLAIM_LIMIT_1_DATE||'","'||BUSINESS_DATE||'","'||CARD_SERIAL_NUMBER||'","'||PTSN||'","'||LAV_PTSN||'","'||LAV_DATE_TIME||'","'||LAV_LOCATION_CODE||'","'||LAV_SAM_ID||'","'||EXCEPTION_LIST||'","'||RECOVERED||'","'||IS_GOOD_FOR_SETTLED||'","'||IS_SEND_TO_ISSUER||'","'||IS_UPDATE_ACCOUNT||'","'||SERVICE_PARTICIPANT_ID||'","'||DESTINATION_PARTICIPANT_ID||'",';
        UTL_FILE.PUT_LINE(fHandle, v_log);
        UTL_FILE.FFLUSH(fHandle);
      end loop;
      close c_grc;
      UTL_FILE.FCLOSE(fHandle);
    end;
    
     DECLARE
          SMTPSERVERNAME VARCHAR2(200);
          SENDER VARCHAR2(200);
          RECIPIENT VARCHAR2(250);
          CCRECIPIENT VARCHAR2(250);
          BCCRECIPIENT VARCHAR2(250);
          SUBJECT VARCHAR2(250);
          BODY VARCHAR2(250);
          ERRORMESSAGE VARCHAR2(250);
          ATTACHMENTS SENDMAILJPKG.ATTACHMENTS_LIST;
          v_Return NUMBER;
          BEGIN
           
            dbms_java.grant_permission( 'BSS', 'SYS:java.io.FilePermission', '/export/home/ntusers/tanakritp/PL_SQL/Tanakrit_process(Export_Data_RC)/ADD_VALUE_BY_RANGE_' || to_char(sysdate-1, 'yyyymmdd') || '.csv', 'read' );
            dbms_java.grant_permission( 'BSS', 'SYS:java.io.FilePermission', '/export/home/ntusers/tanakritp/PL_SQL/Tanakrit_process(Export_Data_RC)/USAGE_BY_RANGED_SUM_' || to_char(sysdate-1, 'yyyymmdd') || '.csv', 'read' );
            dbms_java.grant_permission( 'BSS', 'SYS:java.io.FilePermission', '/export/home/ntusers/tanakritp/PL_SQL/Tanakrit_process(Export_Data_RC)/GAP_RECOVER_BY_CARD_' || to_char(sysdate-1, 'yyyymmdd') || '.csv', 'read' );
            dbms_java.grant_permission( 'BSS', 'SYS:java.io.FilePermission', '/export/home/ntusers/tanakritp/PL_SQL/Tanakrit_process(Export_Data_RC)/GAP_ELIMINATION_BY_CARD_' || to_char(sysdate-1, 'yyyymmdd') || '.csv', 'read' );

            commit;
            SMTPSERVERNAME := '127.0.0.1';
            SENDER := 'be@rabbit.co.th';
            RECIPIENT := 'rc@rabbit.co.th';
            CCRECIPIENT := 'be@rabbit.co.th';
            BCCRECIPIENT := NULL;
            SUBJECT := 'Daily Add value and Usage by Ranged Sum s.' || to_char(sysdate-1, 'YYYYMMDD') ;
            BODY := 'Dear RC,' || CHR(13) || CHR(13) ||
        
                        '      Daily Add value and Usage by Ranged Sum s.' ||to_char(sysdate-1, 'YYYYMMDD') || ' as attached.' || CHR(13) || CHR(13) ||
        
                      'Best Regards,'|| CHR(13) 
                      ;
            -- Modify the code to initialize the variable
            ATTACHMENTS := SENDMAILJPKG.ATTACHMENTS_LIST(
            '/export/home/ntusers/tanakritp/PL_SQL/Tanakrit_process(Export_Data_RC)/ADD_VALUE_BY_RANGE_' || to_char(sysdate-1, 'yyyymmdd') || '.csv',
            '/export/home/ntusers/tanakritp/PL_SQL/Tanakrit_process(Export_Data_RC)/USAGE_BY_RANGED_SUM_' || to_char(sysdate-1, 'yyyymmdd') || '.csv',
            '/export/home/ntusers/tanakritp/PL_SQL/Tanakrit_process(Export_Data_RC)/GAP_RECOVER_BY_CARD_' || to_char(sysdate-1, 'yyyymmdd') || '.csv',
            '/export/home/ntusers/tanakritp/PL_SQL/Tanakrit_process(Export_Data_RC)/GAP_ELIMINATION_BY_CARD_' || to_char(sysdate-1, 'yyyymmdd') || '.csv');

            v_Return := SENDMAILJPKG.SENDMAIL(
              SMTPSERVERNAME => SMTPSERVERNAME,
              SENDER => SENDER,
              RECIPIENT => RECIPIENT,
              CCRECIPIENT => CCRECIPIENT,
              BCCRECIPIENT => BCCRECIPIENT,
              SUBJECT => SUBJECT,
              BODY => BODY,
              ERRORMESSAGE => ERRORMESSAGE,
              ATTACHMENTS => ATTACHMENTS
            );
            
          END;
           
END DAILY_USAGE_ADD_VALUE_BY_RANGE;

function              FileExists(
  p_DirName in varchar2,     -- schema object name
  p_FileName in varchar2
) return number
is
  l_fexists boolean;
  l_flen   number;
  l_bsize  number;
  l_res    number(1);
begin
  l_res := 0;
  utl_file.fgetattr(upper(p_DirName), p_FileName, l_fexists, l_flen, l_bsize);
  if l_fexists
  then
    l_res := 1;
  end if;  
  return l_res;
end;

 PROCEDURE DAILY_CHK_DEVICE_FOR_SP
    AS 

    BEGIN
          
           DECLARE
        
          fhandle utl_file.file_type;
          v_date VARCHAR2(11);
          TYPE gencurtyp IS REF CURSOR;
              detail gencurtyp;
              v_log  VARCHAR2(1000);
              v_header_rec VARCHAR2(1000);
             
              v_EQUIPMENT_ID VARCHAR2(50);
              v_EQUIPMENT_NO VARCHAR2(50);
              v_LOCATION_CODE number;
              v_SERVICE_PROVIDER_ID  number;
              v_SAM_ID VARCHAR2(50);
              v_LOCATION_TYPE number;
              v_START_DATE_TIME VARCHAR2(50);
              v_END_DATE_TIME VARCHAR2(50);
              v_STATUS  number;
              v_DEVICE_TYPE number;
              v_BUSINESS_FUNCTION number;
              v_ADD_VALUE number;
              v_OWNER_ID number;
              v_ACQUIRER_ID number;
              v_SECURITY_KEY_ID VARCHAR2(50);
              v_LAST_USED_TIME date;
              v_APPLICATION_MAJOR VARCHAR2(100);
              v_APPLICATION_MINOR VARCHAR2(100);
              
                            

            BEGIN
              ----get settlement_date ----
              SELECT to_char(SYSDATE-1,'DD-MON-YYYY')
              INTO v_date
              FROM dual;
            ---------------------------
            fhandle :=utl_file.fopen('EX_BE','DAILY_CHK_DEVICE_FOR_SP_s.'|| v_date || '.csv','w');--Opening a file
            -------------- HEADER ----------------
            SELECT 'EQUIPMENT_ID,EQUIPMENT_NO,LOCATION_CODE,SERVICE_PROVIDER_ID,SAM_ID,LOCATION_TYPE,START_DATE_TIME,END_DATE_TIME,STATUS,DEVICE_TYPE,BUSINESS_FUNCTION,ADD_VALUE,OWNER_ID,ACQUIRER_ID,SECURITY_KEY_ID,LAST_USED_TIME,APPLICATION_MAJOR,APPLICATION_MINOR' AS HEADER
            INTO v_header_rec
            FROM dual ;
            --------------END HEADER ----------------
            --------------WRITE HEADER---------------
            v_log := v_header_rec ||chr(13);
            utl_file.put_line(fhandle, v_log);
            -----------------------------------------
            OPEN detail FOR 
            
            select '0x' || LPAD(trim(to_char(de.device_id, 'XXXXXXXX')),8,'0') as EQUIPMENT_ID, 
            de.EQUIPMENT_NO,to_number(substr(to_char(de.location,'XXXXXXXX'),-6,6),'XXXXXXXX') as LOCATION_CODE,
            de.PARTICIPANT_ID as SERVICE_PROVIDER_ID,'0x' || LPAD(trim(to_char(de.sam_id, 'XXXXXXXX')),8,'0') as SAM_ID,
            '15' as LOCATION_TYPE,'19700101T070000' as START_DATE_TIME,'20380101T070000' as END_DATE_TIME,
            de.STATUS,de.DEVICE_TYPE,de.PAYMENT as BUSINESS_FUNCTION,ADD_VALUE,de.OWNER_ID,de.ACQUIRER_ID,'UNKNOWN' as SECURITY_KEY_ID,dv.LAST_USED_TIME
            ,DE.APPLICATION_MAJOR,DE.APPLICATION_MINOR
            from DEVICE.DEVICE_STATUS de
            left join DEVICE.DV_DEVICE_STATUS dv on (de.DEVICE_ID = dv.DEVICE_ID) and (de.PARTICIPANT_ID = dv.PARTICIPANT_ID) and (de.LOCATION = dv.LOCATION)
            WHERE  de.STATUS        = 5
            AND EXISTS
            (SELECT DEVICE_ID FROM DEVICE.DEVICE_STATUS B
            WHERE --ACQUIRER_ID = 11
            PARTICIPANT_ID not in (1,4,88,89,90,91)
            AND STATUS        = 5
            AND B.DEVICE_ID   = de.DEVICE_ID
            GROUP BY DEVICE_ID
            HAVING COUNT(*) > 1
            )
            ORDER by de.DEVICE_ID
            ; 
                              
            loop
              fetch detail
              INTO 
              v_EQUIPMENT_ID ,
              v_EQUIPMENT_NO ,
              v_LOCATION_CODE ,
              v_SERVICE_PROVIDER_ID ,
              v_SAM_ID ,
              v_LOCATION_TYPE ,
              v_START_DATE_TIME ,
              v_END_DATE_TIME ,
              v_STATUS ,
              v_DEVICE_TYPE ,
              v_BUSINESS_FUNCTION ,
              v_ADD_VALUE ,
              v_OWNER_ID ,
              v_ACQUIRER_ID,
              v_SECURITY_KEY_ID ,
              v_LAST_USED_TIME ,
              v_APPLICATION_MAJOR ,
              v_APPLICATION_MINOR ;

              
              exit
            WHEN detail%notfound;
             
              v_log := v_EQUIPMENT_ID|| ',' ||v_EQUIPMENT_NO|| ',' ||v_LOCATION_CODE|| ',' ||v_SERVICE_PROVIDER_ID|| ',' ||v_SAM_ID|| ',' ||v_LOCATION_TYPE|| ',' ||v_START_DATE_TIME|| ',' ||v_END_DATE_TIME|| ',' ||v_STATUS|| ',' ||v_DEVICE_TYPE|| ',' ||v_BUSINESS_FUNCTION|| ',' ||v_ADD_VALUE|| ',' ||v_OWNER_ID|| ',' ||v_ACQUIRER_ID|| ',' ||v_SECURITY_KEY_ID|| ',' ||v_LAST_USED_TIME||',' ||v_APPLICATION_MAJOR||',' ||v_APPLICATION_MINOR||chr(13);
              
              utl_file.put_line(fhandle, v_log);
              utl_file.fflush(fhandle);
              
            END loop ;
            CLOSE detail;

            utl_file.fclose(fhandle);
          END;
          
         --send mail--
           DECLARE
          smtpservername VARCHAR2(200);
          sender VARCHAR2(200);
          recipient VARCHAR2(250);
          ccrecipient VARCHAR2(250);
          bccrecipient VARCHAR2(250);
          subject VARCHAR2(250);
          BODY VARCHAR2(250);
          errormessage VARCHAR2(250);
          attachments sendmailjpkg.attachments_list;
          v_return NUMBER;
          v_date date;
         
          BEGIN
          
            SELECT to_char(SYSDATE-1,'dd-MON-yyyy')
              INTO v_date
              FROM dual;
           
            dbms_java.grant_permission( 'BSS', 'SYS:java.io.FilePermission', '/export/home/ntusers/anchisai/EX_BE/DAILY_CHK_DEVICE_FOR_SP_s.'|| to_char(SYSDATE-1,'DD-MON-YYYY') || '.csv', 'read' );
            COMMIT;
            smtpservername := '127.0.0.1';
            sender := 'be@rabbit.co.th';
            recipient :='SPsupport@rabbit.co.th';
            ccrecipient := 'be@rabbit.co.th';
            bccrecipient := NULL;
            subject := 'DAILY_CHK_DEVICE_FOR_SP_s.' || to_char(SYSDATE-1, 'YYYYMMDD') ;
            BODY := 'Dear SP,' || chr(13) || chr(13) ||
        
                        '    Daily Check Device s.' || to_char(SYSDATE-1, 'YYYYMMDD') || ' as attached.' || chr(13) || chr(13) ||
        
                      'Best Regards,'|| chr(13) 
                      ;
            -- Modify the code to initialize the variable
            attachments := sendmailjpkg.attachments_list('/export/home/ntusers/anchisai/EX_BE/DAILY_CHK_DEVICE_FOR_SP_s.'|| to_char(SYSDATE-1,'DD-MON-YYYY') || '.csv');
            v_return := sendmailjpkg.sendmail(
              smtpservername => smtpservername,
              sender => sender,
              recipient => recipient,
              ccrecipient => ccrecipient,
              bccrecipient => bccrecipient,
              subject => subject,
              BODY => BODY,
              errormessage => errormessage,
              attachments => attachments
            );
            
          END; 
END DAILY_CHK_DEVICE_FOR_SP;

 PROCEDURE  CCH_Txn_with_Deleted_Blacklist
    AS 

    BEGIN
          
           DECLARE
        
          fhandle utl_file.file_type;
          v_date VARCHAR2(11);
          TYPE gencurtyp IS REF CURSOR;
              detail gencurtyp;
              v_log  VARCHAR2(1000);
              v_header_rec VARCHAR2(1000);
             
              v_card_serial_number number;
              v_bss_txn_type VARCHAR2(50);
              v_exception_list VARCHAR2(50);
              v_transaction_value number;
              v_loc_txn_date_time date;
              v_reconciliation_date date;
              v_settlement_date date;
              v_location_name VARCHAR2(100);
              v_device_id number;
              v_src number;
             
              
              
              

            BEGIN
              ----get settlement_date ----
              SELECT to_char(SYSDATE-1,'DD-MON-YYYY')
              INTO v_date
              FROM dual;
            ---------------------------
            fhandle :=utl_file.fopen('EX_BE','CCH_Txn_with_Deleted_Blacklist_s.'|| v_date || '.csv','w');--Opening a file
            -------------- HEADER ----------------
            SELECT 'CARD_SERIAL_NUMBER,BSS_TXN_TYPE,EXCEPTION_LIST,TRANSACTION_VALUE,LOC_TXN_DATE_TIME,RECONCILIATION_DATE,SETTLEMENT_DATE,LOCATION_NAME,DEVICE_ID,SRC' AS HEADER
            INTO v_header_rec
            FROM dual ;
            --------------END HEADER ----------------
            --------------WRITE HEADER---------------
            v_log := v_header_rec ||chr(13);
            utl_file.put_line(fhandle, v_log);
            -----------------------------------------
            OPEN detail FOR 
            
   SELECT 
          '88' || lpad(CARD_SERIAL_NUMBER,9,'0') AS CARD_SERIAL_NUMBER,
          CUT_ALL.TXN_TYPE as BSS_TXN_TYPE,
          EXCEPTION_LIST,
          TRANSACTION_VALUE*0.01 as TRANSACTION_VALUE,
          to_date(RP_STD.TOLOCALTIME(TXN_DATE_TIME),'DD-MON-YY HH24:MI:SS') AS LOC_TXN_DATE_TIME,
          to_date(RECONCILIATION_DATE,'DD-MON-YY HH24:MI:SS') AS RECONCILIATION_DATE,
          to_date(SETTLEMENT_DATE,'DD-MON-YY HH24:MI:SS') AS SETTLEMENT_DATE, 
          L.location_name,
          CUT_ALL.DEVICE_ID,
          SOURCE_PARTICIPANT_ID AS SRC
          
          FROM
          (
            SELECT CARD_SERIAL_NUMBER,TRANSACTION_VALUE,PURSE_REMAINING_VALUE,REPORTS.BKK_INT_FUN.GETTRANSACTIONDESC (UD_TYPE,UD_SUBTYPE) AS TXN_TYPE
          ,A.EXCEPTION_LIST, A.UD_TYPE,A.UD_SUBTYPE,A.TXN_DATE_TIME,RECONCILIATION_DATE
          ,'CUT_PI_FINANCIAL' AS TABLE_NAME,SOURCE_PARTICIPANT_ID,SERVICE_PARTICIPANT_ID,DESTINATION_PARTICIPANT_ID,DEVICE_ID,device_location
          ,to_number(substr(to_char(device_location,'XXXXXXXX'),-6,6),'XXXXXXXX') as location_id_trf, DATA_VERSION
          ,SETTLEMENT_DATE,iss_txn_reflection,cch_txn_approved
          
          FROM CUT_PI_FINANCIAL A
          UNION ALL
          SELECT CARD_SERIAL_NUMBER,TRANSACTION_VALUE,PURSE_REMAINING_VALUE,REPORTS.BKK_INT_FUN.GETTRANSACTIONDESC (UD_TYPE,UD_SUBTYPE) AS TXN_TYPE
          ,A.EXCEPTION_LIST, A.UD_TYPE,A.UD_SUBTYPE,A.TXN_DATE_TIME,RECONCILIATION_DATE
          ,'CUT_PI_ENTRY' AS TABLE_NAME,SOURCE_PARTICIPANT_ID,SERVICE_PARTICIPANT_ID,DESTINATION_PARTICIPANT_ID,DEVICE_ID,device_location
          ,to_number(substr(to_char(device_location,'XXXXXXXX'),-6,6),'XXXXXXXX') as location_id_trf, DATA_VERSION
          ,SETTLEMENT_DATE,iss_txn_reflection,cch_txn_approved
          
          FROM CUT_PI_ENTRY A
          UNION ALL
          SELECT CARD_SERIAL_NUMBER,TRANSACTION_VALUE,PURSE_REMAINING_VALUE,REPORTS.BKK_INT_FUN.GETTRANSACTIONDESC (UD_TYPE,UD_SUBTYPE) AS TXN_TYPE
          ,A.EXCEPTION_LIST, A.UD_TYPE,A.UD_SUBTYPE,A.TXN_DATE_TIME,RECONCILIATION_DATE
          ,'CUT_PI_EXIT' AS TABLE_NAME,SOURCE_PARTICIPANT_ID,SERVICE_PARTICIPANT_ID,DESTINATION_PARTICIPANT_ID,DEVICE_ID,device_location
          ,to_number(substr(to_char(device_location,'XXXXXXXX'),-6,6),'XXXXXXXX') as location_id_trf, DATA_VERSION
          ,SETTLEMENT_DATE,iss_txn_reflection,cch_txn_approved
                         
          FROM CUT_PI_EXIT A

          ) cut_all
          left join SYSCD_LOCATION L on (to_number(substr(to_char(CUT_ALL.device_location,'XXXXXXXX'),-6,6),'XXXXXXXX')=L.location_code) and (CUT_ALL.source_participant_id=L.participant_id) and (CUT_ALL.DATA_VERSION=L.DATA_VERSION) and (L.location_type in (9,15,16,21))  
          left join DEVICE_STATUS on CUT_ALL.Device_ID=DEVICE_STATUS.Device_ID and CUT_ALL.SOURCE_PARTICIPANT_ID=DEVICE_STATUS.PARTICIPANT_ID
          left join SYSTEMCD.SYSCD_TXN T on (CUT_ALL.DATA_VERSION=T.DATA_VERSION) AND (CUT_ALL.UD_TYPE=T.TXN_TYPE) AND  (CUT_ALL.UD_SUBTYPE=T.TXN_SUBTYPE)
          where cut_all.iss_txn_reflection = 'N'
          and (ud_type,ud_subtype) not in ((3,71),(3,37),(1,10),(1,12),(4,51),(4,34),(1,39),(1,10),(3,26),(3,36))
          and   CARD_SERIAL_NUMBER in (
          select CARD_SERIAL_NUMBER from bss_reports.deleted_blacklist
          )
          and settlement_date = trunc(sysdate-1)

                        ; 
                              
            loop
              fetch detail
              INTO 
              v_card_serial_number,
              v_bss_txn_type,
              v_exception_list,
              v_transaction_value,
              v_loc_txn_date_time,
              v_reconciliation_date,
              v_settlement_date,
              v_location_name,
              v_device_id,
              v_src;
              
              

              
              exit
            WHEN detail%notfound;
             
              v_log := v_card_serial_number||','||v_bss_txn_type||',"'||v_exception_list||'",'||v_transaction_value||','||v_loc_txn_date_time||','||v_reconciliation_date||','||v_settlement_date||','||v_location_name||','||v_device_id||','||v_src || chr(13);
              
              utl_file.put_line(fhandle, v_log);
              utl_file.fflush(fhandle);
              
            END loop ;
            CLOSE detail;

            utl_file.fclose(fhandle);
          END;
          
         --send mail--
           DECLARE
          smtpservername VARCHAR2(200);
          sender VARCHAR2(200);
          recipient VARCHAR2(250);
          ccrecipient VARCHAR2(250);
          bccrecipient VARCHAR2(250);
          subject VARCHAR2(250);
          BODY VARCHAR2(250);
          errormessage VARCHAR2(250);
          attachments sendmailjpkg.attachments_list;
          v_return NUMBER;
          v_date date;
         
          BEGIN
          
            SELECT to_char(SYSDATE-1,'dd-MON-yyyy')
              INTO v_date
              FROM dual;
           
            dbms_java.grant_permission( 'BSS', 'SYS:java.io.FilePermission', '/export/home/ntusers/anchisai/EX_BE/CCH_Txn_with_Deleted_Blacklist_s.'|| to_char(SYSDATE-1,'DD-MON-YYYY') || '.csv', 'read' );
            COMMIT;
            smtpservername := '127.0.0.1';
            sender := 'be@rabbit.co.th';
            recipient := 'be@rabbit.co.th,hotline@rabbit.co.th';--'SP@rabbit.co.th,hotline@rabbit.co.th';
            --ccrecipient := 'be@rabbit.co.th';
            bccrecipient := NULL;
            subject := 'CCH_Transaction_with_Deleted_Blacklist s.' || to_char(SYSDATE-1, 'YYYYMMDD') ;
            BODY := 'Dear all,' || chr(13) || chr(13) ||
        
                        ' CCH_Transaction_with_Deleted_Blacklist s.' || to_char(SYSDATE-1, 'YYYYMMDD') || ' as attached.' || chr(13) || chr(13) ||
        
                      'Best Regards,'|| chr(13) 
                      ;
            -- Modify the code to initialize the variable
            attachments := sendmailjpkg.attachments_list('/export/home/ntusers/anchisai/EX_BE/CCH_Txn_with_Deleted_Blacklist_s.'|| to_char(SYSDATE-1,'DD-MON-YYYY') || '.csv');
            v_return := sendmailjpkg.sendmail(
              smtpservername => smtpservername,
              sender => sender,
              recipient => recipient,
              ccrecipient => ccrecipient,
              bccrecipient => bccrecipient,
              subject => subject,
              BODY => BODY,
              errormessage => errormessage,
              attachments => attachments
            );
            
          END; 
END  CCH_Txn_with_Deleted_Blacklist;

 PROCEDURE DAILY_CHK_DEVICE_BTS
    AS 

    BEGIN
          
           DECLARE
        
          fhandle utl_file.file_type;
          v_date VARCHAR2(11);
          TYPE gencurtyp IS REF CURSOR;
              detail gencurtyp;
              v_log  VARCHAR2(1000);
              v_header_rec VARCHAR2(1000);
             
              v_DATA_VERSION number;
              v_DEVICE_ID number;
              v_SOURCE_PARTICIPANT_ID number;
              v_DEVICE_LOCATION number;
              v_EQUIPMENT_NO VARCHAR2(50);
              v_RECONCILIATION_DATE date;
                         

            BEGIN
              ----get settlement_date ----
              SELECT to_char(SYSDATE-1,'DD-MON-YYYY')
              INTO v_date
              FROM dual;
            ---------------------------
            fhandle :=utl_file.fopen('EX_BE','DAILY_CHK_DEVICE_BTS_s.'|| v_date || '.csv','w');--Opening a file
            -------------- HEADER ----------------
            SELECT 'DATA_VERSION,DEVICE_ID,SOURCE_PARTICIPANT_ID,DEVICE_LOCATION,EQUIPMENT_NUMBER,RECONCILIATION_DATE' AS HEADER
            INTO v_header_rec
            FROM dual ;
            --------------END HEADER ----------------
            --------------WRITE HEADER---------------
            v_log := v_header_rec ||chr(13);
            utl_file.put_line(fhandle, v_log);
            -----------------------------------------
            OPEN detail FOR 
                
          select * from (
                  select DATA_VERSION,device_id,SOURCE_PARTICIPANT_ID
                  ,to_number(substr(to_char(device_location,'XXXXXXXX'),-6,6),'XXXXXXXX') as device_location,
                  equipment_number, max(RECONCILIATION_DATE) as RECONCILIATION_DATE from CUT.CUT_PI_FINANCIAL 
                  where SETTLEMENT_DATE BETWEEN TRUNC(SYSDATE-7) and TRUNC(SYSDATE-1)
                  group by equipment_number,SOURCE_PARTICIPANT_ID, device_location,device_id,DATA_VERSION
                  union all
                  
                          select DATA_VERSION,device_id,SOURCE_PARTICIPANT_ID,to_number(substr(to_char(device_location,'XXXXXXXX'),-6,6),'XXXXXXXX') as device_location,
                          equipment_number, max(RECONCILIATION_DATE) as RECONCILIATION_DATE from cut.cut_pi_entry 
                          where SETTLEMENT_DATE BETWEEN TRUNC(SYSDATE-7) and TRUNC(SYSDATE-1)
                          group by equipment_number,SOURCE_PARTICIPANT_ID, device_location,device_id,DATA_VERSION
                  union all
                  
                          select DATA_VERSION,device_id,SOURCE_PARTICIPANT_ID,to_number(substr(to_char(device_location,'XXXXXXXX'),-6,6),'XXXXXXXX') as device_location,
                          equipment_number, max(RECONCILIATION_DATE) as RECONCILIATION_DATE from cut.cut_pi_exit 
                          where SETTLEMENT_DATE BETWEEN TRUNC(SYSDATE-7) and TRUNC(SYSDATE-1)
                          group by equipment_number,SOURCE_PARTICIPANT_ID, device_location,device_id,DATA_VERSION
                  ) 
                  where equipment_number not in
                  
                  (
                     select equipment_number from CUT.CUT_PI_FINANCIAL 
                            where SETTLEMENT_DATE = TRUNC(SYSDATE) group by equipment_number
                  
                  union all
                  
                     select equipment_number from cut.cut_pi_entry 
                                where SETTLEMENT_DATE = TRUNC(SYSDATE) group by equipment_number
                  
                  union all
                  
                     select equipment_number from cut.cut_pi_exit 
                                where SETTLEMENT_DATE = TRUNC(SYSDATE) group by equipment_number
                  );
                              
            loop
              fetch detail
              INTO 
              v_DATA_VERSION ,
              v_DEVICE_ID ,
              v_SOURCE_PARTICIPANT_ID ,
              v_DEVICE_LOCATION ,
              v_EQUIPMENT_NO ,
              v_RECONCILIATION_DATE ;

              
              exit
            WHEN detail%notfound;
             
              v_log := v_DATA_VERSION||','||v_DEVICE_ID||','||v_SOURCE_PARTICIPANT_ID||','||v_DEVICE_LOCATION||','||v_EQUIPMENT_NO||','||v_RECONCILIATION_DATE||chr(13);
              
              utl_file.put_line(fhandle, v_log);
              utl_file.fflush(fhandle);
              
            END loop ;
            CLOSE detail;

            utl_file.fclose(fhandle);
          END;
          
         --send mail--
           DECLARE
          smtpservername VARCHAR2(200);
          sender VARCHAR2(200);
          recipient VARCHAR2(250);
          ccrecipient VARCHAR2(250);
          bccrecipient VARCHAR2(250);
          subject VARCHAR2(250);
          BODY VARCHAR2(250);
          errormessage VARCHAR2(250);
          attachments sendmailjpkg.attachments_list;
          v_return NUMBER;
          v_date date;
         
          BEGIN
          
            SELECT to_char(SYSDATE-1,'dd-MON-yyyy')
              INTO v_date
              FROM dual;
           
            dbms_java.grant_permission( 'BSS', 'SYS:java.io.FilePermission', '/export/home/ntusers/anchisai/EX_BE/DAILY_CHK_DEVICE_BTS_s.'|| to_char(SYSDATE-1,'DD-MON-YYYY') || '.csv', 'read' );
            COMMIT;
            smtpservername := '127.0.0.1';
            sender := 'be@rabbit.co.th';
            recipient := 'fe@rabbit.co.th';
            ccrecipient := 'be@rabbit.co.th';
            bccrecipient := NULL;
            subject := 'DAILY_CHK_DEVICE_BTS_s.' || to_char(SYSDATE-1, 'YYYYMMDD') ;
            BODY := 'Dear FE,' || chr(13) || chr(13) ||
        
                        '    Daily Check Device BTS s.' || to_char(SYSDATE-1, 'YYYYMMDD') || ' as attached.' || chr(13) || chr(13) ||
        
                      'Best Regards,'|| chr(13) 
                      ;
            -- Modify the code to initialize the variable
            attachments := sendmailjpkg.attachments_list('/export/home/ntusers/anchisai/EX_BE/DAILY_CHK_DEVICE_BTS_s.'|| to_char(SYSDATE-1,'DD-MON-YYYY') || '.csv');
            v_return := sendmailjpkg.sendmail(
              smtpservername => smtpservername,
              sender => sender,
              recipient => recipient,
              ccrecipient => ccrecipient,
              bccrecipient => bccrecipient,
              subject => subject,
              BODY => BODY,
              errormessage => errormessage,
              attachments => attachments
            );
            
          END; 
END DAILY_CHK_DEVICE_BTS;

 PROCEDURE DAILY_REMAINING_VALUE_OF_CARD 
    AS 

    BEGIN
          
           DECLARE
        
          fhandle utl_file.file_type;
          v_date VARCHAR2(11);
          TYPE gencurtyp IS REF CURSOR;
              detail gencurtyp;
              v_log  VARCHAR2(1000);
              v_header_rec VARCHAR2(1000);
             
              v_STATUS VARCHAR2(50);
              v_COUNT_CARD number;
              v_ACCOUNT_STATE number;
              v_DESCRIPTION VARCHAR2(50);
              v_SUM_RV_BAHT number;
                                       

            BEGIN
              ----get settlement_date ----
              SELECT to_char(SYSDATE-1,'DD-MON-YYYY')
              INTO v_date
              FROM dual;
            ---------------------------
            fhandle :=utl_file.fopen('EX_BE','DAILY_REMAINING_VALUE_OF_CARD_s.'|| v_date || '.csv','w');--Opening a file
            -------------- HEADER ----------------
            SELECT 'STATUS,COUNT_CARD,ACCOUNT_STATE,DESCRIPTION,SUM_RV_BAHT' AS HEADER
            INTO v_header_rec
            FROM dual ;
            --------------END HEADER ----------------
            --------------WRITE HEADER---------------
            v_log := v_header_rec ||chr(13);
            utl_file.put_line(fhandle, v_log);
            -----------------------------------------
            OPEN detail FOR 
            
       select ca.status as status,ca.COUNT_CARD as COUNT_CARD,ca.ACCOUNT_STATE as ACCOUNT_STATE ,sa.DESCRIPTION as DESCRIPTION,ca.SUM_RV as SUM_RV_BAHT from (
          select --CSC_SERIAL_NUMBER,REMAINING_VALUE,account_state 
          'RV_less_than_0' as status,count(CSC_SERIAL_NUMBER) as COUNT_CARD,ACCOUNT_STATE,sum(REMAINING_VALUE/100) as SUM_RV
          from product.product_account 
          where REMAINING_VALUE < 0
          group by ACCOUNT_STATE
          UNION all
          select --CSC_SERIAL_NUMBER,REMAINING_VALUE,account_state 
          'RV_equal_0' as status,count(CSC_SERIAL_NUMBER) as COUNT_CARD,ACCOUNT_STATE,sum(REMAINING_VALUE/100) as SUM_RV
          from product.product_account 
          where REMAINING_VALUE = 0
          group by ACCOUNT_STATE
          UNION all
          select --CSC_SERIAL_NUMBER,REMAINING_VALUE,account_state 
          'RV_more_than_0' as status,count(CSC_SERIAL_NUMBER) as COUNT_CARD,ACCOUNT_STATE,sum(REMAINING_VALUE/100) as SUM_RV
          from product.product_account 
          where REMAINING_VALUE > 0
          group by ACCOUNT_STATE) ca
          LEFT join SYSTEMCD.SYSCD_ACCT_STATE sa on 
          ca.ACCOUNT_STATE = sa.ACCOUNT_STATE
          and sa.DATA_VERSION = 584 
          order by ca.status,ca.ACCOUNT_STATE
          ;


                              
            loop
              fetch detail
              INTO 
              v_STATUS ,
              v_COUNT_CARD ,
              v_ACCOUNT_STATE ,
              v_DESCRIPTION ,
              v_SUM_RV_BAHT ;

              
              exit
            WHEN detail%notfound;
             
              v_log := v_STATUS||','||v_COUNT_CARD||','||v_ACCOUNT_STATE||','||v_DESCRIPTION ||','||v_SUM_RV_BAHT||chr(13);
              
              utl_file.put_line(fhandle, v_log);
              utl_file.fflush(fhandle);
              
            END loop ;
            CLOSE detail;

            utl_file.fclose(fhandle);
          END;
          
         --send mail--
           DECLARE
          smtpservername VARCHAR2(200);
          sender VARCHAR2(200);
          recipient VARCHAR2(250);
          ccrecipient VARCHAR2(250);
          bccrecipient VARCHAR2(250);
          subject VARCHAR2(250);
          BODY VARCHAR2(250);
          errormessage VARCHAR2(250);
          attachments sendmailjpkg.attachments_list;
          v_return NUMBER;
          v_date date;
         
          BEGIN
          
            SELECT to_char(SYSDATE-1,'dd-MON-yyyy')
              INTO v_date
              FROM dual;
           
            dbms_java.grant_permission( 'BSS', 'SYS:java.io.FilePermission', '/export/home/ntusers/anchisai/EX_BE/DAILY_REMAINING_VALUE_OF_CARD_s.'|| to_char(SYSDATE-1,'DD-MON-YYYY') || '.csv', 'read' );
            COMMIT;
            smtpservername := '127.0.0.1';
            sender := 'be@rabbit.co.th';
            recipient := 'rc@rabbit.co.th,wipawanp@rabbit.co.th,saibuas@rabbit.co.th';
            ccrecipient := 'be@rabbit.co.th';
            bccrecipient := NULL;
            subject := 'DAILY_REMAINING_VALUE_OF_CARD_s.' || to_char(SYSDATE-1, 'YYYYMMDD') ;
            BODY := 'Dear RC,' || chr(13) || chr(13) ||
        
                        '    Daily remaining Value Of card s.' || to_char(SYSDATE-1, 'YYYYMMDD') || ' as attached.' || chr(13) || chr(13) ||
        
                      'Best Regards,'|| chr(13) 
                      ;
            -- Modify the code to initialize the variable
            attachments := sendmailjpkg.attachments_list('/export/home/ntusers/anchisai/EX_BE/DAILY_REMAINING_VALUE_OF_CARD_s.'|| to_char(SYSDATE-1,'DD-MON-YYYY') || '.csv');
            v_return := sendmailjpkg.sendmail(
              smtpservername => smtpservername,
              sender => sender,
              recipient => recipient,
              ccrecipient => ccrecipient,
              bccrecipient => bccrecipient,
              subject => subject,
              BODY => BODY,
              errormessage => errormessage,
              attachments => attachments
            );
            
          END; 
END DAILY_REMAINING_VALUE_OF_CARD;

PROCEDURE DAILY_BOT_DATA 
    AS 

    BEGIN
          
	INSERT INTO 
	   BSS_REPORTS.BOT_RV_LESS_THAN_ZERO(SETTLEMENT_DATE,VALUE) 
		 select 
		   TRUNC(CURRENT_DATE-1) as SETTLEMENT_DATE,
		   VALUE
		 from
		   (
		   select 
			 sum(REMAINING_VALUE)/100 as VALUE
		   from product.product_account 
		   where REMAINING_VALUE < 0
		   )
	   ;
   
   INSERT INTO BSS_REPORTS.BOT_LB_DATA
		select 
		 TRUNC(CURRENT_DATE-1) AS SETTLEMENT_DATE,
		 TXN_TYPE,
		 VOLUME,
		 case
		   when TXN_TYPE in ('Add','Add recover','Use reverse','Write off positive') then VALUE*-1
		   else VALUE
		 end as VALUE
		from 
		 (select --REPORTS.BKK_INT_FUN.GETTRANSACTIONDESC (txn_type,txn_sub_type)
		 case 
		   WHEN txn_sub_type=10 THEN 'Add'
		   WHEN txn_sub_type in (13,91) THEN 'Use'
		   WHEN txn_sub_type=16 THEN 'Add reverse'
		   WHEN txn_sub_type=19 THEN 'Use reverse'
		   WHEN txn_sub_type=26 THEN 'Refund'
		   WHEN txn_sub_type=37 THEN 'Write off positive'
		   WHEN txn_sub_type=39 THEN 'Add recover'
		   WHEN txn_sub_type=71 THEN 'Write off negative'
		   WHEN txn_sub_type=118 THEN 'Compensation fare'
		 end as TXN_TYPE,
		 SUM(GFS_VOLUME) as VOLUME,
		 SUM(GFS_VALUE/100) as VALUE
		 from online_summ
		 where cch_settlement_date = TRUNC(CURRENT_DATE-1)
		 and txn_type=3
		 and txn_sub_type in (10,13,16,19,26,37,39,71,91,118)
		 group by 
		 case 
		   WHEN txn_sub_type=10 THEN 'Add'
		   WHEN txn_sub_type in (13,91) THEN 'Use'
		   WHEN txn_sub_type=16 THEN 'Add reverse'
		   WHEN txn_sub_type=19 THEN 'Use reverse'
		   WHEN txn_sub_type=26 THEN 'Refund'
		   WHEN txn_sub_type=37 THEN 'Write off positive'
		   WHEN txn_sub_type=39 THEN 'Add recover'
		   WHEN txn_sub_type=71 THEN 'Write off negative'
		   WHEN txn_sub_type=118 THEN 'Compensation fare'
		 end);
     
    INSERT INTO BSS_REPORTS.BOT_LB_DATA
      select TRUNC(CURRENT_DATE-1) AS SETTLEMENT_DATE,
      'Purse negative' AS TXN_TYPE,
      '1' AS VOLUME,
      sum(value) as VALUE from (
      select value*-1 as value
      from bss_reports.bot_rv_less_than_zero
      where settlement_date = TRUNC(CURRENT_DATE-1)
      union all
      select value as value
      from bss_reports.bot_rv_less_than_zero
      where settlement_date = TRUNC(CURRENT_DATE-2))
      group by TRUNC(CURRENT_DATE-1),
      'Purse negative',
      '1'; 
            
      commit;
      
      
END DAILY_BOT_DATA ;

PROCEDURE DAILY_LB_MONITOR
    AS 

    BEGIN
          
           DECLARE
        
          fhandle utl_file.file_type;
          v_date VARCHAR2(11);
          
          TYPE gencurtyp IS REF CURSOR;
              detail gencurtyp;
              v_log  VARCHAR2(1000);
              v_header_rec VARCHAR2(1000);
             
              v_SETTLEMENT_DATE date;
              v_TXN_TYPE VARCHAR2(50);
              v_VOLUME number;
              v_VALUE number;
          
            BEGIN
              ----get settlement_date ----
              SELECT to_char(SYSDATE-1,'DD-MON-YYYY')
              INTO v_date
              FROM dual;
            ---------------------------
            fhandle :=utl_file.fopen('EX_DATA_BE','DAILY_LB_MONITOR_s.'|| v_date || '.csv','w');--Opening a file
            -------------- HEADER ----------------
            SELECT 'SETTLEMENT_DATE,TXN_TYPE,VOLUME,VALUE' AS HEADER
            INTO v_header_rec
            FROM dual ;
            --------------END HEADER ----------------
            
            
            
            --------------WRITE HEADER---------------
            v_log := v_header_rec ||chr(13);
            utl_file.put_line(fhandle, v_log);
            -----------------------------------------
            OPEN detail FOR 
            
            select * from (
            select month as settlement_date,
            'LB Acct' as txn_type,
            1 as volume,
            lb_value as value
            from BSS_REPORTS.BOT_LB_ACCT
            where month = (select max(month) from BSS_REPORTS.BOT_LB_ACCT)
            union all
            select SETTLEMENT_DATE ,
            TXN_TYPE ,
            VOLUME ,
            VALUE 
            from BSS_REPORTS.BOT_LB_DATA
            where SETTLEMENT_DATE >
            (select max(month) from BSS_REPORTS.BOT_LB_ACCT)
            ) order by settlement_date asc;

                              
            loop
              fetch detail
              INTO 
              v_SETTLEMENT_DATE ,
              v_TXN_TYPE ,
              v_VOLUME ,
              v_VALUE ;

              
              exit
            WHEN detail%notfound;
             
              v_log := v_SETTLEMENT_DATE||','||v_TXN_TYPE||','||v_VOLUME||','||v_VALUE||chr(13);
              
              utl_file.put_line(fhandle, v_log);
              utl_file.fflush(fhandle);
              
            END loop ;
            CLOSE detail;

            utl_file.fclose(fhandle);
          END;
          
         --send mail--
          DECLARE
          smtpservername VARCHAR2(200);
          sender VARCHAR2(200);
          recipient VARCHAR2(250);
          ccrecipient VARCHAR2(250);
          bccrecipient VARCHAR2(250);
          subject VARCHAR2(250);
          BODY VARCHAR2(250);
          errormessage VARCHAR2(250);
          attachments sendmailjpkg.attachments_list;
          v_return NUMBER;
          v_date date;
          lb_monitor varchar2(50);
         
          BEGIN
          
            SELECT to_char(SYSDATE-1,'dd-MON-yyyy')
              INTO v_date
              FROM dual;
              
              select  to_char(sum(value),'9,999,999,999,999.99') 
            into lb_monitor
            
            from
            (select 
            sum(lb_value) as value
            from BSS_REPORTS.BOT_LB_ACCT
            where month = (select max(month) from BSS_REPORTS.BOT_LB_ACCT)
            union all
            select
            sum(VALUE) 
            from BSS_REPORTS.BOT_LB_DATA
            where SETTLEMENT_DATE >
            (select max(month) from BSS_REPORTS.BOT_LB_ACCT));
           
            dbms_java.grant_permission( 'BSS', 'SYS:java.io.FilePermission', '/export/home/bssuser/dba_directory/PL_SQL/EX_DATA/DAILY_LB_MONITOR_s.'|| to_char(SYSDATE-1,'DD-MON-YYYY') || '.csv', 'read' );
            COMMIT;
            smtpservername := '127.0.0.1';
            sender := 'do-not-reply@rabbit.co.th';
            recipient := 'chalermchait@rabbit.co.th,qa@rabbit.co.th,rc@rabbit.co.th';
            ccrecipient := 'be@rabbit.co.th,wisitm@rabbit.co.th';
            bccrecipient := NULL;
            subject := 'DAILY_LB_MONITOR_s.' || to_char(SYSDATE-1, 'YYYYMMDD') ;
            BODY := 'Dear ALL,' || chr(13) || chr(13) ||
        
                        '    DAILY_LB_MONITOR s.' || to_char(SYSDATE-1, 'YYYYMMDD') || ' is ' || lb_monitor || chr(13) || chr(13) || 'Detail in the attachment.' || chr(13) || chr(13) ||
        
                      'Best Regards,'|| chr(13) 
                      ;
            -- Modify the code to initialize the variable
            attachments := sendmailjpkg.attachments_list('/export/home/bssuser/dba_directory/PL_SQL/EX_DATA/DAILY_LB_MONITOR_s.'|| to_char(SYSDATE-1,'DD-MON-YYYY') || '.csv');
            v_return := sendmailjpkg.sendmail(
              smtpservername => smtpservername,
              sender => sender,
              recipient => recipient,
              ccrecipient => ccrecipient,
              bccrecipient => bccrecipient,
              subject => subject,
              BODY => BODY,
              errormessage => errormessage,
              attachments => attachments
            );
            
          END; 
END DAILY_LB_MONITOR;


PROCEDURE SP_RETAIL_TXN 
    AS 

    BEGIN
          
   DECLARE
        
          fhandle utl_file.file_type;
          v_date VARCHAR2(11);
          
          TYPE gencurtyp IS REF CURSOR;
              detail gencurtyp;
              v_log  VARCHAR2(1000);
              v_header_rec VARCHAR2(1000);
             
              v_PARTICIPANT_ID  number;
              v_PARTICIPANT_NAME VARCHAR2(100);
              v_LOCATION_ID number;
              v_LOCATION_NAME  VARCHAR2(100);
              v_DEVICE_ID  number;
              v_EQUIPMENT_NO VARCHAR2(100);
              v_CSC_READER_1 VARCHAR2(100);
              v_APPLICATION_MAJOR  VARCHAR2(100);
              v_APPLICATION_MINOR  VARCHAR2(100);
              v_COUNT_TXN  number;
              v_SUM_VALUE  number;
              v_last_used_time date;
          
            BEGIN
              ----get settlement_date ----
              SELECT to_char(SYSDATE-1,'DD-MON-YYYY')
              INTO v_date
              FROM dual;
            ---------------------------
            fhandle :=utl_file.fopen('EX_DATA_BE','RETAIL_USAGE_BY_DEVICE_1_DAYS_s.'|| v_date || '.csv','w');--Opening a file
            -------------- HEADER ----------------
            SELECT 'PARTICIPANT_ID,PARTICIPANT_NAME,LOCATION_ID,LOCATION_NAME,DEVICE_ID,EQUIPMENT_NO,CSC_READER_1,APPLICATION_MAJOR,APPLICATION_MINOR,COUNT_TXN,SUM_VALUE,LAST_USED_TIME' AS HEADER
            INTO v_header_rec
            FROM dual ;
            --------------END HEADER ----------------
            
            
            
            --------------WRITE HEADER---------------
            v_log := v_header_rec ||chr(13);
            utl_file.put_line(fhandle, v_log);
            -----------------------------------------
            OPEN detail FOR 
            
              
       select PARTICIPANT_ID,PARTICIPANT_NAME,LOCATION_ID,LOCATION_NAME,DEVICE_ID,EQUIPMENT_NO,CSC_READER_1
,APPLICATION_MAJOR
,APPLICATION_MINOR
,COUNT_TXN
,SUM_VALUE
,max(last_used_time) as last_used_time
from (
          select ca.PARTICIPANT_ID,ca.PARTICIPANT_NAME,ca.LOCATION_ID,ca.LOCATION_NAME,ca.DEVICE_ID,ca.EQUIPMENT_NO,ca.CSC_READER_1
           ,ca.APPLICATION_MAJOR
           ,ca.APPLICATION_MINOR
           ,ca.COUNT_TXN
           ,ca.SUM_VALUE,DV_DEVICE_STATUS.last_used_time
                from (
                    select 
                    CUT_ALL.SOURCE_PARTICIPANT_ID as PARTICIPANT_ID
                    ,BSS.CDA.getPartDesc(CUT_ALL.SOURCE_PARTICIPANT_ID,CUT_ALL.DATA_VERSION) AS  PARTICIPANT_NAME
                    --,VV.PARTICIPANT_NAME as PARTICIPANT_NAME
                    ,to_number(substr(to_char(CUT_ALL.device_location,'XXXXXXXX'),-6,6),'XXXXXXXX') as LOCATION_ID
                    ,L.LOCATION_NAME AS LOCATION_NAME
                    ,CUT_ALL.DEVICE_ID
                    ,DD.EQUIPMENT_NO
                    
                    ,DD.CSC_READER_1
                    ,DD.APPLICATION_MAJOR
                    ,DD.APPLICATION_MINOR
                    --,COUNT(CUT_ALL.TRANSACTION_VALUE)AS COUNT_TXN
                    --,SUM(CUT_ALL.TRANSACTION_VALUE*0.01)AS SUM_VALUE
                    ,CASE 
                        WHEN CUT_ALL.UD_SUBTYPE = 19 THEN count(CUT_ALL.TRANSACTION_VALUE*-1) 
                        ELSE count(CUT_ALL.TRANSACTION_VALUE) 
                        END AS COUNT_TXN,
                    
                    CASE 
                        WHEN CUT_ALL.UD_SUBTYPE =19 THEN sum(CUT_ALL.TRANSACTION_VALUE *-1 )*0.01
                        ELSE sum(CUT_ALL.TRANSACTION_VALUE)*0.01 
                        END AS SUM_VALUE
                    
                    
                    from CUT_PI_FINANCIAL CUT_ALL
                    --LEFT JOIN BSS.V_LOCATION_STATUS VV ON CUT_ALL.SOURCE_PARTICIPANT_ID = VV.PARTICIPANT_ID AND CUT_ALL.DATA_VERSION = VV.DATA_VERSION
                    LEFT JOIN SYSCD_LOCATION L on (to_number(substr(to_char(CUT_ALL.device_location,'XXXXXXXX'),-6,6),'XXXXXXXX')=L.location_code) and (CUT_ALL.source_participant_id=L.participant_id) and (CUT_ALL.DATA_VERSION=L.DATA_VERSION) and (L.location_type in (9,15,16,21)) 
                    LEFT JOIN DEVICE.DEVICE_STATUS DD  ON CUT_ALL.SOURCE_PARTICIPANT_ID = DD.PARTICIPANT_ID  AND CUT_ALL.DEVICE_ID = DD.DEVICE_ID
                    where CUT_ALL.SERVICE_PARTICIPANT_ID      IN (11,12,22,41,42,43,45,47,99)
                           AND CUT_ALL.iss_txn_reflection           ='N'
                           AND CUT_ALL.CCH_TXN_APPROVED             ='Y'
                           AND CUT_ALL.UD_TYPE                      =3
                           AND CUT_ALL.UD_SUBTYPE                   IN (13,19) --(10,16)top up
                           AND CUT_ALL.settlement_date              =TRUNC(sysdate)-1
                         -- AND settlement_date             >=TRUNC(sysdate)-7
                           --AND in_serv                      =1
                           --AND CUT_ALL.DEVICE_ID = 655387
                    GROUP BY CUT_ALL.SOURCE_PARTICIPANT_ID ,BSS.CDA.getPartDesc(CUT_ALL.SOURCE_PARTICIPANT_ID,CUT_ALL.DATA_VERSION),CUT_ALL.DEVICE_ID,to_number(substr(to_char(CUT_ALL.device_location,'XXXXXXXX'),-6,6),'XXXXXXXX'),L.LOCATION_NAME,DD.EQUIPMENT_NO
                    ,DD.CSC_READER_1
                    ,DD.APPLICATION_MAJOR
                    ,DD.APPLICATION_MINOR
                    , CUT_ALL.UD_SUBTYPE
                    ) CA left join DV_DEVICE_STATUS on DV_DEVICE_STATUS.DEVICE_ID=CA.DEVICE_ID
                    order by CA.DEVICE_ID) GROUP BY PARTICIPANT_ID,PARTICIPANT_NAME,LOCATION_ID,LOCATION_NAME,DEVICE_ID,EQUIPMENT_NO,CSC_READER_1
                    ,APPLICATION_MAJOR
                    ,APPLICATION_MINOR
                    ,COUNT_TXN
                    ,SUM_VALUE

union all
             SELECT PARTICIPANT_ID,
      PARTICIPANT_DESC AS PARTICIPANT_NAME,
      LOCATION_ID,
      LOCATION_DESC AS location_name,
      device_id,
      EQUIPMENT_NO,
      CSC_READER_1,
      APPLICATION_MAJOR,
      APPLICATION_MINOR,
      0 AS COUNT_TXN,
      0 AS sum_value,
     null as last_used_time
    FROM BSS.V_DEVICE_STATUS
    WHERE (PARTICIPANT_ID>=10000
    OR PARTICIPANT_ID    IN (22,41,42,43,45,47,99))
    AND status            =5
    AND device_id NOT    IN
      (SELECT device_id
      FROM cut_pi_financial
      WHERE ud_type               =3
      AND ud_subtype             IN (13,19)  --(10,16)top up
      AND service_participant_id IN (11,12,22,41,42,43,45,47,99)
      AND iss_txn_reflection      ='N'
      AND cch_txn_approved        ='Y'
      AND settlement_date         =TRUNC(sysdate)-1
       -- AND settlement_date             >=TRUNC(sysdate)-7
      );

                              
            loop
              fetch detail
              INTO 
        v_PARTICIPANT_ID,  
        v_PARTICIPANT_NAME, 
        v_LOCATION_ID, 
        v_LOCATION_NAME,  
        v_DEVICE_ID,  
        v_EQUIPMENT_NO, 
        v_CSC_READER_1, 
        v_APPLICATION_MAJOR,  
        v_APPLICATION_MINOR,  
        v_COUNT_TXN,  
        v_SUM_VALUE, 
        v_LAST_USED_TIME 
        ; 

              
              exit
            WHEN detail%notfound;
             
               v_log := '"'||v_PARTICIPANT_ID||'","'||v_PARTICIPANT_NAME||'","'||v_LOCATION_ID||'","'||v_LOCATION_NAME||'","'||v_DEVICE_ID||'","'||v_EQUIPMENT_NO||'","'||v_CSC_READER_1||'","'||v_APPLICATION_MAJOR||'","'||v_APPLICATION_MINOR||'","'||v_COUNT_TXN||'","'||v_SUM_VALUE||'","'||v_LAST_USED_TIME||'",'|| CHR(13);
              
              utl_file.put_line(fhandle, v_log);
              utl_file.fflush(fhandle);
              
            END loop ;
            CLOSE detail;

            utl_file.fclose(fhandle);
          END;
  
   DECLARE
        
          fhandle utl_file.file_type;
          v_date VARCHAR2(11);
          
          TYPE gencurtyp IS REF CURSOR;
              detail gencurtyp;
              v_log  VARCHAR2(1000);
              v_header_rec VARCHAR2(1000);
             
              v_PARTICIPANT_ID  number;
              v_PARTICIPANT_NAME VARCHAR2(50);
              v_LOCATION_ID number;
              v_LOCATION_NAME  VARCHAR2(100);
              v_DEVICE_ID  number;
              v_EQUIPMENT_NO VARCHAR2(100);
              v_CSC_READER_1 VARCHAR2(100);
              v_APPLICATION_MAJOR  VARCHAR2(100);
              v_APPLICATION_MINOR  VARCHAR2(100);
              v_COUNT_TXN  number;
              v_SUM_VALUE  number;
              v_last_used_time date;
          
            BEGIN
              ----get settlement_date ----
              SELECT to_char(SYSDATE-1,'DD-MON-YYYY')
              INTO v_date
              FROM dual;
            ---------------------------
            fhandle :=utl_file.fopen('EX_DATA_BE','RETAIL_USAGE_BY_DEVICE_7_DAYS_s.'|| v_date || '.csv','w');--Opening a file
            -------------- HEADER ----------------
            SELECT 'PARTICIPANT_ID,PARTICIPANT_NAME,LOCATION_ID,LOCATION_NAME,DEVICE_ID,EQUIPMENT_NO,CSC_READER_1,APPLICATION_MAJOR,APPLICATION_MINOR,COUNT_TXN,SUM_VALUE,LAST_USED_TIME' AS HEADER
            INTO v_header_rec
            FROM dual ;
            --------------END HEADER ----------------
            
            
            
            --------------WRITE HEADER---------------
            v_log := v_header_rec ||chr(13);
            utl_file.put_line(fhandle, v_log);
            -----------------------------------------
            OPEN detail FOR 
            
              
       select PARTICIPANT_ID,PARTICIPANT_NAME,LOCATION_ID,LOCATION_NAME,DEVICE_ID,EQUIPMENT_NO,CSC_READER_1
,APPLICATION_MAJOR
,APPLICATION_MINOR
,COUNT_TXN
,SUM_VALUE
,max(last_used_time) as last_used_time
from (
          select ca.PARTICIPANT_ID,ca.PARTICIPANT_NAME,ca.LOCATION_ID,ca.LOCATION_NAME,ca.DEVICE_ID,ca.EQUIPMENT_NO,ca.CSC_READER_1
           ,ca.APPLICATION_MAJOR
           ,ca.APPLICATION_MINOR
           ,ca.COUNT_TXN
           ,ca.SUM_VALUE,DV_DEVICE_STATUS.last_used_time
                from (
                    select 
                    CUT_ALL.SOURCE_PARTICIPANT_ID as PARTICIPANT_ID
                    ,BSS.CDA.getPartDesc(CUT_ALL.SOURCE_PARTICIPANT_ID,CUT_ALL.DATA_VERSION) AS  PARTICIPANT_NAME
                    --,VV.PARTICIPANT_NAME as PARTICIPANT_NAME
                    ,to_number(substr(to_char(CUT_ALL.device_location,'XXXXXXXX'),-6,6),'XXXXXXXX') as LOCATION_ID
                    ,L.LOCATION_NAME AS LOCATION_NAME
                    ,CUT_ALL.DEVICE_ID
                    ,DD.EQUIPMENT_NO
                    
                    ,DD.CSC_READER_1
                    ,DD.APPLICATION_MAJOR
                    ,DD.APPLICATION_MINOR
                   -- ,COUNT(CUT_ALL.TRANSACTION_VALUE)AS COUNT_TXN
                    --,SUM(CUT_ALL.TRANSACTION_VALUE*0.01)AS SUM_VALUE
                    ,CASE 
                        WHEN CUT_ALL.UD_SUBTYPE = 19 THEN count(CUT_ALL.TRANSACTION_VALUE*-1) 
                        ELSE count(CUT_ALL.TRANSACTION_VALUE) 
                        END AS COUNT_TXN,
                    
                    CASE 
                        WHEN CUT_ALL.UD_SUBTYPE =19 THEN sum(CUT_ALL.TRANSACTION_VALUE *-1 )*0.01
                        ELSE sum(CUT_ALL.TRANSACTION_VALUE)*0.01 
                        END AS SUM_VALUE
                   
                    from CUT_PI_FINANCIAL CUT_ALL
                    --LEFT JOIN BSS.V_LOCATION_STATUS VV ON CUT_ALL.SOURCE_PARTICIPANT_ID = VV.PARTICIPANT_ID AND CUT_ALL.DATA_VERSION = VV.DATA_VERSION
                    LEFT JOIN SYSCD_LOCATION L on (to_number(substr(to_char(CUT_ALL.device_location,'XXXXXXXX'),-6,6),'XXXXXXXX')=L.location_code) and (CUT_ALL.source_participant_id=L.participant_id) and (CUT_ALL.DATA_VERSION=L.DATA_VERSION) and (L.location_type in (9,15,16,21)) 
                    LEFT JOIN DEVICE.DEVICE_STATUS DD  ON CUT_ALL.SOURCE_PARTICIPANT_ID = DD.PARTICIPANT_ID  AND CUT_ALL.DEVICE_ID = DD.DEVICE_ID
                    where CUT_ALL.SERVICE_PARTICIPANT_ID      IN (11,12,22,41,42,43,45,47,99)
                           AND CUT_ALL.iss_txn_reflection           ='N'
                           AND CUT_ALL.CCH_TXN_APPROVED             ='Y'
                           AND CUT_ALL.UD_TYPE                      =3
                           AND CUT_ALL.UD_SUBTYPE                   IN (13,19) --(10,16)top up
                          -- AND CUT_ALL.settlement_date              =TRUNC(sysdate)-1
                          AND settlement_date             >=TRUNC(sysdate)-7
                           --AND in_serv                      =1
                           --AND CUT_ALL.DEVICE_ID = 655387
                    GROUP BY CUT_ALL.SOURCE_PARTICIPANT_ID ,BSS.CDA.getPartDesc(CUT_ALL.SOURCE_PARTICIPANT_ID,CUT_ALL.DATA_VERSION),CUT_ALL.DEVICE_ID,to_number(substr(to_char(CUT_ALL.device_location,'XXXXXXXX'),-6,6),'XXXXXXXX'),L.LOCATION_NAME,DD.EQUIPMENT_NO
                    ,DD.CSC_READER_1
                    ,DD.APPLICATION_MAJOR
                    ,DD.APPLICATION_MINOR
                    , CUT_ALL.UD_SUBTYPE
                    ) CA left join DV_DEVICE_STATUS on DV_DEVICE_STATUS.DEVICE_ID=CA.DEVICE_ID
                    order by CA.DEVICE_ID) GROUP BY PARTICIPANT_ID,PARTICIPANT_NAME,LOCATION_ID,LOCATION_NAME,DEVICE_ID,EQUIPMENT_NO,CSC_READER_1
                    ,APPLICATION_MAJOR
                    ,APPLICATION_MINOR
                    ,COUNT_TXN
                    ,SUM_VALUE

union all
             SELECT PARTICIPANT_ID,
      PARTICIPANT_DESC AS PARTICIPANT_NAME,
      LOCATION_ID,
      LOCATION_DESC AS location_name,
      device_id,
      EQUIPMENT_NO,
      CSC_READER_1,
      APPLICATION_MAJOR,
      APPLICATION_MINOR,
      0 AS COUNT_TXN,
      0 AS sum_value,
     null as last_used_time
    FROM BSS.V_DEVICE_STATUS
    WHERE (PARTICIPANT_ID>=10000
    OR PARTICIPANT_ID    IN (22,41,42,43,45,47,99))
    AND status            =5
    AND device_id NOT    IN
      (SELECT device_id
      FROM cut_pi_financial
      WHERE ud_type               =3
      AND ud_subtype             IN (13,19)  --(10,16)top up
      AND service_participant_id IN (11,12,22,41,42,43,45,47,99)
      AND iss_txn_reflection      ='N'
      AND cch_txn_approved        ='Y'
     -- AND settlement_date         =TRUNC(sysdate)-1
       AND settlement_date             >=TRUNC(sysdate)-7
      );

                              
            loop
              fetch detail
              INTO 
        v_PARTICIPANT_ID,  
        v_PARTICIPANT_NAME, 
        v_LOCATION_ID, 
        v_LOCATION_NAME,  
        v_DEVICE_ID,  
        v_EQUIPMENT_NO, 
        v_CSC_READER_1, 
        v_APPLICATION_MAJOR,  
        v_APPLICATION_MINOR,  
        v_COUNT_TXN,  
        v_SUM_VALUE, 
        v_LAST_USED_TIME 
        ; 

              
              exit
            WHEN detail%notfound;
             
                v_log := '"'||v_PARTICIPANT_ID||'","'||v_PARTICIPANT_NAME||'","'||v_LOCATION_ID||'","'||v_LOCATION_NAME||'","'||v_DEVICE_ID||'","'||v_EQUIPMENT_NO||'","'||v_CSC_READER_1||'","'||v_APPLICATION_MAJOR||'","'||v_APPLICATION_MINOR||'","'||v_COUNT_TXN||'","'||v_SUM_VALUE||'","'||v_LAST_USED_TIME||'",'|| CHR(13);
              
              utl_file.put_line(fhandle, v_log);
              utl_file.fflush(fhandle);
              
            END loop ;
            CLOSE detail;

            utl_file.fclose(fhandle);
          END;
   
    DECLARE
        
          fhandle utl_file.file_type;
          v_date VARCHAR2(11);
          
          TYPE gencurtyp IS REF CURSOR;
              detail gencurtyp;
              v_log  VARCHAR2(1000);
              v_header_rec VARCHAR2(1000);
             
              v_PARTICIPANT_ID  number;
              v_PARTICIPANT_NAME VARCHAR2(50);
              v_LOCATION_ID number;
              v_LOCATION_NAME  VARCHAR2(100);
              v_DEVICE_ID  number;
              v_EQUIPMENT_NO VARCHAR2(100);
              v_CSC_READER_1 VARCHAR2(100);
              v_APPLICATION_MAJOR  VARCHAR2(100);
              v_APPLICATION_MINOR  VARCHAR2(100);
              v_COUNT_TXN  number;
              v_SUM_VALUE  number;
              v_last_used_time date;
          
            BEGIN
              ----get settlement_date ----
              SELECT to_char(SYSDATE-1,'DD-MON-YYYY')
              INTO v_date
              FROM dual;
            ---------------------------
            fhandle :=utl_file.fopen('EX_DATA_BE','RETAIL_TOPUP_BY_DEVICE_1_DAYS_s.'|| v_date || '.csv','w');--Opening a file
            -------------- HEADER ----------------
            SELECT 'PARTICIPANT_ID,PARTICIPANT_NAME,LOCATION_ID,LOCATION_NAME,DEVICE_ID,EQUIPMENT_NO,CSC_READER_1,APPLICATION_MAJOR,APPLICATION_MINOR,COUNT_TXN,SUM_VALUE,LAST_USED_TIME' AS HEADER
            INTO v_header_rec
            FROM dual ;
            --------------END HEADER ----------------
            
            
            
            --------------WRITE HEADER---------------
            v_log := v_header_rec ||chr(13);
            utl_file.put_line(fhandle, v_log);
            -----------------------------------------
            OPEN detail FOR 
            
              
       select PARTICIPANT_ID,PARTICIPANT_NAME,LOCATION_ID,LOCATION_NAME,DEVICE_ID,EQUIPMENT_NO,CSC_READER_1
,APPLICATION_MAJOR
,APPLICATION_MINOR
,COUNT_TXN
,SUM_VALUE
,max(last_used_time) as last_used_time
from (
          select ca.PARTICIPANT_ID,ca.PARTICIPANT_NAME,ca.LOCATION_ID,ca.LOCATION_NAME,ca.DEVICE_ID,ca.EQUIPMENT_NO,ca.CSC_READER_1
           ,ca.APPLICATION_MAJOR
           ,ca.APPLICATION_MINOR
           ,ca.COUNT_TXN
           ,ca.SUM_VALUE,DV_DEVICE_STATUS.last_used_time
                from (
                    select 
                    CUT_ALL.SOURCE_PARTICIPANT_ID as PARTICIPANT_ID
                    ,BSS.CDA.getPartDesc(CUT_ALL.SOURCE_PARTICIPANT_ID,CUT_ALL.DATA_VERSION) AS  PARTICIPANT_NAME
                    --,VV.PARTICIPANT_NAME as PARTICIPANT_NAME
                    ,to_number(substr(to_char(CUT_ALL.device_location,'XXXXXXXX'),-6,6),'XXXXXXXX') as LOCATION_ID
                    ,L.LOCATION_NAME AS LOCATION_NAME
                    ,CUT_ALL.DEVICE_ID
                    ,DD.EQUIPMENT_NO
                    
                    ,DD.CSC_READER_1
                    ,DD.APPLICATION_MAJOR
                    ,DD.APPLICATION_MINOR
                   -- ,COUNT(CUT_ALL.TRANSACTION_VALUE)AS COUNT_TXN
                   -- ,SUM(CUT_ALL.TRANSACTION_VALUE*0.01)AS SUM_VALUE
                    ,CASE 
                        WHEN CUT_ALL.UD_SUBTYPE = 16 THEN count(CUT_ALL.TRANSACTION_VALUE*-1) 
                        ELSE count(CUT_ALL.TRANSACTION_VALUE) 
                        END AS COUNT_TXN,
                    
                    CASE 
                        WHEN CUT_ALL.UD_SUBTYPE =16 THEN sum(CUT_ALL.TRANSACTION_VALUE *-1 )*0.01
                        ELSE sum(CUT_ALL.TRANSACTION_VALUE)*0.01 
                        END AS SUM_VALUE
                    
                    from CUT_PI_FINANCIAL CUT_ALL
                    --LEFT JOIN BSS.V_LOCATION_STATUS VV ON CUT_ALL.SOURCE_PARTICIPANT_ID = VV.PARTICIPANT_ID AND CUT_ALL.DATA_VERSION = VV.DATA_VERSION
                    LEFT JOIN SYSCD_LOCATION L on (to_number(substr(to_char(CUT_ALL.device_location,'XXXXXXXX'),-6,6),'XXXXXXXX')=L.location_code) and (CUT_ALL.source_participant_id=L.participant_id) and (CUT_ALL.DATA_VERSION=L.DATA_VERSION) and (L.location_type in (9,15,16,21)) 
                    LEFT JOIN DEVICE.DEVICE_STATUS DD  ON CUT_ALL.SOURCE_PARTICIPANT_ID = DD.PARTICIPANT_ID  AND CUT_ALL.DEVICE_ID = DD.DEVICE_ID
                    where CUT_ALL.SERVICE_PARTICIPANT_ID      IN (11,12,22,41,42,43,45,47,99)
                           AND CUT_ALL.iss_txn_reflection           ='N'
                           AND CUT_ALL.CCH_TXN_APPROVED             ='Y'
                           AND CUT_ALL.UD_TYPE                      =3
                           AND CUT_ALL.UD_SUBTYPE                   IN (10,16) --(10,16)top up
                           AND CUT_ALL.settlement_date              =TRUNC(sysdate)-1
                         -- AND settlement_date             >=TRUNC(sysdate)-7
                           --AND in_serv                      =1
                           --AND CUT_ALL.DEVICE_ID = 655387
                    GROUP BY CUT_ALL.SOURCE_PARTICIPANT_ID ,BSS.CDA.getPartDesc(CUT_ALL.SOURCE_PARTICIPANT_ID,CUT_ALL.DATA_VERSION),CUT_ALL.DEVICE_ID,to_number(substr(to_char(CUT_ALL.device_location,'XXXXXXXX'),-6,6),'XXXXXXXX'),L.LOCATION_NAME,DD.EQUIPMENT_NO
                    ,DD.CSC_READER_1
                    ,DD.APPLICATION_MAJOR
                    ,DD.APPLICATION_MINOR
                    , CUT_ALL.UD_SUBTYPE
                    ) CA left join DV_DEVICE_STATUS on DV_DEVICE_STATUS.DEVICE_ID=CA.DEVICE_ID
                    order by CA.DEVICE_ID) GROUP BY PARTICIPANT_ID,PARTICIPANT_NAME,LOCATION_ID,LOCATION_NAME,DEVICE_ID,EQUIPMENT_NO,CSC_READER_1
                    ,APPLICATION_MAJOR
                    ,APPLICATION_MINOR
                    ,COUNT_TXN
                    ,SUM_VALUE

union all
             SELECT PARTICIPANT_ID,
      PARTICIPANT_DESC AS PARTICIPANT_NAME,
      LOCATION_ID,
      LOCATION_DESC AS location_name,
      device_id,
      EQUIPMENT_NO,
      CSC_READER_1,
      APPLICATION_MAJOR,
      APPLICATION_MINOR,
      0 AS COUNT_TXN,
      0 AS sum_value,
     null as last_used_time
    FROM BSS.V_DEVICE_STATUS
    WHERE (PARTICIPANT_ID>=10000
    OR PARTICIPANT_ID    IN (22,41,42,43,45,47,99))
    AND status            =5
    AND device_id NOT    IN
      (SELECT device_id
      FROM cut_pi_financial
      WHERE ud_type               =3
      AND ud_subtype             IN (10,16)  --(10,16)top up
      AND service_participant_id IN (11,12,22,41,42,43,45,47,99)
      AND iss_txn_reflection      ='N'
      AND cch_txn_approved        ='Y'
     AND settlement_date         =TRUNC(sysdate)-1
      -- AND settlement_date             >=TRUNC(sysdate)-7
      );

                              
            loop
              fetch detail
              INTO 
        v_PARTICIPANT_ID,  
        v_PARTICIPANT_NAME, 
        v_LOCATION_ID, 
        v_LOCATION_NAME,  
        v_DEVICE_ID,  
        v_EQUIPMENT_NO, 
        v_CSC_READER_1, 
        v_APPLICATION_MAJOR,  
        v_APPLICATION_MINOR,  
        v_COUNT_TXN,  
        v_SUM_VALUE, 
        v_LAST_USED_TIME 
        ; 

              
              exit
            WHEN detail%notfound;
             
                v_log := '"'||v_PARTICIPANT_ID||'","'||v_PARTICIPANT_NAME||'","'||v_LOCATION_ID||'","'||v_LOCATION_NAME||'","'||v_DEVICE_ID||'","'||v_EQUIPMENT_NO||'","'||v_CSC_READER_1||'","'||v_APPLICATION_MAJOR||'","'||v_APPLICATION_MINOR||'","'||v_COUNT_TXN||'","'||v_SUM_VALUE||'","'||v_LAST_USED_TIME||'",'|| CHR(13);
              
              utl_file.put_line(fhandle, v_log);
              utl_file.fflush(fhandle);
              
            END loop ;
            CLOSE detail;

            utl_file.fclose(fhandle);
          END;       
      
    DECLARE
        
          fhandle utl_file.file_type;
          v_date VARCHAR2(11);
          
          TYPE gencurtyp IS REF CURSOR;
              detail gencurtyp;
              v_log  VARCHAR2(1000);
              v_header_rec VARCHAR2(1000);
             
              v_PARTICIPANT_ID  number;
              v_PARTICIPANT_NAME VARCHAR2(50);
              v_LOCATION_ID number;
              v_LOCATION_NAME  VARCHAR2(100);
              v_DEVICE_ID  number;
              v_EQUIPMENT_NO VARCHAR2(100);
              v_CSC_READER_1 VARCHAR2(100);
              v_APPLICATION_MAJOR  VARCHAR2(100);
              v_APPLICATION_MINOR  VARCHAR2(100);
              v_COUNT_TXN  number;
              v_SUM_VALUE  number;
              v_last_used_time date;
          
            BEGIN
              ----get settlement_date ----
              SELECT to_char(SYSDATE-1,'DD-MON-YYYY')
              INTO v_date
              FROM dual;
            ---------------------------
            fhandle :=utl_file.fopen('EX_DATA_BE','RETAIL_TOPUP_BY_DEVICE_7_DAYS_s.'|| v_date || '.csv','w');--Opening a file
            -------------- HEADER ----------------
            SELECT 'PARTICIPANT_ID,PARTICIPANT_NAME,LOCATION_ID,LOCATION_NAME,DEVICE_ID,EQUIPMENT_NO,CSC_READER_1,APPLICATION_MAJOR,APPLICATION_MINOR,COUNT_TXN,SUM_VALUE,LAST_USED_TIME' AS HEADER
            INTO v_header_rec
            FROM dual ;
            --------------END HEADER ----------------
            
            
            
            --------------WRITE HEADER---------------
            v_log := v_header_rec ||chr(13);
            utl_file.put_line(fhandle, v_log);
            -----------------------------------------
            OPEN detail FOR 
            
              
       select PARTICIPANT_ID,PARTICIPANT_NAME,LOCATION_ID,LOCATION_NAME,DEVICE_ID,EQUIPMENT_NO,CSC_READER_1
,APPLICATION_MAJOR
,APPLICATION_MINOR
,COUNT_TXN
,SUM_VALUE
,max(last_used_time) as last_used_time
from (
          select ca.PARTICIPANT_ID,ca.PARTICIPANT_NAME,ca.LOCATION_ID,ca.LOCATION_NAME,ca.DEVICE_ID,ca.EQUIPMENT_NO,ca.CSC_READER_1
           ,ca.APPLICATION_MAJOR
           ,ca.APPLICATION_MINOR
           ,ca.COUNT_TXN
           ,ca.SUM_VALUE,DV_DEVICE_STATUS.last_used_time
                from (
                    select 
                    CUT_ALL.SOURCE_PARTICIPANT_ID as PARTICIPANT_ID
                    ,BSS.CDA.getPartDesc(CUT_ALL.SOURCE_PARTICIPANT_ID,CUT_ALL.DATA_VERSION) AS  PARTICIPANT_NAME
                    --,VV.PARTICIPANT_NAME as PARTICIPANT_NAME
                    ,to_number(substr(to_char(CUT_ALL.device_location,'XXXXXXXX'),-6,6),'XXXXXXXX') as LOCATION_ID
                    ,L.LOCATION_NAME AS LOCATION_NAME
                    ,CUT_ALL.DEVICE_ID
                    ,DD.EQUIPMENT_NO
                    
                    ,DD.CSC_READER_1
                    ,DD.APPLICATION_MAJOR
                    ,DD.APPLICATION_MINOR
                   -- ,COUNT(CUT_ALL.TRANSACTION_VALUE)AS COUNT_TXN
                   -- ,SUM(CUT_ALL.TRANSACTION_VALUE*0.01)AS SUM_VALUE
                    ,CASE 
                        WHEN CUT_ALL.UD_SUBTYPE = 16 THEN count(CUT_ALL.TRANSACTION_VALUE*-1) 
                        ELSE count(CUT_ALL.TRANSACTION_VALUE) 
                        END AS COUNT_TXN,
                    
                    CASE 
                        WHEN CUT_ALL.UD_SUBTYPE =16 THEN sum(CUT_ALL.TRANSACTION_VALUE *-1 )*0.01
                        ELSE sum(CUT_ALL.TRANSACTION_VALUE)*0.01 
                        END AS SUM_VALUE
                    from CUT_PI_FINANCIAL CUT_ALL
                    --LEFT JOIN BSS.V_LOCATION_STATUS VV ON CUT_ALL.SOURCE_PARTICIPANT_ID = VV.PARTICIPANT_ID AND CUT_ALL.DATA_VERSION = VV.DATA_VERSION
                    LEFT JOIN SYSCD_LOCATION L on (to_number(substr(to_char(CUT_ALL.device_location,'XXXXXXXX'),-6,6),'XXXXXXXX')=L.location_code) and (CUT_ALL.source_participant_id=L.participant_id) and (CUT_ALL.DATA_VERSION=L.DATA_VERSION) and (L.location_type in (9,15,16,21)) 
                    LEFT JOIN DEVICE.DEVICE_STATUS DD  ON CUT_ALL.SOURCE_PARTICIPANT_ID = DD.PARTICIPANT_ID  AND CUT_ALL.DEVICE_ID = DD.DEVICE_ID
                    where CUT_ALL.SERVICE_PARTICIPANT_ID      IN (11,12,22,41,42,43,45,47,99)
                           AND CUT_ALL.iss_txn_reflection           ='N'
                           AND CUT_ALL.CCH_TXN_APPROVED             ='Y'
                           AND CUT_ALL.UD_TYPE                      =3
                           AND CUT_ALL.UD_SUBTYPE                   IN (10,16) --(10,16)top up
                          -- AND CUT_ALL.settlement_date              =TRUNC(sysdate)-1
                           AND settlement_date             >=TRUNC(sysdate)-7
                           --AND in_serv                      =1
                           --AND CUT_ALL.DEVICE_ID = 655387
                    GROUP BY CUT_ALL.SOURCE_PARTICIPANT_ID ,BSS.CDA.getPartDesc(CUT_ALL.SOURCE_PARTICIPANT_ID,CUT_ALL.DATA_VERSION),CUT_ALL.DEVICE_ID,to_number(substr(to_char(CUT_ALL.device_location,'XXXXXXXX'),-6,6),'XXXXXXXX'),L.LOCATION_NAME,DD.EQUIPMENT_NO
                    ,DD.CSC_READER_1
                    ,DD.APPLICATION_MAJOR
                    ,DD.APPLICATION_MINOR
                   , CUT_ALL.UD_SUBTYPE
                    ) CA left join DV_DEVICE_STATUS on DV_DEVICE_STATUS.DEVICE_ID=CA.DEVICE_ID
                    order by CA.DEVICE_ID) GROUP BY PARTICIPANT_ID,PARTICIPANT_NAME,LOCATION_ID,LOCATION_NAME,DEVICE_ID,EQUIPMENT_NO,CSC_READER_1
                    ,APPLICATION_MAJOR
                    ,APPLICATION_MINOR
                    ,COUNT_TXN
                    ,SUM_VALUE

union all
             SELECT PARTICIPANT_ID,
      PARTICIPANT_DESC AS PARTICIPANT_NAME,
      LOCATION_ID,
      LOCATION_DESC AS location_name,
      device_id,
      EQUIPMENT_NO,
      CSC_READER_1,
      APPLICATION_MAJOR,
      APPLICATION_MINOR,
      0 AS COUNT_TXN,
      0 AS sum_value,
     null as last_used_time
    FROM BSS.V_DEVICE_STATUS
    WHERE (PARTICIPANT_ID>=10000
    OR PARTICIPANT_ID    IN (22,41,42,43,45,47,99))
    AND status            =5
    AND device_id NOT    IN
      (SELECT device_id
      FROM cut_pi_financial
      WHERE ud_type               =3
      AND ud_subtype             IN (10,16)  --(10,16)top up
      AND service_participant_id IN (11,12,22,41,42,43,45,47,99)
      AND iss_txn_reflection      ='N'
      AND cch_txn_approved        ='Y'
    -- AND settlement_date         =TRUNC(sysdate)-1
      AND settlement_date             >=TRUNC(sysdate)-7
      );

                              
            loop
              fetch detail
              INTO 
        v_PARTICIPANT_ID,  
        v_PARTICIPANT_NAME, 
        v_LOCATION_ID, 
        v_LOCATION_NAME,  
        v_DEVICE_ID,  
        v_EQUIPMENT_NO, 
        v_CSC_READER_1, 
        v_APPLICATION_MAJOR,  
        v_APPLICATION_MINOR,  
        v_COUNT_TXN,  
        v_SUM_VALUE, 
        v_LAST_USED_TIME 
        ; 

              
              exit
            WHEN detail%notfound;
             
               v_log := '"'||v_PARTICIPANT_ID||'","'||v_PARTICIPANT_NAME||'","'||v_LOCATION_ID||'","'||v_LOCATION_NAME||'","'||v_DEVICE_ID||'","'||v_EQUIPMENT_NO||'","'||v_CSC_READER_1||'","'||v_APPLICATION_MAJOR||'","'||v_APPLICATION_MINOR||'","'||v_COUNT_TXN||'","'||v_SUM_VALUE||'","'||v_LAST_USED_TIME||'",'|| CHR(13);
              
              utl_file.put_line(fhandle, v_log);
              utl_file.fflush(fhandle);
              
            END loop ;
            CLOSE detail;

            utl_file.fclose(fhandle);
          END;         
    
    DECLARE
        
          fhandle utl_file.file_type;
          v_date VARCHAR2(11);
          
          TYPE gencurtyp IS REF CURSOR;
              detail gencurtyp;
              v_log  VARCHAR2(1000);
              v_header_rec VARCHAR2(1000);
             
              v_PARTICIPANT_ID  number;
              v_PARTICIPANT_NAME VARCHAR2(50);
              v_LOCATION_ID number;
              v_LOCATION_NAME  VARCHAR2(100);
              v_last_used_time date;
              v_COUNT_TXN  number;
              v_SUM_VALUE  number;
              
          
            BEGIN
              ----get settlement_date ----
              SELECT to_char(SYSDATE-1,'DD-MON-YYYY')
              INTO v_date
              FROM dual;
            ---------------------------
            fhandle :=utl_file.fopen('EX_DATA_BE','RETAIL_USAGE_BY_LOCATION_7_DAYS_s.'|| v_date || '.csv','w');--Opening a file
            -------------- HEADER ----------------
            SELECT 'PARTICIPANT_ID,PARTICIPANT_NAME,LOCATION_ID,LOCATION_NAME,COUNT_TXN,SUM_VALUE,LAST_USED_TIME' AS HEADER
            INTO v_header_rec
            FROM dual ;
            --------------END HEADER ----------------
            
            
            
            --------------WRITE HEADER---------------
            v_log := v_header_rec ||chr(13);
            utl_file.put_line(fhandle, v_log);
            -----------------------------------------
            OPEN detail FOR 
            
              
    select usage_data.PARTICIPANT_ID
,usage_data.PARTICIPANT_NAME
,usage_data.LOCATION_ID
,usage_data.LOCATION_NAME
,max(usage_data.last_used_time) as last_used_time
,sum(usage_data.COUNT_TXN)as COUNT_TXN
,sum(usage_data.SUM_VALUE) as SUM_VALUE
 from (

select PARTICIPANT_ID,PARTICIPANT_NAME,LOCATION_ID,LOCATION_NAME,DEVICE_ID,EQUIPMENT_NO
,COUNT_TXN
,SUM_VALUE
,max(last_used_time) as last_used_time
from (
          select ca.PARTICIPANT_ID,ca.PARTICIPANT_NAME,ca.LOCATION_ID,ca.LOCATION_NAME,ca.DEVICE_ID,ca.EQUIPMENT_NO,ca.CSC_READER_1
           ,ca.APPLICATION_MAJOR
           ,ca.APPLICATION_MINOR
           ,ca.COUNT_TXN
           ,ca.SUM_VALUE,DV_DEVICE_STATUS.last_used_time+7/24 as last_used_time
                from (
                    select 
                    CUT_ALL.SOURCE_PARTICIPANT_ID as PARTICIPANT_ID
                    ,BSS.CDA.getPartDesc(CUT_ALL.SOURCE_PARTICIPANT_ID,CUT_ALL.DATA_VERSION) AS  PARTICIPANT_NAME
                    --,VV.PARTICIPANT_NAME as PARTICIPANT_NAME
                    ,to_number(substr(to_char(CUT_ALL.device_location,'XXXXXXXX'),-6,6),'XXXXXXXX') as LOCATION_ID
                    ,L.LOCATION_NAME AS LOCATION_NAME
                    ,CUT_ALL.DEVICE_ID
                    ,DD.EQUIPMENT_NO
                    
                    ,DD.CSC_READER_1
                    ,DD.APPLICATION_MAJOR
                    ,DD.APPLICATION_MINOR
                    --,COUNT(CUT_ALL.TRANSACTION_VALUE)AS COUNT_TXN
                    --,SUM(CUT_ALL.TRANSACTION_VALUE*0.01)AS SUM_VALUE
                   ,CASE 
                        WHEN CUT_ALL.UD_SUBTYPE = 19 THEN count(CUT_ALL.TRANSACTION_VALUE*-1) 
                        ELSE count(CUT_ALL.TRANSACTION_VALUE) 
                        END AS COUNT_TXN,
                    
                    CASE 
                        WHEN CUT_ALL.UD_SUBTYPE =19 THEN sum(CUT_ALL.TRANSACTION_VALUE *-1 )*0.01
                        ELSE sum(CUT_ALL.TRANSACTION_VALUE)*0.01 
                        END AS SUM_VALUE
                   
                    from CUT_PI_FINANCIAL CUT_ALL
                    --LEFT JOIN BSS.V_LOCATION_STATUS VV ON CUT_ALL.SOURCE_PARTICIPANT_ID = VV.PARTICIPANT_ID AND CUT_ALL.DATA_VERSION = VV.DATA_VERSION
                    LEFT JOIN SYSCD_LOCATION L on (to_number(substr(to_char(CUT_ALL.device_location,'XXXXXXXX'),-6,6),'XXXXXXXX')=L.location_code) and (CUT_ALL.source_participant_id=L.participant_id) and (CUT_ALL.DATA_VERSION=L.DATA_VERSION) and (L.location_type in (9,15,16,21)) 
                    LEFT JOIN DEVICE.DEVICE_STATUS DD  ON CUT_ALL.SOURCE_PARTICIPANT_ID = DD.PARTICIPANT_ID  AND CUT_ALL.DEVICE_ID = DD.DEVICE_ID
                    where CUT_ALL.SERVICE_PARTICIPANT_ID      IN (11,12,22,41,42,43,45,47,99)
                           AND CUT_ALL.iss_txn_reflection           ='N'
                           AND CUT_ALL.CCH_TXN_APPROVED             ='Y'
                           AND CUT_ALL.UD_TYPE                      =3
                           AND CUT_ALL.UD_SUBTYPE                   IN (13,19) --(10,16)top up
                          -- AND CUT_ALL.settlement_date              =TRUNC(sysdate)-1
                          AND settlement_date             >=TRUNC(sysdate)-7
                           --AND in_serv                      =1
                           --AND CUT_ALL.DEVICE_ID = 655387
                    GROUP BY CUT_ALL.SOURCE_PARTICIPANT_ID ,BSS.CDA.getPartDesc(CUT_ALL.SOURCE_PARTICIPANT_ID,CUT_ALL.DATA_VERSION),CUT_ALL.DEVICE_ID,to_number(substr(to_char(CUT_ALL.device_location,'XXXXXXXX'),-6,6),'XXXXXXXX'),L.LOCATION_NAME,DD.EQUIPMENT_NO
                    ,DD.CSC_READER_1
                    ,DD.APPLICATION_MAJOR
                    ,DD.APPLICATION_MINOR
                    ,CUT_ALL.UD_SUBTYPE
                    ) CA left join DV_DEVICE_STATUS on DV_DEVICE_STATUS.DEVICE_ID=CA.DEVICE_ID
                    order by CA.DEVICE_ID) GROUP BY PARTICIPANT_ID,PARTICIPANT_NAME,LOCATION_ID,LOCATION_NAME,DEVICE_ID,EQUIPMENT_NO,CSC_READER_1
                    ,APPLICATION_MAJOR
                    ,APPLICATION_MINOR
                    ,COUNT_TXN
                    ,SUM_VALUE

union all
             SELECT PARTICIPANT_ID,
      PARTICIPANT_DESC AS PARTICIPANT_NAME,
      LOCATION_ID,
      LOCATION_DESC AS location_name,
      device_id,
      EQUIPMENT_NO,
     /* CSC_READER_1,
      APPLICATION_MAJOR,
      APPLICATION_MINOR,*/
      0 AS COUNT_TXN,
      0 AS sum_value,
     null as last_used_time
    FROM BSS.V_DEVICE_STATUS
    WHERE (PARTICIPANT_ID>=10000
    OR PARTICIPANT_ID    IN (22,41,42,43,45,47,99))
    AND status            =5
    AND device_id NOT    IN
      (SELECT device_id
      FROM cut_pi_financial
      WHERE ud_type               =3
      AND ud_subtype             IN (13,19)  --(10,16)top up
      AND service_participant_id IN (11,12,22,41,42,43,45,47,99)
      AND iss_txn_reflection      ='N'
      AND cch_txn_approved        ='Y'
     -- AND settlement_date         =TRUNC(sysdate)-1
      AND settlement_date             >=TRUNC(sysdate)-7
      
      )
      
    
 )usage_data group by usage_data.LOCATION_ID,
 usage_data.PARTICIPANT_ID
,usage_data.PARTICIPANT_NAME
,usage_data.LOCATION_NAME

 order by      usage_data.PARTICIPANT_ID,usage_data.LOCATION_ID
      ;

                              
            loop
              fetch detail
              INTO 
        v_PARTICIPANT_ID,  
        v_PARTICIPANT_NAME, 
        v_LOCATION_ID, 
        v_LOCATION_NAME,  
        v_LAST_USED_TIME ,
        v_COUNT_TXN,  
        v_SUM_VALUE
        ; 

              
              exit
            WHEN detail%notfound;
             
               v_log := '"'||v_PARTICIPANT_ID||'","'||v_PARTICIPANT_NAME||'","'||v_LOCATION_ID||'","'||v_LOCATION_NAME||'","'||v_LAST_USED_TIME||'","'||v_COUNT_TXN||'","'||v_SUM_VALUE||'",'|| CHR(13);
              
              utl_file.put_line(fhandle, v_log);
              utl_file.fflush(fhandle);
              
            END loop ;
            CLOSE detail;

            utl_file.fclose(fhandle);
          END;         
   
    DECLARE
        
          fhandle utl_file.file_type;
          v_date VARCHAR2(11);
          
          TYPE gencurtyp IS REF CURSOR;
              detail gencurtyp;
              v_log  VARCHAR2(1000);
              v_header_rec VARCHAR2(1000);
             
              v_PARTICIPANT_ID  number;
              v_PARTICIPANT_NAME VARCHAR2(50);
              v_LOCATION_ID number;
              v_LOCATION_NAME  VARCHAR2(100);
              v_last_used_time date;
              v_COUNT_TXN  number;
              v_SUM_VALUE  number;
              
          
            BEGIN
              ----get settlement_date ----
              SELECT to_char(SYSDATE-1,'DD-MON-YYYY')
              INTO v_date
              FROM dual;
            ---------------------------
            fhandle :=utl_file.fopen('EX_DATA_BE','RETAIL_TOPUP_BY_LOCATION_7_DAYS_s.'|| v_date || '.csv','w');--Opening a file
            -------------- HEADER ----------------
            SELECT 'PARTICIPANT_ID,PARTICIPANT_NAME,LOCATION_ID,LOCATION_NAME,COUNT_TXN,SUM_VALUE,LAST_USED_TIME' AS HEADER
            INTO v_header_rec
            FROM dual ;
            --------------END HEADER ----------------
            
            
            
            --------------WRITE HEADER---------------
            v_log := v_header_rec ||chr(13);
            utl_file.put_line(fhandle, v_log);
            -----------------------------------------
            OPEN detail FOR 
            
              
    select usage_data.PARTICIPANT_ID
,usage_data.PARTICIPANT_NAME
,usage_data.LOCATION_ID
,usage_data.LOCATION_NAME
,max(usage_data.last_used_time) as last_used_time
,sum(usage_data.COUNT_TXN)as COUNT_TXN
,sum(usage_data.SUM_VALUE) as SUM_VALUE
 from (

select PARTICIPANT_ID,PARTICIPANT_NAME,LOCATION_ID,LOCATION_NAME,DEVICE_ID,EQUIPMENT_NO
,COUNT_TXN
,SUM_VALUE
,max(last_used_time) as last_used_time
from (
          select ca.PARTICIPANT_ID,ca.PARTICIPANT_NAME,ca.LOCATION_ID,ca.LOCATION_NAME,ca.DEVICE_ID,ca.EQUIPMENT_NO,ca.CSC_READER_1
           ,ca.APPLICATION_MAJOR
           ,ca.APPLICATION_MINOR
           ,ca.COUNT_TXN
           ,ca.SUM_VALUE,DV_DEVICE_STATUS.last_used_time+7/24 as last_used_time
                from (
                    select 
                    CUT_ALL.SOURCE_PARTICIPANT_ID as PARTICIPANT_ID
                    ,BSS.CDA.getPartDesc(CUT_ALL.SOURCE_PARTICIPANT_ID,CUT_ALL.DATA_VERSION) AS  PARTICIPANT_NAME
                    --,VV.PARTICIPANT_NAME as PARTICIPANT_NAME
                    ,to_number(substr(to_char(CUT_ALL.device_location,'XXXXXXXX'),-6,6),'XXXXXXXX') as LOCATION_ID
                    ,L.LOCATION_NAME AS LOCATION_NAME
                    ,CUT_ALL.DEVICE_ID
                    ,DD.EQUIPMENT_NO
                    
                    ,DD.CSC_READER_1
                    ,DD.APPLICATION_MAJOR
                    ,DD.APPLICATION_MINOR
                   -- ,COUNT(CUT_ALL.TRANSACTION_VALUE)AS COUNT_TXN
                   -- ,SUM(CUT_ALL.TRANSACTION_VALUE*0.01)AS SUM_VALUE
                    ,CASE 
                        WHEN CUT_ALL.UD_SUBTYPE = 16 THEN count(CUT_ALL.TRANSACTION_VALUE*-1) 
                        ELSE count(CUT_ALL.TRANSACTION_VALUE) 
                        END AS COUNT_TXN,
                    
                    CASE 
                        WHEN CUT_ALL.UD_SUBTYPE =16 THEN sum(CUT_ALL.TRANSACTION_VALUE *-1 )*0.01
                        ELSE sum(CUT_ALL.TRANSACTION_VALUE)*0.01 
                        END AS SUM_VALUE
                    
                    from CUT_PI_FINANCIAL CUT_ALL
                    --LEFT JOIN BSS.V_LOCATION_STATUS VV ON CUT_ALL.SOURCE_PARTICIPANT_ID = VV.PARTICIPANT_ID AND CUT_ALL.DATA_VERSION = VV.DATA_VERSION
                    LEFT JOIN SYSCD_LOCATION L on (to_number(substr(to_char(CUT_ALL.device_location,'XXXXXXXX'),-6,6),'XXXXXXXX')=L.location_code) and (CUT_ALL.source_participant_id=L.participant_id) and (CUT_ALL.DATA_VERSION=L.DATA_VERSION) and (L.location_type in (9,15,16,21)) 
                    LEFT JOIN DEVICE.DEVICE_STATUS DD  ON CUT_ALL.SOURCE_PARTICIPANT_ID = DD.PARTICIPANT_ID  AND CUT_ALL.DEVICE_ID = DD.DEVICE_ID
                    where CUT_ALL.SERVICE_PARTICIPANT_ID      IN (11,12,22,41,42,43,45,47,99)
                           AND CUT_ALL.iss_txn_reflection           ='N'
                           AND CUT_ALL.CCH_TXN_APPROVED             ='Y'
                           AND CUT_ALL.UD_TYPE                      =3
                           AND CUT_ALL.UD_SUBTYPE                   IN (10,16) --(10,16)top up
                          -- AND CUT_ALL.settlement_date              =TRUNC(sysdate)-1
                          AND settlement_date             >=TRUNC(sysdate)-7
                           --AND in_serv                      =1
                           --AND CUT_ALL.DEVICE_ID = 655387
                    GROUP BY CUT_ALL.SOURCE_PARTICIPANT_ID ,BSS.CDA.getPartDesc(CUT_ALL.SOURCE_PARTICIPANT_ID,CUT_ALL.DATA_VERSION),CUT_ALL.DEVICE_ID,to_number(substr(to_char(CUT_ALL.device_location,'XXXXXXXX'),-6,6),'XXXXXXXX'),L.LOCATION_NAME,DD.EQUIPMENT_NO
                    ,DD.CSC_READER_1
                    ,DD.APPLICATION_MAJOR
                    ,DD.APPLICATION_MINOR
                   ,CUT_ALL.UD_SUBTYPE 
                    ) CA left join DV_DEVICE_STATUS on DV_DEVICE_STATUS.DEVICE_ID=CA.DEVICE_ID
                    order by CA.DEVICE_ID) GROUP BY PARTICIPANT_ID,PARTICIPANT_NAME,LOCATION_ID,LOCATION_NAME,DEVICE_ID,EQUIPMENT_NO,CSC_READER_1
                    ,APPLICATION_MAJOR
                    ,APPLICATION_MINOR
                    ,COUNT_TXN
                    ,SUM_VALUE

union all
             SELECT PARTICIPANT_ID,
      PARTICIPANT_DESC AS PARTICIPANT_NAME,
      LOCATION_ID,
      LOCATION_DESC AS location_name,
      device_id,
      EQUIPMENT_NO,
     /* CSC_READER_1,
      APPLICATION_MAJOR,
      APPLICATION_MINOR,*/
      0 AS COUNT_TXN,
      0 AS sum_value,
     null as last_used_time
    FROM BSS.V_DEVICE_STATUS
    WHERE (PARTICIPANT_ID>=10000
    OR PARTICIPANT_ID    IN (22,41,42,43,45,47,99))
    AND status            =5
    AND device_id NOT    IN
      (SELECT device_id
      FROM cut_pi_financial
      WHERE ud_type               =3
      AND ud_subtype             IN (10,16)  --(10,16)top up
      AND service_participant_id IN (11,12,22,41,42,43,45,47,99)
      AND iss_txn_reflection      ='N'
      AND cch_txn_approved        ='Y'
     -- AND settlement_date         =TRUNC(sysdate)-1
      AND settlement_date             >=TRUNC(sysdate)-7
      
      )
      
    
 )usage_data group by usage_data.LOCATION_ID,
 usage_data.PARTICIPANT_ID
,usage_data.PARTICIPANT_NAME
,usage_data.LOCATION_NAME

 order by      usage_data.PARTICIPANT_ID,usage_data.LOCATION_ID
      ;

                              
            loop
              fetch detail
              INTO 
        v_PARTICIPANT_ID,  
        v_PARTICIPANT_NAME, 
        v_LOCATION_ID, 
        v_LOCATION_NAME,  
        v_LAST_USED_TIME ,
        v_COUNT_TXN,  
        v_SUM_VALUE
        ; 

              
              exit
            WHEN detail%notfound;
             
               v_log := '"'||v_PARTICIPANT_ID||'","'||v_PARTICIPANT_NAME||'","'||v_LOCATION_ID||'","'||v_LOCATION_NAME||'","'||v_LAST_USED_TIME||'","'||v_COUNT_TXN||'","'||v_SUM_VALUE||'",'|| CHR(13);
              
              utl_file.put_line(fhandle, v_log);
              utl_file.fflush(fhandle);
              
            END loop ;
            CLOSE detail;

            utl_file.fclose(fhandle);
          END;         
  
         --send mail--
          DECLARE
          smtpservername VARCHAR2(200);
          sender VARCHAR2(200);
          recipient VARCHAR2(250);
          ccrecipient VARCHAR2(250);
          bccrecipient VARCHAR2(250);
          subject VARCHAR2(250);
          BODY VARCHAR2(250);
          errormessage VARCHAR2(250);
          attachments sendmailjpkg.attachments_list;
          v_return NUMBER;
          v_date date;
          lb_monitor varchar2(50);
         
          BEGIN
          
            SELECT to_char(SYSDATE-1,'dd-MON-yyyy')
              INTO v_date
              FROM dual;
              
              select  to_char(sum(value),'9,999,999,999,999.99') 
            into lb_monitor
            
            from
            (select 
            sum(lb_value) as value
            from BSS_REPORTS.BOT_LB_ACCT
            where month = (select max(month) from BSS_REPORTS.BOT_LB_ACCT)
            union all
            select
            sum(VALUE) 
            from BSS_REPORTS.BOT_LB_DATA
            where SETTLEMENT_DATE >
            (select max(month) from BSS_REPORTS.BOT_LB_ACCT));
           
            dbms_java.grant_permission( 'BSS', 'SYS:java.io.FilePermission', '/export/home/bssuser/dba_directory/PL_SQL/EX_DATA/RETAIL_USAGE_BY_DEVICE_1_DAYS_s.'|| to_char(SYSDATE-1,'DD-MON-YYYY') || '.csv', 'read' );
            dbms_java.grant_permission( 'BSS', 'SYS:java.io.FilePermission', '/export/home/bssuser/dba_directory/PL_SQL/EX_DATA/RETAIL_USAGE_BY_DEVICE_7_DAYS_s.'|| to_char(SYSDATE-1,'DD-MON-YYYY') || '.csv', 'read' );
            dbms_java.grant_permission( 'BSS', 'SYS:java.io.FilePermission', '/export/home/bssuser/dba_directory/PL_SQL/EX_DATA/RETAIL_TOPUP_BY_DEVICE_1_DAYS_s.'|| to_char(SYSDATE-1,'DD-MON-YYYY') || '.csv', 'read' );
            dbms_java.grant_permission( 'BSS', 'SYS:java.io.FilePermission', '/export/home/bssuser/dba_directory/PL_SQL/EX_DATA/RETAIL_TOPUP_BY_DEVICE_7_DAYS_s.'|| to_char(SYSDATE-1,'DD-MON-YYYY') || '.csv', 'read' );
            dbms_java.grant_permission( 'BSS', 'SYS:java.io.FilePermission', '/export/home/bssuser/dba_directory/PL_SQL/EX_DATA/RETAIL_USAGE_BY_LOCATION_7_DAYS_s.'|| to_char(SYSDATE-1,'DD-MON-YYYY') || '.csv', 'read' ); 
             dbms_java.grant_permission( 'BSS', 'SYS:java.io.FilePermission', '/export/home/bssuser/dba_directory/PL_SQL/EX_DATA/RETAIL_TOPUP_BY_LOCATION_7_DAYS_s.'|| to_char(SYSDATE-1,'DD-MON-YYYY') || '.csv', 'read' ); 
                          
            COMMIT;
            smtpservername := '127.0.0.1';
            sender := 'be@rabbit.co.th';
            recipient := 'anuchan@rabbit.co.th';
            ccrecipient := 'be@rabbit.co.th';
            bccrecipient := NULL;
            subject := 'SP_RETAIL_TXN_s.' || to_char(SYSDATE-1, 'YYYYMMDD') ;
            BODY := 'Dear ALL,' || chr(13) || chr(13) ||
        
                         '   SP_RETAIL_TXN_s.' || to_char(SYSDATE-1, 'YYYYMMDD') || ' as attached.' || chr(13) || chr(13) ||
        
                      'Best Regards,'|| chr(13) 
                      ;
            -- Modify the code to initialize the variable
            attachments := sendmailjpkg.attachments_list('/export/home/bssuser/dba_directory/PL_SQL/EX_DATA/RETAIL_USAGE_BY_DEVICE_1_DAYS_s.'|| to_char(SYSDATE-1,'DD-MON-YYYY') || '.csv','/export/home/bssuser/dba_directory/PL_SQL/EX_DATA/RETAIL_USAGE_BY_DEVICE_7_DAYS_s.'|| to_char(SYSDATE-1,'DD-MON-YYYY') || '.csv','/export/home/bssuser/dba_directory/PL_SQL/EX_DATA/RETAIL_TOPUP_BY_DEVICE_1_DAYS_s.'|| to_char(SYSDATE-1,'DD-MON-YYYY') || '.csv','/export/home/bssuser/dba_directory/PL_SQL/EX_DATA/RETAIL_TOPUP_BY_DEVICE_7_DAYS_s.'|| to_char(SYSDATE-1,'DD-MON-YYYY') || '.csv','/export/home/bssuser/dba_directory/PL_SQL/EX_DATA/RETAIL_USAGE_BY_LOCATION_7_DAYS_s.'|| to_char(SYSDATE-1,'DD-MON-YYYY') || '.csv','/export/home/bssuser/dba_directory/PL_SQL/EX_DATA/RETAIL_TOPUP_BY_LOCATION_7_DAYS_s.'|| to_char(SYSDATE-1,'DD-MON-YYYY') || '.csv');
            v_return := sendmailjpkg.sendmail(
              smtpservername => smtpservername,
              sender => sender,
              recipient => recipient,
              ccrecipient => ccrecipient,
              bccrecipient => bccrecipient,
              subject => subject,
              BODY => BODY,
              errormessage => errormessage,
              attachments => attachments
            );
            
          END; 
END SP_RETAIL_TXN ;

PROCEDURE z203_retailexceptiontxn_new2 (
                                     v_cursor OUT t_cur,
                                     start_date IN DATE,
                                     end_date IN DATE
                                     )
  AS
  vstartdate DATE;
  venddate DATE;
  BEGIN
    IF start_date IS NOT NULL
    THEN
      vstartdate := TRUNC (start_date);
    ELSE
      vstartdate := reports.bkk_int_dfv.getdefaultsettledate;
    END IF;

    IF end_date IS NOT NULL
    THEN
      venddate := TRUNC (end_date);
    ELSE
      venddate := reports.bkk_int_dfv.getdefaultsettledate;
    END IF;

    OPEN v_cursor FOR
    
    SELECT /*NAME:z203_retailexceptiontxn_new*/
    trim(TO_CHAR (rte.eft_terminal_id, 'XXXXXXXX')) eft_terminal_id,
    --rte.eft_terminal_id,
    rte.settlement_date,
    reports.bkk_int_fun.getparticipantname (rte.service_participant_id) AS spgid,
    reports.bkk_int_fun.getparticipantname (rte.source_participant_id) AS spid,
    --TO_CHAR (rte.device_id, 'XXXXXXX') device_id,
    trim(TO_CHAR (rte.device_id, 'XXXXXXXX')) device_id,
    rte.equipment_number,
    reports.bkk_int_fun.getexceptiontypelongdesc (SUBSTR (rte.exception_list, 1, 3)) AS exception_category,
    CASE
      WHEN rte.cch_txn_approved = 'Y'
      THEN 'GFS'
      WHEN rte.cch_txn_approved = 'N'
      THEN 'NGFS'
    ELSE NULL
    END AS gfsngfs,
     '088' || lpad(rte.CARD_SERIAL_NUMBER,9,'0') AS split_card_serial_number, 
    --rte.card_serial_number AS split_card_serial_number, 
    rte.udsn,
    --rte.exception_list, 
        case 
      when rte.exception_list like '%EXT%' THEN 'EXPIRED_TXN'
      when rte.exception_list like '%IND%' THEN 'INVALID_DEVICE'
      ELSE rte.exception_list
      end as EXCEPTION_LIST,
    rte.business_date,
    reports.bkk_int_fun.gettransactiondesc
    (rte.ud_type,
     rte.ud_subtype
     ) AS txn_desc,
    CASE 
      WHEN rte.UD_SUBTYPE = 19 THEN NVL ((rte.transaction_value * 0.01) * -1 ,0)
      ELSE NVL(rte.transaction_value * 0.01 ,0)
      END AS transaction_value 
   
   -- NVL ((rte.transaction_value * 0.01), 0) AS transaction_value   
    FROM cut_pi_financial rte
          --, systemcd.v_part_and_role1 vpar
    WHERE rte.settlement_date BETWEEN vstartdate AND venddate
    AND rte.service_participant_id = 11
    AND cch_exception = 'Y'
    AND iss_txn_reflection = 'N'
    AND rte.exception_list not like '%DDT%'     --- siriluck 18/05/2020  request by RC (don't show DDT in report) ---
    --and (rte.ud_type,rte.UD_SUBTYPE) not in ((3,10),(3,16),(5,1));
    and (rte.ud_type,rte.UD_SUBTYPE) in ((3,13),(3,19));
  END z203_retailexceptiontxn_new2;


PROCEDURE DAILY_BUS_SALAYA
    AS 

    BEGIN
          
           DECLARE
        
          fhandle utl_file.file_type;
          v_date VARCHAR2(11);
          TYPE gencurtyp IS REF CURSOR;
              detail gencurtyp;
              v_log  VARCHAR2(1000);
              v_header_rec VARCHAR2(1000);
             
              v_CARD_SERIAL_NUMBER VARCHAR2(100);
              v_TXN_DATE_TIME date;
              v_LOCATION_NAME VARCHAR2(100);
              v_EQUIPMENT_NO VARCHAR2(50);
              v_BSS_TXN_TYPE VARCHAR2(50); 
              v_TRANSACTION_VALUE number;
              v_PTSN number;
              v_RECONCILIATION_DATE date;
              v_SETTLEMENT_DATE date;
              v_DEVICE_ID number;
              v_UDSN number;
              v_SOURCE_PARTICIPANT_ID number;
              v_SP_NAME VARCHAR2(100);
             
         
                         

            BEGIN
              ----get settlement_date ----
              SELECT to_char(SYSDATE-1,'DD-MON-YYYY')
              INTO v_date
              FROM dual;
            ---------------------------
            fhandle :=utl_file.fopen('EX_DATA_BE','DAILY_BUS_SALAYA_s.'|| v_date || '.csv','w');--Opening a file
            -------------- HEADER ----------------
            SELECT 'CARD_SERIAL_NUMBER,TXN_DATE_TIME,LOCATION_NAME,EQUIPMENT_NO,BSS_TXN_TYPE,TRANSACTION_VALUE,PTSN,RECONCILIATION_DATE,SETTLEMENT_DATE,DEVICE_ID,UDSN,SOURCE_PARTICIPANT_ID,SP_NAME' AS HEADER
            INTO v_header_rec
            FROM dual ;
            --------------END HEADER ----------------
            --------------WRITE HEADER---------------
            v_log := v_header_rec ||chr(13);
            utl_file.put_line(fhandle, v_log);
            -----------------------------------------
            OPEN detail FOR 
                
     SELECT
      --TXN_DATE_TIME
      '88' || lpad(CARD_SERIAL_NUMBER,9,'0') AS CARD_SERIAL_NUMBER,
      to_date(RP_STD.TOLOCALTIME(TXN_DATE_TIME),'DD-MON-YY HH24:MI:SS') AS TXN_DATE_TIME
      ,L.LOCATION_NAME AS LOCATION_NAME
      ,DEVICE_STATUS.EQUIPMENT_NO AS EQUIPMENT_NO,
      
      CUT_ALL.TXN_TYPE as BSS_TXN_TYPE
      ,TRANSACTION_VALUE*0.01 as TRANSACTION_VALUE,PTSN,
      --RECONCILIATION_DATE,
      to_date(RECONCILIATION_DATE,'DD-MON-YY HH24:MI:SS') AS RECONCILIATION_DATE,
      --SETTLEMENT_DATE,
      to_date(SETTLEMENT_DATE,'DD-MON-YY HH24:MI:SS') AS SETTLEMENT_DATE, 
      CUT_ALL.DEVICE_ID as DEVICE_ID ,UDSN,
      --SOURCE_PARTICIPANT_ID AS SRC,
      source_participant_id
      ,reports.bkk_int_fun.getparticipantlongname(SOURCE_PARTICIPANT_ID) as SP_NAME
      FROM
      (
      
      SELECT lower_ptsn,upper_ptsn,null as remaining_rides,CARD_SERIAL_NUMBER,TRANSACTION_VALUE,PURSE_REMAINING_VALUE,REPORTS.BKK_INT_FUN.GETTRANSACTIONDESC (UD_TYPE,UD_SUBTYPE) AS TXN_TYPE,A.EXCEPTION_LIST, A.UD_TYPE,A.UD_SUBTYPE,A.TXN_DATE_TIME,RECONCILIATION_DATE,LAV_DATE_TIME,A.CARD_SEQUENCE_NUMBER,PTSN,'CUT_PI_FINANCIAL' AS TABLE_NAME,SOURCE_PARTICIPANT_ID,SERVICE_PARTICIPANT_ID,DESTINATION_PARTICIPANT_ID,DEVICE_ID,UDSN,device_location,to_number(substr(to_char(device_location,'XXXXXXXX'),-6,6),'XXXXXXXX') as location_id_trf, DATA_VERSION,ORIGINAL_FILE_NAME,original_txn_type,SETTLEMENT_DATE,iss_txn_reflection,cch_txn_approved
      ,payment_method0,payment_value0,payment_method1,payment_value1,payment_method2,payment_value2,payment_method3,payment_value3
      ,LAV_PARTICIPANT_ID, LAV_SAM_ID, LAV_PTSN, LAV_TXN_VALUE, LAV_REMAINING_VALUE,  null as LAV_REMAINING_RIDES, LAV_METHOD_OF_PAYMENT
      FROM CUT_PI_FINANCIAL A
      
      ) CUT_ALL
      left join DEVICE_STATUS on CUT_ALL.Device_ID=DEVICE_STATUS.Device_ID and CUT_ALL.SOURCE_PARTICIPANT_ID=DEVICE_STATUS.PARTICIPANT_ID
      left join SYSTEMCD.SYSCD_TXN T on (CUT_ALL.DATA_VERSION=T.DATA_VERSION) AND (CUT_ALL.UD_TYPE=T.TXN_TYPE) AND  (CUT_ALL.UD_SUBTYPE=T.TXN_SUBTYPE)
      left join SYSCD_LOCATION L on (to_number(substr(to_char(CUT_ALL.device_location,'XXXXXXXX'),-6,6),'XXXXXXXX')=L.location_code) and (CUT_ALL.source_participant_id=L.participant_id) and (CUT_ALL.DATA_VERSION=L.DATA_VERSION) and (L.location_type in (9,15,16))
      WHERE CUT_ALL.iss_txn_reflection = 'N'
      and CUT_ALL.cch_txn_approved = 'Y'
      AND CUT_ALL.settlement_date = TRUNC(SYSDATE-1)
      and source_participant_id = 104
      ;  
                              
            loop
              fetch detail
              INTO 
              v_CARD_SERIAL_NUMBER,
              v_TXN_DATE_TIME,
              v_LOCATION_NAME ,
              v_EQUIPMENT_NO ,
              v_BSS_TXN_TYPE ,
              v_TRANSACTION_VALUE ,
              v_PTSN,
              v_RECONCILIATION_DATE ,
              v_SETTLEMENT_DATE ,
              v_DEVICE_ID ,
              v_UDSN,
              v_SOURCE_PARTICIPANT_ID ,
              v_SP_NAME ;

              
              exit
            WHEN detail%notfound;
             
              v_log := v_CARD_SERIAL_NUMBER||','||v_TXN_DATE_TIME||','||v_LOCATION_NAME||','||v_EQUIPMENT_NO||','||v_BSS_TXN_TYPE||','||v_TRANSACTION_VALUE||','||v_PTSN||','||v_RECONCILIATION_DATE||','||v_SETTLEMENT_DATE||','||v_DEVICE_ID||','||v_UDSN||','||v_SOURCE_PARTICIPANT_ID||','||v_SP_NAME||chr(13);
              
              utl_file.put_line(fhandle, v_log);
              utl_file.fflush(fhandle);
              
            END loop ;
            CLOSE detail;

            utl_file.fclose(fhandle);
          END;
          
         --send mail--
           DECLARE
          smtpservername VARCHAR2(200);
          sender VARCHAR2(200);
          recipient VARCHAR2(250);
          ccrecipient VARCHAR2(250);
          bccrecipient VARCHAR2(250);
          subject VARCHAR2(250);
          BODY VARCHAR2(250);
          errormessage VARCHAR2(250);
          attachments sendmailjpkg.attachments_list;
          v_return NUMBER;
          v_date date;
         
          BEGIN
          
            SELECT to_char(SYSDATE-1,'dd-MON-yyyy')
              INTO v_date
              FROM dual;
            dbms_java.grant_permission( 'BSS', 'SYS:java.io.FilePermission', '/export/home/bssuser/dba_directory/PL_SQL/EX_DATA/DAILY_BUS_SALAYA_s.'|| to_char(SYSDATE-1,'DD-MON-YYYY') || '.csv', 'read' );
            COMMIT;
            smtpservername := '127.0.0.1';
            sender := 'be@rabbit.co.th';
            recipient := 'aoychantima@gmail.com,borvorn.t@btg.co.th';
           ccrecipient := 'be@rabbit.co.th,wasino@rabbit.co.th,project@rabbit.co.th';
            bccrecipient := NULL;
            subject := 'DAILY_BUS_SALAYA_s.' || to_char(SYSDATE-1, 'YYYYMMDD') ;
            BODY := 'Dear ALL,' || chr(13) || chr(13) ||
        
                        '    DAILY_BUS_SALAYA s.' || to_char(SYSDATE-1, 'YYYYMMDD') || ' as attached.' || chr(13) || chr(13) ||
        
                      'Best Regards,'|| chr(13) 
                      ;
            -- Modify the code to initialize the variable
             attachments := sendmailjpkg.attachments_list('/export/home/bssuser/dba_directory/PL_SQL/EX_DATA/DAILY_BUS_SALAYA_s.'|| to_char(SYSDATE-1,'DD-MON-YYYY') || '.csv');
              v_return := sendmailjpkg.sendmail(
              smtpservername => smtpservername,
              sender => sender,
              recipient => recipient,
              ccrecipient => ccrecipient,
              bccrecipient => bccrecipient,
              subject => subject,
              BODY => BODY,
              errormessage => errormessage,
              attachments => attachments
            );
            
          END; 
END DAILY_BUS_SALAYA;

PROCEDURE DAILY_SMARTBUS_CARDSALE
    AS 

    BEGIN
          
           DECLARE
        
          fhandle utl_file.file_type;
          v_date VARCHAR2(11);
          TYPE gencurtyp IS REF CURSOR;
              detail gencurtyp;
              v_log  VARCHAR2(1000);
              v_header_rec VARCHAR2(1000);
             
              v_PARTICIPANT_NAME VARCHAR2(100);
              v_BUS_ROUTE_ID VARCHAR2(100);
              v_BUS_ID VARCHAR2(100);
              v_device_id VARCHAR2(50);
              v_CARD_SERIAL_NUMBER VARCHAR2(50); 
              v_CARD_TYPE VARCHAR2(50);
              v_LOC_TXN_DATE_TIME date;
              v_RECONCILIATION_DATE VARCHAR2(50);
              v_SETTLEMENT_DATE VARCHAR2(50) ;
              v_TRANSACTION_VALUE number;                                       

            BEGIN
              ----get settlement_date ----
              SELECT to_char(SYSDATE-1,'DD-MON-YYYY')
              INTO v_date
              FROM dual;
            ---------------------------
            fhandle :=utl_file.fopen('EX_DATA_BE','SMARTBUS_CARDSALE_s.'|| v_date || '.csv','w');--Opening a file
            -------------- HEADER ----------------
            SELECT 'PARTICIPANT_NAME,BUS_ROUTE_ID,BUS_ID,DEVICE_ID,CARD_SERIAL_NUMBER,CARD_TYPE,LOC_TXN_DATE_TIME,RECONCILIATION_DATE,SETTLEMENT_DATE,TRANSACTION_VALUE' AS HEADER
            INTO v_header_rec
            FROM dual ;
            --------------END HEADER ----------------
            --------------WRITE HEADER---------------
            v_log := v_header_rec ||chr(13);
            utl_file.put_line(fhandle, v_log);
            -----------------------------------------
            OPEN detail FOR 
                
SELECT  Participant_name,BUS_ROUTE_ID,BUS_ID,device_id,CARD_SERIAL_NUMBER,CARD_TYPE,LOC_TXN_DATE_TIME,RECONCILIATION_DATE,SETTLEMENT_DATE,TRANSACTION_VALUE from (
SELECT  SOURCE_PARTICIPANT_ID ||' '|| reports.BKK_INT_FUN.GetParticipantLongName (SOURCE_PARTICIPANT_ID) as Participant_name,
to_number(substr(lpad(trim(to_char(EFT_TERMINAL_ID,'XXXXXXXXXXXXXXXX')),16,'0'),11,4),'xxxx') as BUS_ROUTE_ID,
to_number(substr(lpad(trim(to_char(EFT_TRACE_NUMBER,'XXXXXXXXXXXXXXXX')),16,'0'),13,4),'xxxx') as BUS_ID,
'(' ||
    DEVICE_STATUS.EQUIPMENT_NO
    || ') : ' ||
    lpad(trim(to_char(CUT_ALL.DEVICE_ID,'XXXXXXXX')),8,'0')  as device_id,
'88' || lpad(CARD_SERIAL_NUMBER,9,'0') AS CARD_SERIAL_NUMBER,
reports.bkk_int_fun.getpassengertype (aa.passenger_type,reports.bkk_int_fun.getdataversion(), 'en') AS CARD_TYPE,
TXN_DATE_TIME+7/24 as LOC_TXN_DATE_TIME ,
to_char(RECONCILIATION_DATE,'DD/MM/YYYY') AS RECONCILIATION_DATE,
to_char(SETTLEMENT_DATE,'DD/MM/YYYY') AS SETTLEMENT_DATE, 
TRANSACTION_VALUE*0.01 as TRANSACTION_VALUE
FROM
(
SELECT lower_ptsn,upper_ptsn,null as remaining_rides,CARD_SERIAL_NUMBER,TRANSACTION_VALUE,PURSE_REMAINING_VALUE,REPORTS.BKK_INT_FUN.GETTRANSACTIONDESC (UD_TYPE,UD_SUBTYPE) AS TXN_TYPE,A.EXCEPTION_LIST, A.UD_TYPE,A.UD_SUBTYPE,A.TXN_DATE_TIME,RECONCILIATION_DATE,LAV_DATE_TIME,A.CARD_SEQUENCE_NUMBER,PTSN,'CUT_PI_FINANCIAL' AS TABLE_NAME,SOURCE_PARTICIPANT_ID,SERVICE_PARTICIPANT_ID,DESTINATION_PARTICIPANT_ID,DEVICE_ID,UDSN,device_location,to_number(substr(to_char(device_location,'XXXXXXXX'),-6,6),'XXXXXXXX') as location_id_trf, DATA_VERSION,ORIGINAL_FILE_NAME,original_txn_type,SETTLEMENT_DATE,iss_txn_reflection,cch_txn_approved
,payment_method0,payment_value0,payment_method1,payment_value1,payment_method2,payment_value2,payment_method3,payment_value3
,LAV_PARTICIPANT_ID, LAV_SAM_ID, LAV_PTSN, LAV_TXN_VALUE, LAV_REMAINING_VALUE,  null as LAV_REMAINING_RIDES, LAV_METHOD_OF_PAYMENT
,EFT_TERMINAL_ID ,EFT_TRACE_NUMBER,CARD_LIFE_CYCLE_COUNT,product_issuer_id,product_type
FROM CUT_PI_FINANCIAL A


) CUT_ALL
left join DEVICE_STATUS on CUT_ALL.Device_ID=DEVICE_STATUS.Device_ID and CUT_ALL.SOURCE_PARTICIPANT_ID=DEVICE_STATUS.PARTICIPANT_ID
left join SYSTEMCD.SYSCD_TXN T on (CUT_ALL.DATA_VERSION=T.DATA_VERSION) AND (CUT_ALL.UD_TYPE=T.TXN_TYPE) AND  (CUT_ALL.UD_SUBTYPE=T.TXN_SUBTYPE)
left join SYSCD_LOCATION L on (to_number(substr(to_char(CUT_ALL.device_location,'XXXXXXXX'),-6,6),'XXXXXXXX')=L.location_code) and (CUT_ALL.source_participant_id=L.participant_id) and (CUT_ALL.DATA_VERSION=L.DATA_VERSION) and (L.location_type in (9,15,16))
left join application_account aa on CUT_ALL.card_serial_number = aa.csc_serial_number and CUT_ALL.CARD_LIFE_CYCLE_COUNT = aa.csc_lifecycle_count
WHERE CUT_ALL.iss_txn_reflection = 'N'
AND CUT_ALL.settlement_date = TRUNC(SYSDATE-1)
--AND CUT_ALL.settlement_date = '8-NOV-2019'
--AND (vparticipantid IS NULL OR source_participant_id = vparticipantid)
and source_participant_id in (119)
--and aa.passenger_type not in(11,30,31)
--and 
and ud_type = 3 and ud_subtype = 10
and to_number(substr(lpad(trim(to_char(EFT_TRACE_NUMBER,'XXXXXXXXXXXXXXXX')),16,'0'),11,2),'xxxx') = 1
and cch_txn_approved = 'Y'
ORDER BY TXN_DATE_TIME DESC,CARD_SERIAL_NUMBER,device_id
);   
                              
            loop
              fetch detail
              INTO 
                v_PARTICIPANT_NAME,
                v_BUS_ROUTE_ID,
                v_BUS_ID,
                v_DEVICE_ID,
                v_CARD_SERIAL_NUMBER,
                v_CARD_TYPE,
                v_LOC_TXN_DATE_TIME ,
                v_RECONCILIATION_DATE,
                v_SETTLEMENT_DATE, 
                v_TRANSACTION_VALUE;

              
              exit
            WHEN detail%notfound;
             
              v_log := v_PARTICIPANT_NAME||','||v_BUS_ROUTE_ID||','||v_BUS_ID||','||v_DEVICE_ID||','||v_CARD_SERIAL_NUMBER||','||v_CARD_TYPE||','||v_LOC_TXN_DATE_TIME||','||v_RECONCILIATION_DATE||','||v_SETTLEMENT_DATE||','||v_TRANSACTION_VALUE||chr(13);
              
              utl_file.put_line(fhandle, v_log);
              utl_file.fflush(fhandle);
              
            END loop ;
            CLOSE detail;

            utl_file.fclose(fhandle);
          END;
          
         --send mail--
           DECLARE
          smtpservername VARCHAR2(200);
          sender VARCHAR2(200);
          recipient VARCHAR2(250);
          ccrecipient VARCHAR2(250);
          bccrecipient VARCHAR2(250);
          subject VARCHAR2(250);
          BODY VARCHAR2(250);
          errormessage VARCHAR2(250);
          attachments sendmailjpkg.attachments_list;
          v_return NUMBER;
          v_date date;
         
          BEGIN
          
            SELECT to_char(SYSDATE-1,'dd-MON-yyyy')
              INTO v_date
              FROM dual;
            dbms_java.grant_permission( 'BSS', 'SYS:java.io.FilePermission', '/export/home/bssuser/dba_directory/PL_SQL/EX_DATA/SMARTBUS_CARDSALE_s.'|| to_char(SYSDATE-1,'DD-MON-YYYY') || '.csv', 'read' );
            COMMIT;
            smtpservername := '127.0.0.1';
            sender := 'be@rabbit.co.th';
            recipient := 'rc@rabbit.co.th,saibuas@rabbit.co.th,teerachetc@rabbit.co.th,rawiwans@rabbit.co.th';
           ccrecipient := 'be@rabbit.co.th';
            bccrecipient := NULL;
            subject := 'DAILY_SMARTBUS_CARD_SALE_DETAIL_s.' || to_char(SYSDATE-1, 'YYYYMMDD') ;
            BODY := 'Dear ALL,' || chr(13) || chr(13) ||
        
                        '    SMARTBUS_CARDSALE s.' || to_char(SYSDATE-1, 'YYYYMMDD') || ' as attached.' || chr(13) || chr(13) ||
        
                      'Best Regards,'|| chr(13) 
                      ;
            -- Modify the code to initialize the variable
             attachments := sendmailjpkg.attachments_list('/export/home/bssuser/dba_directory/PL_SQL/EX_DATA/SMARTBUS_CARDSALE_s.'|| to_char(SYSDATE-1,'DD-MON-YYYY') || '.csv');
              v_return := sendmailjpkg.sendmail(
              smtpservername => smtpservername,
              sender => sender,
              recipient => recipient,
              ccrecipient => ccrecipient,
              bccrecipient => bccrecipient,
              subject => subject,
              BODY => BODY,
              errormessage => errormessage,
              attachments => attachments
            );
            
          END; 
END DAILY_SMARTBUS_CARDSALE;


PROCEDURE DAILY_SMARTBUS
    AS 

    BEGIN
          
           DECLARE
        
          fhandle utl_file.file_type;
          v_date VARCHAR2(11);
          TYPE gencurtyp IS REF CURSOR;
              detail gencurtyp;
              v_log  VARCHAR2(1000);
              v_header_rec VARCHAR2(1000);
             
              v_CARD_SERIAL_NUMBER VARCHAR2(100);
              v_BSS_TXN_TYPE VARCHAR2(50);
              v_CARD_TYPE_ID VARCHAR2(50);
              v_CARD_TYPE_DESC VARCHAR2(100);
              v_PRODUCT_SALE_ID VARCHAR2(50);
              v_PRODUCT_SALE_DESC VARCHAR2(100);
              v_PRODUCT_TYPE_ID VARCHAR2(50);
              v_PRODUCT_TYPE_DESC VARCHAR2(100);
              v_EXCEPTION_LIST VARCHAR2(100);
              v_TRANSACTION_VALUE number;
              v_PURSE_REMAINING_VALUE number;
              v_CARD_SEQUENCE_NUMBER number;
              v_PTSN number;
              v_LOC_TXN_DATE_TIME date;
              v_TXN_DATE date;
              v_RECONCILIATION_DATE date;
              v_SETTLEMENT_DATE date;
              v_LAV_TXN_VALUE number;
              v_UDSN number;
              v_GOOD_FOR_SETTLEMENT VARCHAR2(50);
              v_LOCATION_ID_TRF VARCHAR2(50);
              v_LOCATION_NAME VARCHAR2(100);
              v_PAYMENT_METHOD0 number;
              v_EQUIPMENT_NO VARCHAR2(50);
              v_BUS_NO_DEVICE VARCHAR2(50);
              v_DEVICE_ID number;
              v_SETTLEMENT_STATUS VARCHAR2(50);
              v_SRC VARCHAR2(50);
              v_SRC_NAME VARCHAR2(100);
              v_SERV VARCHAR2(50);
              v_DEST VARCHAR2(50);
              v_DEVICE_LOCATION VARCHAR2(50);
              v_BUS_STOP_EXIT VARCHAR2(50);
              v_BUS_STOP_ENTRY VARCHAR2(50);
              v_BUS_DIRECTION VARCHAR2(50);
              v_BUS_ROUTE_ID VARCHAR2(50);
              v_BUS_ENTRY_EXIT_FLAG VARCHAR2(50);
              v_BUS_SALE_PRICE VARCHAR2(50);
              v_BUS_SALE_ADD_FLAG VARCHAR2(50);
              v_BUS_ID VARCHAR2(50);
              v_ORIGINAL_FILE_NAME  VARCHAR2(100);
               

            BEGIN
              ----get settlement_date ----
              SELECT to_char(SYSDATE-1,'DD-MON-YYYY')
              INTO v_date
              FROM dual;
            ---------------------------
            fhandle :=utl_file.fopen('EX_DATA_BE','DAILY_SMARTBUS_s.'|| v_date || '.csv','w');--Opening a file
            -------------- HEADER ----------------
            SELECT 'CARD_SERIAL_NUMBER,BSS_TXN_TYPE,CARD_TYPE_ID,CARD_TYPE_DESC,PRODUCT_SALE_ID,PRODUCT_SALE_DESC,PRODUCT_TYPE_ID,PRODUCT_TYPE_DESC,EXCEPTION_LIST,TRANSACTION_VALUE,PURSE_REMAINING_VALUE,CARD_SEQUENCE_NUMBER,PTSN,LOC_TXN_DATE_TIME,TXN_DATE,RECONCILIATION_DATE,SETTLEMENT_DATE,LAV_TXN_VALUE,UDSN,GOOD_FOR_SETTLEMENT,LOCATION_ID_TRF,LOCATION_NAME,PAYMENT_METHOD0,EQUIPMENT_NO,BUS_NO_DEVICE,DEVICE_ID,SETTLEMENT_STATUS,SRC,SRC_NAME,SERV,DEST,DEVICE_LOCATION,BUS_STOP_EXIT,BUS_STOP_ENTRY,BUS_DIRECTION,BUS_ROUTE_ID,BUS_ENTRY_EXIT_FLAG,BUS_SALE_PRICE,BUS_SALE_ADD_FLAG,BUS_ID,ORIGINAL_FILE_NAME' AS HEADER
            INTO v_header_rec
            FROM dual ;
            --------------END HEADER ----------------
            --------------WRITE HEADER---------------
            v_log := v_header_rec ||chr(13);
            utl_file.put_line(fhandle, v_log);
            -----------------------------------------
            OPEN detail FOR 
                
     --Daliy Smart Bus 29/11/2019
    SELECT
    '88' || lpad(CARD_SERIAL_NUMBER,9,'0') AS CARD_SERIAL_NUMBER,
    CUT_ALL.TXN_TYPE as BSS_TXN_TYPE,
    aa.passenger_type AS CARD_TYPE_ID,
    reports.bkk_int_fun.getpassengertype (aa.passenger_type,reports.bkk_int_fun.getdataversion(), 'en') AS CARD_TYPE_DESC,
    bss_reports.pkg_fun.getproductsaleid(aa.csc_serial_number, aa.csc_issuer_id, aa.csc_lifecycle_count, aa.csc_type) as product_sale_ID,
    bss_reports.pkg_fun.getproductsaledesc(aa.csc_serial_number, aa.csc_issuer_id, aa.csc_lifecycle_count, aa.csc_type) as product_sale_desc,
    p.PRODUCT_TYPE as PRODUCT_TYPE_ID,
    p.description as PRODUCT_TYPE_DESC,
   -- EXCEPTION_LIST,
    case 
        when EXCEPTION_LIST like '%,%' then  replace  (EXCEPTION_LIST,',',' ')
    else  EXCEPTION_LIST end AS EXCEPTION_LIST,
    case
        when CUT_ALL.TXN_TYPE='Purse Use' then TRANSACTION_VALUE*0.01
        when CUT_ALL.TXN_TYPE='Purse Use Reverse' then TRANSACTION_VALUE*0.01*-1
        when CUT_ALL.TXN_TYPE='Purse Add' then TRANSACTION_VALUE*0.01
        when CUT_ALL.TXN_TYPE='Purse Add Reverse' then TRANSACTION_VALUE*0.01*-1
    else TRANSACTION_VALUE*0.01 end as TRANSACTION_VALUE,
    PURSE_REMAINING_VALUE*0.01 as PURSE_REMAINING_VALUE,
    CARD_SEQUENCE_NUMBER,
    PTSN,
    to_date(RP_STD.TOLOCALTIME(TXN_DATE_TIME),'DD-MON-YY HH24:MI:SS') AS LOC_TXN_DATE_TIME,
    trunc(to_date(RP_STD.TOLOCALTIME(TXN_DATE_TIME),'DD-MON-YY HH24:MI:SS')) AS TXN_DATE,
    to_date(RECONCILIATION_DATE,'DD-MON-YY HH24:MI:SS') AS RECONCILIATION_DATE,
    to_date(SETTLEMENT_DATE,'DD-MON-YY HH24:MI:SS') AS SETTLEMENT_DATE, 
    LAV_TXN_VALUE,
    UDSN,
    case when cch_txn_approved = 'Y' then 'GFS' else 'NGFS' end AS GOOD_FOR_SETTLEMENT,
    LOCATION_ID_TRF,
    L.LOCATION_NAME,
    payment_method0,
    DEVICE_STATUS.EQUIPMENT_NO,
    substr(DEVICE_STATUS.EQUIPMENT_NO,1,6) || '(' ||trim(to_char(CUT_ALL.DEVICE_ID,'XXXXXXXX')) || ')' as BUS_NO_DEVICE,
    CUT_ALL.DEVICE_ID,
    case when RECONCILIATION_DATE < SETTLEMENT_DATE then 'Late TXN' else 'Normal TXN' end AS SETTLEMENT_STATUS,
    SOURCE_PARTICIPANT_ID AS SRC,
    case when SOURCE_PARTICIPANT_ID = '109' then '109 - Onbus'
    when SOURCE_PARTICIPANT_ID = '119' then '119 - A920' 
    else 'Not Smart Bus'  end AS SRC_NAME,
    SERVICE_PARTICIPANT_ID AS SERV,
    DESTINATION_PARTICIPANT_ID AS DEST,
    device_location,
    to_number(substr(lpad(trim(to_char(EFT_TERMINAL_ID,'XXXXXXXXXXXXXXXX')),16,'0'),1,4),'xxxx')  as BUS_STOP_EXIT,
    to_number(substr(lpad(trim(to_char(EFT_TERMINAL_ID,'XXXXXXXXXXXXXXXX')),16,'0'),5,4),'xxxx')  as BUS_STOP_ENTRY,
    to_number(substr(lpad(trim(to_char(EFT_TERMINAL_ID,'XXXXXXXXXXXXXXXX')),16,'0'),9,2),'xxxx')  as BUS_DIRECTION,
    to_number(substr(lpad(trim(to_char(EFT_TERMINAL_ID,'XXXXXXXXXXXXXXXX')),16,'0'),11,4),'xxxx') as BUS_ROUTE_ID,
    to_number(substr(lpad(trim(to_char(EFT_TERMINAL_ID,'XXXXXXXXXXXXXXXX')),16,'0'),15,2),'xxxx') as BUS_ENTRY_EXIT_FLAG,
    to_number(substr(lpad(trim(to_char(EFT_TRACE_NUMBER,'XXXXXXXXXXXXXXXX')),16,'0'),7,4),'xxxx') as BUS_SALE_PRICE,
    to_number(substr(lpad(trim(to_char(EFT_TRACE_NUMBER,'XXXXXXXXXXXXXXXX')),16,'0'),11,2),'xxxx') as BUS_SALE_ADD_FLAG,
    to_number(substr(lpad(trim(to_char(EFT_TRACE_NUMBER,'XXXXXXXXXXXXXXXX')),16,'0'),13,4),'xxxx') as BUS_ID,
    ORIGINAL_FILE_NAME
    FROM
        (
        SELECT  null as lower_ptsn,null as upper_ptsn,null as remaining_rides,CARD_SERIAL_NUMBER,TRANSACTION_VALUE,NULL AS PURSE_REMAINING_VALUE,REPORTS.BKK_INT_FUN.GETTRANSACTIONDESC (UD_TYPE,UD_SUBTYPE) AS TXN_TYPE,EXCEPTION_LIST, UD_TYPE,UD_SUBTYPE,TXN_DATE_TIME,RECONCILIATION_DATE,NULL AS LAV_DATE_TIME,CARD_SEQUENCE_NUMBER,NULL AS PTSN,'CUT_CI_MAINTENANCE' AS TABLE_NAME,SOURCE_PARTICIPANT_ID,SERVICE_PARTICIPANT_ID,DESTINATION_PARTICIPANT_ID,DEVICE_ID,UDSN,device_location,to_number(substr(to_char(device_location,'XXXXXXXX'),-6,6),'XXXXXXXX') as location_id_trf, DATA_VERSION,ORIGINAL_FILE_NAME,original_txn_type,SETTLEMENT_DATE,iss_txn_reflection,cch_txn_approved
        ,payment_method0,payment_value0,payment_method1,payment_value1,payment_method2,payment_value2,payment_method3,payment_value3
        ,null as LAV_PARTICIPANT_ID, null as LAV_SAM_ID, null as LAV_PTSN, null as LAV_TXN_VALUE, null as LAV_REMAINING_VALUE, null as LAV_REMAINING_RIDES, null as LAV_METHOD_OF_PAYMENT
        , null as EFT_TERMINAL_ID, null as EFT_TRACE_NUMBER,CARD_LIFE_CYCLE_COUNT,null as product_issuer_id,null as product_type
        FROM CUT_CI_MAINTENANCE 
        UNION ALL
        SELECT null as lower_ptsn,null as upper_ptsn,null as remaining_rides,CARD_SERIAL_NUMBER,0 as TRANSACTION_VALUE,NULL AS PURSE_REMAINING_VALUE,REPORTS.BKK_INT_FUN.GETTRANSACTIONDESC (UD_TYPE,UD_SUBTYPE) AS TXN_TYPE,A.EXCEPTION_LIST, A.UD_TYPE,A.UD_SUBTYPE,A.TXN_DATE_TIME,RECONCILIATION_DATE,NULL AS LAV_DATE_TIME,A.CARD_SEQUENCE_NUMBER,NULL AS PTSN,'CUT_AP_MAINTENANCE' AS TABLE_NAME,SOURCE_PARTICIPANT_ID,SERVICE_PARTICIPANT_ID,DESTINATION_PARTICIPANT_ID,DEVICE_ID,UDSN,device_location,to_number(substr(to_char(device_location,'XXXXXXXX'),-6,6),'XXXXXXXX') as location_id_trf, DATA_VERSION,ORIGINAL_FILE_NAME,original_txn_type,SETTLEMENT_DATE,iss_txn_reflection,cch_txn_approved
        ,null as payment_method0,null as payment_value0,null as payment_method1,null as payment_value1,null as payment_method2,null as payment_value2,null as payment_method3,null as payment_value3
        ,null as LAV_PARTICIPANT_ID, null as LAV_SAM_ID, null as LAV_PTSN, null as LAV_TXN_VALUE, null as LAV_REMAINING_VALUE, null as LAV_REMAINING_RIDES, null as LAV_METHOD_OF_PAYMENT
        , null as EFT_TERMINAL_ID, null as EFT_TRACE_NUMBER,CARD_LIFE_CYCLE_COUNT,null as product_issuer_id,null as product_type
        FROM CUT_AP_MAINTENANCE A
        UNION ALL
        SELECT null as lower_ptsn,null as upper_ptsn,null as remaining_rides,CARD_SERIAL_NUMBER,TRANSACTION_VALUE,NULL AS PURSE_REMAINING_VALUE,REPORTS.BKK_INT_FUN.GETTRANSACTIONDESC (UD_TYPE,UD_SUBTYPE) AS TXN_TYPE,A.EXCEPTION_LIST, A.UD_TYPE,A.UD_SUBTYPE,A.TXN_DATE_TIME,RECONCILIATION_DATE,NULL AS LAV_DATE_TIME,A.CARD_SEQUENCE_NUMBER,NULL AS PTSN,'CUT_CARDHOLDER_FEE' AS TABLE_NAME,SOURCE_PARTICIPANT_ID,SERVICE_PARTICIPANT_ID,DESTINATION_PARTICIPANT_ID,DEVICE_ID,UDSN,device_location,to_number(substr(to_char(device_location,'XXXXXXXX'),-6,6),'XXXXXXXX') as location_id_trf, DATA_VERSION,ORIGINAL_FILE_NAME,original_txn_type,SETTLEMENT_DATE,iss_txn_reflection,cch_txn_approved
        ,null as payment_method0,null as payment_value0,null as payment_method1,null as payment_value1,null as payment_method2,null as payment_value2,null as payment_method3,null as payment_value3
        ,null as LAV_PARTICIPANT_ID, null as LAV_SAM_ID, null as LAV_PTSN, null as LAV_TXN_VALUE, null as LAV_REMAINING_VALUE, null as LAV_REMAINING_RIDES, null as LAV_METHOD_OF_PAYMENT
        , null as EFT_TERMINAL_ID, null as EFT_TRACE_NUMBER,CARD_LIFE_CYCLE_COUNT,null as product_issuer_id,null as product_type
        FROM CUT_CARDHOLDER_FEE A
        UNION ALL
        SELECT null as lower_ptsn,null as upper_ptsn,null as remaining_rides,CARD_SERIAL_NUMBER,TRANSACTION_VALUE,NULL AS PURSE_REMAINING_VALUE,REPORTS.BKK_INT_FUN.GETTRANSACTIONDESC (UD_TYPE,UD_SUBTYPE) AS TXN_TYPE,A.EXCEPTION_LIST, A.UD_TYPE,A.UD_SUBTYPE,A.TXN_DATE_TIME,RECONCILIATION_DATE,NULL AS LAV_DATE_TIME,A.CARD_SEQUENCE_NUMBER,NULL AS PTSN,'CUT_CI_FINANCIAL' AS TABLE_NAME,SOURCE_PARTICIPANT_ID,SERVICE_PARTICIPANT_ID,DESTINATION_PARTICIPANT_ID,DEVICE_ID,UDSN,device_location,to_number(substr(to_char(device_location,'XXXXXXXX'),-6,6),'XXXXXXXX') as location_id_trf, DATA_VERSION,ORIGINAL_FILE_NAME,original_txn_type,SETTLEMENT_DATE,iss_txn_reflection,cch_txn_approved
        ,payment_method0,payment_value0,payment_method1,payment_value1,payment_method2,payment_value2,payment_method3,payment_value3
        ,null as LAV_PARTICIPANT_ID, null as LAV_SAM_ID, null as LAV_PTSN, null as LAV_TXN_VALUE, null as LAV_REMAINING_VALUE, null as LAV_REMAINING_RIDES, null as LAV_METHOD_OF_PAYMENT
        ,EFT_TERMINAL_ID ,EFT_TRACE_NUMBER,CARD_LIFE_CYCLE_COUNT,null as product_issuer_id,null as product_type
        FROM CUT_CI_FINANCIAL A
        UNION ALL
        SELECT lower_ptsn,upper_ptsn,null as remaining_rides,CARD_SERIAL_NUMBER,TRANSACTION_VALUE,PURSE_REMAINING_VALUE,REPORTS.BKK_INT_FUN.GETTRANSACTIONDESC (UD_TYPE,UD_SUBTYPE) AS TXN_TYPE,A.EXCEPTION_LIST, A.UD_TYPE,A.UD_SUBTYPE,A.TXN_DATE_TIME,RECONCILIATION_DATE,LAV_DATE_TIME,A.CARD_SEQUENCE_NUMBER,PTSN,'CUT_PI_FINANCIAL' AS TABLE_NAME,SOURCE_PARTICIPANT_ID,SERVICE_PARTICIPANT_ID,DESTINATION_PARTICIPANT_ID,DEVICE_ID,UDSN,device_location,to_number(substr(to_char(device_location,'XXXXXXXX'),-6,6),'XXXXXXXX') as location_id_trf, DATA_VERSION,ORIGINAL_FILE_NAME,original_txn_type,SETTLEMENT_DATE,iss_txn_reflection,cch_txn_approved
        ,payment_method0,payment_value0,payment_method1,payment_value1,payment_method2,payment_value2,payment_method3,payment_value3
        ,LAV_PARTICIPANT_ID, LAV_SAM_ID, LAV_PTSN, LAV_TXN_VALUE, LAV_REMAINING_VALUE,  null as LAV_REMAINING_RIDES, LAV_METHOD_OF_PAYMENT
        ,EFT_TERMINAL_ID ,EFT_TRACE_NUMBER,CARD_LIFE_CYCLE_COUNT,product_issuer_id,product_type
        FROM CUT_PI_FINANCIAL A
        UNION ALL
        SELECT null as lower_ptsn,null as upper_ptsn,null as remaining_rides,CARD_SERIAL_NUMBER,TRANSACTION_VALUE,PURSE_REMAINING_VALUE,REPORTS.BKK_INT_FUN.GETTRANSACTIONDESC (UD_TYPE,UD_SUBTYPE) AS TXN_TYPE,A.EXCEPTION_LIST, A.UD_TYPE,A.UD_SUBTYPE,A.TXN_DATE_TIME,RECONCILIATION_DATE,LAV_DATE_TIME,A.CARD_SEQUENCE_NUMBER,PTSN,'CUT_PI_ENTRY' AS TABLE_NAME,SOURCE_PARTICIPANT_ID,SERVICE_PARTICIPANT_ID,DESTINATION_PARTICIPANT_ID,DEVICE_ID,UDSN,device_location,to_number(substr(to_char(device_location,'XXXXXXXX'),-6,6),'XXXXXXXX') as location_id_trf, DATA_VERSION,ORIGINAL_FILE_NAME,original_txn_type,SETTLEMENT_DATE,iss_txn_reflection,cch_txn_approved
        ,payment_method0,payment_value0,payment_method1,payment_value1,payment_method2,payment_value2,payment_method3,payment_value3
        ,LAV_PARTICIPANT_ID, LAV_SAM_ID, LAV_PTSN, LAV_TXN_VALUE, null as LAV_REMAINING_VALUE, LAV_REMAINING_RIDES, LAV_METHOD_OF_PAYMENT
        , null as EFT_TERMINAL_ID, null as EFT_TRACE_NUMBER,CARD_LIFE_CYCLE_COUNT,product_issuer_id,product_type
        FROM CUT_PI_ENTRY A
        UNION ALL
        SELECT null as lower_ptsn,null as upper_ptsn,remaining_rides,CARD_SERIAL_NUMBER,TRANSACTION_VALUE,PURSE_REMAINING_VALUE,REPORTS.BKK_INT_FUN.GETTRANSACTIONDESC (UD_TYPE,UD_SUBTYPE) AS TXN_TYPE,A.EXCEPTION_LIST, A.UD_TYPE,A.UD_SUBTYPE,A.TXN_DATE_TIME,RECONCILIATION_DATE,LAV_DATE_TIME,A.CARD_SEQUENCE_NUMBER,PTSN,'CUT_PI_EXIT' AS TABLE_NAME,SOURCE_PARTICIPANT_ID,SERVICE_PARTICIPANT_ID,DESTINATION_PARTICIPANT_ID,DEVICE_ID,UDSN,device_location,to_number(substr(to_char(device_location,'XXXXXXXX'),-6,6),'XXXXXXXX') as location_id_trf, DATA_VERSION,ORIGINAL_FILE_NAME,original_txn_type,SETTLEMENT_DATE,iss_txn_reflection,cch_txn_approved
        ,payment_method0,payment_value0,payment_method1,payment_value1,payment_method2,payment_value2,payment_method3,payment_value3
        ,LAV_PARTICIPANT_ID, LAV_SAM_ID, LAV_PTSN, LAV_TXN_VALUE, null as LAV_REMAINING_VALUE, LAV_REMAINING_RIDES, LAV_METHOD_OF_PAYMENT 
        , null as EFT_TERMINAL_ID, null as EFT_TRACE_NUMBER,CARD_LIFE_CYCLE_COUNT,product_issuer_id,product_type
        FROM CUT_PI_EXIT A
        UNION ALL
        SELECT null as lower_ptsn,null as upper_ptsn,null as remaining_rides,CARD_SERIAL_NUMBER,0 as TRANSACTION_VALUE,NULL AS PURSE_REMAINING_VALUE,REPORTS.BKK_INT_FUN.GETTRANSACTIONDESC (UD_TYPE,UD_SUBTYPE) AS TXN_TYPE,A.EXCEPTION_LIST, A.UD_TYPE,A.UD_SUBTYPE,A.TXN_DATE_TIME,RECONCILIATION_DATE,NULL AS LAV_DATE_TIME,A.CARD_SEQUENCE_NUMBER,NULL AS PTSN,'CUT_CI_BLOCKING' AS TABLE_NAME,SOURCE_PARTICIPANT_ID,SERVICE_PARTICIPANT_ID,DESTINATION_PARTICIPANT_ID,DEVICE_ID,UDSN,device_location,to_number(substr(to_char(device_location,'XXXXXXXX'),-6,6),'XXXXXXXX') as location_id_trf, DATA_VERSION,ORIGINAL_FILE_NAME,original_txn_type,SETTLEMENT_DATE,iss_txn_reflection,cch_txn_approved
        ,null as payment_method0,null as payment_value0,null as payment_method1,null as payment_value1,null as payment_method2,null as payment_value2,null as payment_method3,null as payment_value3
        ,null as LAV_PARTICIPANT_ID, null as LAV_SAM_ID, null as LAV_PTSN, null as LAV_TXN_VALUE, null as LAV_REMAINING_VALUE, null as LAV_REMAINING_RIDES, null as LAV_METHOD_OF_PAYMENT
        ,EFT_TERMINAL_ID ,EFT_TRACE_NUMBER,CARD_LIFE_CYCLE_COUNT,null as product_issuer_id,null as product_type
        FROM CUT_CI_BLOCKING A
        UNION ALL
        SELECT null as lower_ptsn,null as upper_ptsn,null as remaining_rides,CARD_SERIAL_NUMBER,TRANSACTION_VALUE,PURSE_REMAINING_VALUE,REPORTS.BKK_INT_FUN.GETTRANSACTIONDESC (UD_TYPE,UD_SUBTYPE) AS TXN_TYPE,A.EXCEPTION_LIST, A.UD_TYPE,A.UD_SUBTYPE,A.TXN_DATE_TIME,RECONCILIATION_DATE,NULL AS LAV_DATE_TIME,A.CARD_SEQUENCE_NUMBER,PTSN,'CUT_PI_MAINTENANCE' AS TABLE_NAME,SOURCE_PARTICIPANT_ID,SERVICE_PARTICIPANT_ID,DESTINATION_PARTICIPANT_ID,DEVICE_ID,UDSN,device_location,to_number(substr(to_char(device_location,'XXXXXXXX'),-6,6),'XXXXXXXX') as location_id_trf, DATA_VERSION,ORIGINAL_FILE_NAME,original_txn_type,SETTLEMENT_DATE,iss_txn_reflection,cch_txn_approved
        ,payment_method0,payment_value0,payment_method1,payment_value1,payment_method2,payment_value2,payment_method3,payment_value3
        ,null as LAV_PARTICIPANT_ID, null as LAV_SAM_ID, null as LAV_PTSN, null as LAV_TXN_VALUE, null as LAV_REMAINING_VALUE, null as LAV_REMAINING_RIDES, null as LAV_METHOD_OF_PAYMENT
        , null as EFT_TERMINAL_ID, null as EFT_TRACE_NUMBER,CARD_LIFE_CYCLE_COUNT,null as product_issuer_id,product_type
        FROM CUT_PI_MAINTENANCE A 
        UNION ALL
        SELECT null as lower_ptsn,null as upper_ptsn,null as remaining_rides,CARD_SERIAL_NUMBER,0 as TRANSACTION_VALUE,NULL AS PURSE_REMAINING_VALUE,REPORTS.BKK_INT_FUN.GETTRANSACTIONDESC (UD_TYPE,UD_SUBTYPE) AS TXN_TYPE,A.EXCEPTION_LIST, A.UD_TYPE,A.UD_SUBTYPE,A.TXN_DATE_TIME,RECONCILIATION_DATE,NULL AS LAV_DATE_TIME,A.CARD_SEQUENCE_NUMBER,PTSN,'CUT_CI_EVENT' AS TABLE_NAME,SOURCE_PARTICIPANT_ID,SERVICE_PARTICIPANT_ID,DESTINATION_PARTICIPANT_ID,DEVICE_ID,UDSN,device_location,to_number(substr(to_char(device_location,'XXXXXXXX'),-6,6),'XXXXXXXX') as location_id_trf, DATA_VERSION,ORIGINAL_FILE_NAME,original_txn_type,SETTLEMENT_DATE,iss_txn_reflection,cch_txn_approved
        ,null as payment_method0,null as payment_value0,null as payment_method1,null as payment_value1,null as payment_method2,null as payment_value2,null as payment_method3,null as payment_value3
        ,null as LAV_PARTICIPANT_ID, null as LAV_SAM_ID, null as LAV_PTSN, null as LAV_TXN_VALUE, null as LAV_REMAINING_VALUE, null as LAV_REMAINING_RIDES, null as LAV_METHOD_OF_PAYMENT
        ,EFT_TERMINAL_ID ,EFT_TRACE_NUMBER,CARD_LIFE_CYCLE_COUNT,null as product_issuer_id,product_type
        FROM CUT_CI_EVENT A 
        ) CUT_ALL
    left join DEVICE_STATUS on CUT_ALL.Device_ID=DEVICE_STATUS.Device_ID and CUT_ALL.SOURCE_PARTICIPANT_ID=DEVICE_STATUS.PARTICIPANT_ID
    left join SYSTEMCD.SYSCD_TXN T on (CUT_ALL.DATA_VERSION=T.DATA_VERSION) AND (CUT_ALL.UD_TYPE=T.TXN_TYPE) AND  (CUT_ALL.UD_SUBTYPE=T.TXN_SUBTYPE)
    left join SYSCD_LOCATION L on (to_number(substr(to_char(CUT_ALL.device_location,'XXXXXXXX'),-6,6),'XXXXXXXX')=L.location_code) and (CUT_ALL.source_participant_id=L.participant_id) and (CUT_ALL.DATA_VERSION=L.DATA_VERSION) and (L.location_type in (9,15,16))
    left join application_account aa on CUT_ALL.card_serial_number = aa.csc_serial_number and CUT_ALL.CARD_LIFE_CYCLE_COUNT = aa.csc_lifecycle_count
    left join syscd_product p on (CUT_ALL.DATA_VERSION=P.DATA_VERSION) AND (CUT_ALL.product_type=p.product_type) and (CUT_ALL.product_issuer_id=p.issuer_id)
    WHERE CUT_ALL.iss_txn_reflection = 'N'
    AND CUT_ALL.settlement_date = trunc(sysdate-1)
    and source_participant_id in (109,119)
    ORDER BY CARD_SERIAL_NUMBER,CARD_SEQUENCE_NUMBER,TXN_DATE_TIME DESC,NVL(PTSN,0)
    ;       
                              
            loop
              fetch detail
              INTO 
              v_CARD_SERIAL_NUMBER,
              v_BSS_TXN_TYPE,
              v_CARD_TYPE_ID,
              v_CARD_TYPE_DESC,
              v_PRODUCT_SALE_ID,
              v_PRODUCT_SALE_DESC,
              v_PRODUCT_TYPE_ID,
              v_PRODUCT_TYPE_DESC,
              v_EXCEPTION_LIST,
              v_TRANSACTION_VALUE,
              v_PURSE_REMAINING_VALUE,
              v_CARD_SEQUENCE_NUMBER,
              v_PTSN,
              v_LOC_TXN_DATE_TIME,
              v_TXN_DATE,
              v_RECONCILIATION_DATE,
              v_SETTLEMENT_DATE,
              v_LAV_TXN_VALUE,
              v_UDSN,
              v_GOOD_FOR_SETTLEMENT,
              v_LOCATION_ID_TRF,
              v_LOCATION_NAME,
              v_PAYMENT_METHOD0,
              v_EQUIPMENT_NO,
              v_BUS_NO_DEVICE,
              v_DEVICE_ID,
              v_SETTLEMENT_STATUS,
              v_SRC,
              v_SRC_NAME,
              v_SERV,
              v_DEST,
              v_DEVICE_LOCATION,
              v_BUS_STOP_EXIT,
              v_BUS_STOP_ENTRY,
              v_BUS_DIRECTION,
              v_BUS_ROUTE_ID,
              v_BUS_ENTRY_EXIT_FLAG,
              v_BUS_SALE_PRICE,
              v_BUS_SALE_ADD_FLAG,
              v_BUS_ID,
              v_ORIGINAL_FILE_NAME;


              
              exit
            WHEN detail%notfound;
             
              v_log := v_CARD_SERIAL_NUMBER||','||v_BSS_TXN_TYPE||','||v_CARD_TYPE_ID||','||v_CARD_TYPE_DESC||','||v_PRODUCT_SALE_ID||','||v_PRODUCT_SALE_DESC||','||v_PRODUCT_TYPE_ID||','||v_PRODUCT_TYPE_DESC||','||v_EXCEPTION_LIST||','||v_TRANSACTION_VALUE||','||v_PURSE_REMAINING_VALUE||','||v_CARD_SEQUENCE_NUMBER||','||v_PTSN||','||v_LOC_TXN_DATE_TIME||','||v_TXN_DATE||','||v_RECONCILIATION_DATE||','||v_SETTLEMENT_DATE||','||v_LAV_TXN_VALUE||','||v_UDSN||','||v_GOOD_FOR_SETTLEMENT||','||v_LOCATION_ID_TRF||','||v_LOCATION_NAME||','||v_PAYMENT_METHOD0||','||v_EQUIPMENT_NO||','||v_BUS_NO_DEVICE||','||v_DEVICE_ID||','||v_SETTLEMENT_STATUS||','||v_SRC||','||v_SRC_NAME||','||v_SERV||','||v_DEST||','||v_DEVICE_LOCATION||','||v_BUS_STOP_EXIT||','||v_BUS_STOP_ENTRY||','||v_BUS_DIRECTION||','||v_BUS_ROUTE_ID||','||v_BUS_ENTRY_EXIT_FLAG||','||v_BUS_SALE_PRICE||','||v_BUS_SALE_ADD_FLAG||','||v_BUS_ID||','||v_ORIGINAL_FILE_NAME||chr(13);
              
              utl_file.put_line(fhandle, v_log);
              utl_file.fflush(fhandle);
              
            END loop ;
            CLOSE detail;

            utl_file.fclose(fhandle);
          END;
          
         --send mail--
           DECLARE
          smtpservername VARCHAR2(200);
          sender VARCHAR2(200);
          recipient VARCHAR2(250);
          ccrecipient VARCHAR2(250);
          bccrecipient VARCHAR2(250);
          subject VARCHAR2(250);
          BODY VARCHAR2(250);
          errormessage VARCHAR2(250);
          attachments sendmailjpkg.attachments_list;
          v_return NUMBER;
          v_date date;
         
          BEGIN
          
            SELECT to_char(SYSDATE-1,'dd-MON-yyyy')
              INTO v_date
              FROM dual;
            dbms_java.grant_permission( 'BSS', 'SYS:java.io.FilePermission', '/export/home/bssuser/dba_directory/PL_SQL/EX_DATA/DAILY_SMARTBUS_s.'|| to_char(SYSDATE-1,'DD-MON-YYYY') || '.csv', 'read' );
            COMMIT;
            smtpservername := '127.0.0.1';
            sender := 'be@rabbit.co.th';
            recipient := 'rc@rabbit.co.th';
            ccrecipient := 'montrit@rabbit.co.th';
            bccrecipient := NULL;
            subject := 'DAILY_SMARTBUS_s.' || to_char(SYSDATE-1, 'YYYYMMDD') ;
            BODY := 'Dear ALL,' || chr(13) || chr(13) ||
        
                        '    DAILY_SMARTBUS s.' || to_char(SYSDATE-1, 'YYYYMMDD') || ' as attached.' || chr(13) || chr(13) ||
        
                      'Best Regards,'|| chr(13) 
                      ;
            -- Modify the code to initialize the variable
             attachments := sendmailjpkg.attachments_list('/export/home/bssuser/dba_directory/PL_SQL/EX_DATA/DAILY_SMARTBUS_s.'|| to_char(SYSDATE-1,'DD-MON-YYYY') || '.csv');
              v_return := sendmailjpkg.sendmail(
              smtpservername => smtpservername,
              sender => sender,
              recipient => recipient,
              ccrecipient => ccrecipient,
              bccrecipient => bccrecipient,
              subject => subject,
              BODY => BODY,
              errormessage => errormessage,
              attachments => attachments
            );
            
          END; 
END DAILY_SMARTBUS;

PROCEDURE DAILY_EXCEPTION_LIST
    AS 

    BEGIN
          
           DECLARE
        
          fhandle utl_file.file_type;
          v_date VARCHAR2(11);
          TYPE gencurtyp IS REF CURSOR;
              detail gencurtyp;
              v_log  VARCHAR2(1000);
              v_header_rec VARCHAR2(1000);
             
              v_SETTLEMENT_DATE date; 
              v_CCH_TXN_APPROVED VARCHAR2(50);
              v_SOURCE_PARTICIPANT_ID VARCHAR2(50);
              v_EXCEPTION_LIST VARCHAR2(100);           
              v_COUNT_EXCEPTION number;
              

               

            BEGIN
              ----get settlement_date ----
              SELECT to_char(SYSDATE-1,'DD-MON-YYYY')
              INTO v_date
              FROM dual;
            ---------------------------
            fhandle :=utl_file.fopen('EX_DATA_BE','DAILY_EXCEPTION_LIST_s.'|| v_date || '.csv','w');--Opening a file
            -------------- HEADER ----------------
            SELECT 'SETTLEMENT_DATE,CCH_TXN_APPROVED,SOURCE_PARTICIPANT_ID,EXCEPTION_LIST,COUNT_EXCEPTION' AS HEADER
            INTO v_header_rec
            FROM dual ;
            --------------END HEADER ----------------
            --------------WRITE HEADER---------------
            v_log := v_header_rec ||chr(13);
            utl_file.put_line(fhandle, v_log);
            -----------------------------------------
            OPEN detail FOR 
                
     --Daliy Smart Bus 29/11/2019
 SELECT to_char(SETTLEMENT_DATE,'DD/MON/YYYY') as SETTLEMENT_DATE ,CCH_TXN_APPROVED, SOURCE_PARTICIPANT_ID,
 EXCEPTION_LIST, count(EXCEPTION_LIST ) as COUNT_EXCEPTION  
  --, BSS.CDA.getLocationDesc(source_participant_id,location_id_trf,NULL)  as Location_name
  FROM
  (SELECT BUSINESS_DATE,CARD_SERIAL_NUMBER,TRANSACTION_VALUE,NULL AS PURSE_REMAINING_VALUE,GETTRANSACTIONDESC (UD_TYPE,UD_SUBTYPE) AS TXN_TYPE,EXCEPTION_LIST, UD_TYPE,UD_SUBTYPE,TXN_DATE_TIME,RECONCILIATION_DATE,NULL AS LAV_DATE_TIME, NULL AS LAV_PTSN, NULL AS LAV_TXN_VALUE,CARD_SEQUENCE_NUMBER,NULL AS PTSN,'CUT_CI_MAINTENANCE' AS TABLE_NAME,SOURCE_PARTICIPANT_ID,SERVICE_PARTICIPANT_ID,DESTINATION_PARTICIPANT_ID,DEVICE_ID,UDSN,device_location,to_number(substr(to_char(device_location,'XXXXXXXX'),-6,6),'XXXXXXXX') as location_id_trf, DATA_VERSION,ORIGINAL_FILE_NAME,original_file_index,original_txn_type,SETTLEMENT_DATE,iss_txn_reflection,cch_txn_approved,iss_exception_proc_abrtd,TRANSACTION_STATUS,CCH_TXN_NOT_TO_ISSUER,STREAMING_SESSION_ID,cd_set_version
  FROM CUT_CI_MAINTENANCE 
  UNION ALL
  SELECT BUSINESS_DATE,CARD_SERIAL_NUMBER,0 as TRANSACTION_VALUE,NULL AS PURSE_REMAINING_VALUE,GETTRANSACTIONDESC (UD_TYPE,UD_SUBTYPE) AS TXN_TYPE,A.EXCEPTION_LIST, A.UD_TYPE,A.UD_SUBTYPE,A.TXN_DATE_TIME,RECONCILIATION_DATE,NULL AS LAV_DATE_TIME, NULL AS LAV_PTSN, NULL AS LAV_TXN_VALUE,A.CARD_SEQUENCE_NUMBER,NULL AS PTSN,'CUT_AP_MAINTENANCE' AS TABLE_NAME,SOURCE_PARTICIPANT_ID,SERVICE_PARTICIPANT_ID,DESTINATION_PARTICIPANT_ID,DEVICE_ID,UDSN,device_location,to_number(substr(to_char(device_location,'XXXXXXXX'),-6,6),'XXXXXXXX') as location_id_trf, DATA_VERSION,ORIGINAL_FILE_NAME,original_file_index,original_txn_type,SETTLEMENT_DATE,iss_txn_reflection,cch_txn_approved,iss_exception_proc_abrtd,TRANSACTION_STATUS,CCH_TXN_NOT_TO_ISSUER,STREAMING_SESSION_ID,cd_set_version
  FROM CUT_AP_MAINTENANCE A
  UNION ALL
  SELECT BUSINESS_DATE,CARD_SERIAL_NUMBER,TRANSACTION_VALUE,NULL AS PURSE_REMAINING_VALUE,GETTRANSACTIONDESC (UD_TYPE,UD_SUBTYPE) AS TXN_TYPE,A.EXCEPTION_LIST, A.UD_TYPE,A.UD_SUBTYPE,A.TXN_DATE_TIME,RECONCILIATION_DATE,NULL AS LAV_DATE_TIME, NULL AS LAV_PTSN, NULL AS LAV_TXN_VALUE,A.CARD_SEQUENCE_NUMBER,NULL AS PTSN,'CUT_CI_FINANCIAL' AS TABLE_NAME,SOURCE_PARTICIPANT_ID,SERVICE_PARTICIPANT_ID,DESTINATION_PARTICIPANT_ID,DEVICE_ID,UDSN,device_location,to_number(substr(to_char(device_location,'XXXXXXXX'),-6,6),'XXXXXXXX') as location_id_trf, DATA_VERSION,ORIGINAL_FILE_NAME,original_file_index,original_txn_type,SETTLEMENT_DATE,iss_txn_reflection,cch_txn_approved,iss_exception_proc_abrtd,TRANSACTION_STATUS,CCH_TXN_NOT_TO_ISSUER,STREAMING_SESSION_ID,cd_set_version
  FROM CUT_CI_FINANCIAL A
  UNION ALL
  SELECT BUSINESS_DATE,CARD_SERIAL_NUMBER,TRANSACTION_VALUE,NULL AS PURSE_REMAINING_VALUE,GETTRANSACTIONDESC (UD_TYPE,UD_SUBTYPE) AS TXN_TYPE,A.EXCEPTION_LIST, A.UD_TYPE,A.UD_SUBTYPE,A.TXN_DATE_TIME,RECONCILIATION_DATE,NULL AS LAV_DATE_TIME, NULL AS LAV_PTSN, NULL AS LAV_TXN_VALUE,A.CARD_SEQUENCE_NUMBER,NULL AS PTSN,'CUT_AP_MAINTENANCE' AS TABLE_NAME,SOURCE_PARTICIPANT_ID,SERVICE_PARTICIPANT_ID,DESTINATION_PARTICIPANT_ID,DEVICE_ID,UDSN,device_location,to_number(substr(to_char(device_location,'XXXXXXXX'),-6,6),'XXXXXXXX') as location_id_trf, DATA_VERSION,ORIGINAL_FILE_NAME,original_file_index,original_txn_type,SETTLEMENT_DATE,iss_txn_reflection,cch_txn_approved,iss_exception_proc_abrtd,TRANSACTION_STATUS,CCH_TXN_NOT_TO_ISSUER,STREAMING_SESSION_ID,cd_set_version
  FROM CUT_CARDHOLDER_FEE A
  UNION ALL
  SELECT BUSINESS_DATE,CARD_SERIAL_NUMBER,TRANSACTION_VALUE,PURSE_REMAINING_VALUE,GETTRANSACTIONDESC (UD_TYPE,UD_SUBTYPE) AS TXN_TYPE,A.EXCEPTION_LIST, A.UD_TYPE,A.UD_SUBTYPE,A.TXN_DATE_TIME,RECONCILIATION_DATE,LAV_DATE_TIME, LAV_PTSN,  LAV_TXN_VALUE,A.CARD_SEQUENCE_NUMBER,PTSN,'CUT_PI_FINANCIAL' AS TABLE_NAME,SOURCE_PARTICIPANT_ID,SERVICE_PARTICIPANT_ID,DESTINATION_PARTICIPANT_ID,DEVICE_ID,UDSN,device_location,to_number(substr(to_char(device_location,'XXXXXXXX'),-6,6),'XXXXXXXX') as location_id_trf, DATA_VERSION,ORIGINAL_FILE_NAME,original_file_index,original_txn_type,SETTLEMENT_DATE,iss_txn_reflection,cch_txn_approved,iss_exception_proc_abrtd,TRANSACTION_STATUS,CCH_TXN_NOT_TO_ISSUER,STREAMING_SESSION_ID,cd_set_version
  FROM CUT_PI_FINANCIAL A
  UNION ALL
  SELECT BUSINESS_DATE,CARD_SERIAL_NUMBER,TRANSACTION_VALUE,PURSE_REMAINING_VALUE,GETTRANSACTIONDESC (UD_TYPE,UD_SUBTYPE) AS TXN_TYPE,A.EXCEPTION_LIST, A.UD_TYPE,A.UD_SUBTYPE,A.TXN_DATE_TIME,RECONCILIATION_DATE,LAV_DATE_TIME, LAV_PTSN,  LAV_TXN_VALUE,A.CARD_SEQUENCE_NUMBER,PTSN,'CUT_PI_ENTRY' AS TABLE_NAME,SOURCE_PARTICIPANT_ID,SERVICE_PARTICIPANT_ID,DESTINATION_PARTICIPANT_ID,DEVICE_ID,UDSN,device_location,to_number(substr(to_char(device_location,'XXXXXXXX'),-6,6),'XXXXXXXX') as location_id_trf, DATA_VERSION,ORIGINAL_FILE_NAME,original_file_index,original_txn_type,SETTLEMENT_DATE,iss_txn_reflection,cch_txn_approved,iss_exception_proc_abrtd,TRANSACTION_STATUS,CCH_TXN_NOT_TO_ISSUER,STREAMING_SESSION_ID,cd_set_version
  FROM CUT_PI_ENTRY A
  UNION ALL
  SELECT BUSINESS_DATE,CARD_SERIAL_NUMBER,TRANSACTION_VALUE,PURSE_REMAINING_VALUE,GETTRANSACTIONDESC (UD_TYPE,UD_SUBTYPE) AS TXN_TYPE,A.EXCEPTION_LIST, A.UD_TYPE,A.UD_SUBTYPE,A.TXN_DATE_TIME,RECONCILIATION_DATE,LAV_DATE_TIME, LAV_PTSN,  LAV_TXN_VALUE,A.CARD_SEQUENCE_NUMBER,PTSN,'CUT_PI_EXIT' AS TABLE_NAME,SOURCE_PARTICIPANT_ID,SERVICE_PARTICIPANT_ID,DESTINATION_PARTICIPANT_ID,DEVICE_ID,UDSN,device_location,to_number(substr(to_char(device_location,'XXXXXXXX'),-6,6),'XXXXXXXX') as location_id_trf, DATA_VERSION,ORIGINAL_FILE_NAME,original_file_index,original_txn_type,SETTLEMENT_DATE,iss_txn_reflection,cch_txn_approved,iss_exception_proc_abrtd,TRANSACTION_STATUS,CCH_TXN_NOT_TO_ISSUER,STREAMING_SESSION_ID,cd_set_version
  FROM CUT_PI_EXIT A
  UNION ALL
  SELECT BUSINESS_DATE,CARD_SERIAL_NUMBER,0 as TRANSACTION_VALUE,NULL AS PURSE_REMAINING_VALUE,GETTRANSACTIONDESC (UD_TYPE,UD_SUBTYPE) AS TXN_TYPE,A.EXCEPTION_LIST, A.UD_TYPE,A.UD_SUBTYPE,A.TXN_DATE_TIME,RECONCILIATION_DATE,NULL AS LAV_DATE_TIME, NULL AS LAV_PTSN, NULL AS LAV_TXN_VALUE,A.CARD_SEQUENCE_NUMBER,NULL AS PTSN,'CUT_CI_BLOCKING' AS TABLE_NAME,SOURCE_PARTICIPANT_ID,SERVICE_PARTICIPANT_ID,DESTINATION_PARTICIPANT_ID,DEVICE_ID,UDSN,device_location,to_number(substr(to_char(device_location,'XXXXXXXX'),-6,6),'XXXXXXXX') as location_id_trf, DATA_VERSION,ORIGINAL_FILE_NAME,original_file_index,original_txn_type,SETTLEMENT_DATE,iss_txn_reflection,cch_txn_approved,iss_exception_proc_abrtd,TRANSACTION_STATUS,CCH_TXN_NOT_TO_ISSUER,STREAMING_SESSION_ID,cd_set_version
  FROM CUT_CI_BLOCKING A
  UNION ALL
  SELECT BUSINESS_DATE,CARD_SERIAL_NUMBER,TRANSACTION_VALUE,PURSE_REMAINING_VALUE,GETTRANSACTIONDESC (UD_TYPE,UD_SUBTYPE) AS TXN_TYPE,A.EXCEPTION_LIST, A.UD_TYPE,A.UD_SUBTYPE,A.TXN_DATE_TIME,RECONCILIATION_DATE,NULL AS LAV_DATE_TIME, NULL AS LAV_PTSN, NULL AS LAV_TXN_VALUE,A.CARD_SEQUENCE_NUMBER,PTSN,'CUT_PI_MAINTENANCE' AS TABLE_NAME,SOURCE_PARTICIPANT_ID,SERVICE_PARTICIPANT_ID,DESTINATION_PARTICIPANT_ID,DEVICE_ID,UDSN,device_location,to_number(substr(to_char(device_location,'XXXXXXXX'),-6,6),'XXXXXXXX') as location_id_trf, DATA_VERSION,ORIGINAL_FILE_NAME,original_file_index,original_txn_type,SETTLEMENT_DATE,iss_txn_reflection,cch_txn_approved,iss_exception_proc_abrtd,TRANSACTION_STATUS,CCH_TXN_NOT_TO_ISSUER,STREAMING_SESSION_ID,cd_set_version
  FROM CUT_PI_MAINTENANCE A 
  UNION ALL
  SELECT BUSINESS_DATE,CARD_SERIAL_NUMBER,0 as TRANSACTION_VALUE,NULL AS PURSE_REMAINING_VALUE,GETTRANSACTIONDESC (UD_TYPE,UD_SUBTYPE) AS TXN_TYPE,A.EXCEPTION_LIST, A.UD_TYPE,A.UD_SUBTYPE,A.TXN_DATE_TIME,RECONCILIATION_DATE,NULL AS LAV_DATE_TIME, NULL AS LAV_PTSN, NULL AS LAV_TXN_VALUE,A.CARD_SEQUENCE_NUMBER,PTSN,'CUT_CI_EVENT' AS TABLE_NAME,SOURCE_PARTICIPANT_ID,SERVICE_PARTICIPANT_ID,DESTINATION_PARTICIPANT_ID,DEVICE_ID,UDSN,device_location,to_number(substr(to_char(device_location,'XXXXXXXX'),-6,6),'XXXXXXXX') as location_id_trf, DATA_VERSION,ORIGINAL_FILE_NAME,original_file_index,original_txn_type,SETTLEMENT_DATE,iss_txn_reflection,cch_txn_approved,iss_exception_proc_abrtd,TRANSACTION_STATUS,CCH_TXN_NOT_TO_ISSUER,STREAMING_SESSION_ID,cd_set_version
  FROM CUT_CI_EVENT A 
  ) CUT_ALL
  --left join SYSCD_LOCATION L on (CUT_ALL.location_id_trf=L.location_code) and (CUT_ALL.source_participant_id=L.participant_id) and (CUT_ALL.DATA_VERSION=L.DATA_VERSION) and ((L.participant_id in (1,2,4) and L.location_type = 9) or (L.participant_id = 89 and L.location_type = 20)) 
  left join DEVICE_STATUS on CUT_ALL.Device_ID=DEVICE_STATUS.Device_ID and CUT_ALL.SOURCE_PARTICIPANT_ID=DEVICE_STATUS.PARTICIPANT_ID
  WHERE CUT_ALL.iss_txn_reflection = 'N' and CUT_ALL.SETTLEMENT_DATE = to_char(sysdate - 1, 'dd-MON-yy') and CUT_ALL.EXCEPTION_LIST is not null
  group by cch_txn_approved,EXCEPTION_LIST,SETTLEMENT_DATE,SOURCE_PARTICIPANT_ID
  order by SOURCE_PARTICIPANT_ID;                     
            loop
              fetch detail
              INTO 
              v_SETTLEMENT_DATE , 
              v_CCH_TXN_APPROVED ,
              v_SOURCE_PARTICIPANT_ID ,
              v_EXCEPTION_LIST ,          
              v_COUNT_EXCEPTION ;


              
              exit
            WHEN detail%notfound;
             
             -- v_log := v_SETTLEMENT_DATE||','||v_CCH_TXN_APPROVED||','||v_SOURCE_PARTICIPANT_ID||','||v_EXCEPTION_LIST||','||v_COUNT_EXCEPTION||chr(13);
              v_log := '"'||v_SETTLEMENT_DATE||'","'||v_CCH_TXN_APPROVED||'","'||v_SOURCE_PARTICIPANT_ID||'","'||v_EXCEPTION_LIST||'","'||v_COUNT_EXCEPTION||'",';
              utl_file.put_line(fhandle, v_log);
              utl_file.fflush(fhandle);
              
            END loop ;
            CLOSE detail;

            utl_file.fclose(fhandle);
          END;
          
         --send mail--
           DECLARE
          smtpservername VARCHAR2(200);
          sender VARCHAR2(200);
          recipient VARCHAR2(250);
          ccrecipient VARCHAR2(250);
          bccrecipient VARCHAR2(250);
          subject VARCHAR2(250);
          BODY VARCHAR2(250);
          errormessage VARCHAR2(250);
          attachments sendmailjpkg.attachments_list;
          v_return NUMBER;
          v_date date;
         
          BEGIN
          
            SELECT to_char(SYSDATE-1,'dd-MON-yyyy')
              INTO v_date
              FROM dual;
            dbms_java.grant_permission( 'BSS', 'SYS:java.io.FilePermission', '/export/home/bssuser/dba_directory/PL_SQL/EX_DATA/DAILY_EXCEPTION_LIST_s.'|| to_char(SYSDATE-1,'DD-MON-YYYY') || '.csv', 'read' );
            COMMIT;
            smtpservername := '127.0.0.1';
            sender := 'be@rabbit.co.th';
            recipient := 'be@rabbit.co.th';
            bccrecipient := NULL;
            subject := 'DAILY_EXCEPTION_LIST_s.' || to_char(SYSDATE-1, 'YYYYMMDD') ;
            BODY := 'Dear team,' || chr(13) || chr(13) ||
        
                        '    DAILY_EXCEPTION_LIST s.' || to_char(SYSDATE-1, 'YYYYMMDD') || ' as attached.' || chr(13) || chr(13) ||
        
                      'Best Regards,'|| chr(13) 
                      ;
            -- Modify the code to initialize the variable
             attachments := sendmailjpkg.attachments_list('/export/home/bssuser/dba_directory/PL_SQL/EX_DATA/DAILY_EXCEPTION_LIST_s.'|| to_char(SYSDATE-1,'DD-MON-YYYY') || '.csv');
              v_return := sendmailjpkg.sendmail(
              smtpservername => smtpservername,
              sender => sender,
              recipient => recipient,
              ccrecipient => ccrecipient,
              bccrecipient => bccrecipient,
              subject => subject,
              BODY => BODY,
              errormessage => errormessage,
              attachments => attachments
            );
            
          END; 
END DAILY_EXCEPTION_LIST;


PROCEDURE DAILY_MCTHAI
    AS 

    BEGIN
          
           DECLARE
        
          fhandle utl_file.file_type;
          v_date VARCHAR2(11);
          TYPE gencurtyp IS REF CURSOR;
              detail gencurtyp;
              v_log  VARCHAR2(1000);
              v_header_rec VARCHAR2(1000);
             
              v_bss_txn_type VARCHAR2(50);
              v_exception_list VARCHAR2(50);
              v_transaction_value number;
              v_loc_txn_date_time date;
              v_reconciliation_date date;
              v_settlement_date date;
              v_location_name VARCHAR2(100);
              
         
                         

            BEGIN
              ----get settlement_date ----
              SELECT to_char(SYSDATE-1,'DD-MON-YYYY')
              INTO v_date
              FROM dual;
            ---------------------------
            fhandle :=utl_file.fopen('EX_DATA_BE','DAILY_MCTHAI_s.'|| v_date || '.csv','w');--Opening a file
            -------------- HEADER ----------------
                   SELECT 'BSS_TXN_TYPE,EXCEPTION_LIST,TRANSACTION_VALUE,LOC_TXN_DATE_TIME,RECONCILIATION_DATE,SETTLEMENT_DATE,LOCATION_NAME' AS HEADER
            INTO v_header_rec
            FROM dual ;
            --------------END HEADER ----------------
            --------------WRITE HEADER---------------
            v_log := v_header_rec ||chr(13);
            utl_file.put_line(fhandle, v_log);
            -----------------------------------------
            OPEN detail FOR 
                
                  SELECT 
                   CUT_ALL.TXN_TYPE as BSS_TXN_TYPE,
                  EXCEPTION_LIST,
                  TRANSACTION_VALUE*0.01 as TRANSACTION_VALUE, 
                  to_date(RP_STD.TOLOCALTIME(TXN_DATE_TIME),'DD-MON-YY HH24:MI:SS') AS LOC_TXN_DATE_TIME,
                  to_date(RECONCILIATION_DATE,'DD-MON-YY HH24:MI:SS') AS RECONCILIATION_DATE,
                  to_date(SETTLEMENT_DATE,'DD-MON-YY HH24:MI:SS') AS SETTLEMENT_DATE, 
                 L.location_name
                  FROM
                  (
                  SELECT null as TRIP_ORIGIN_LOCATION,CARD_LIFE_CYCLE_COUNT,eft_terminal_id,eft_trace_number,streaming_session_id,null as AUTOLOAD_DAILY_LIMIT,null as AUTOLOAD_DAILY_COUNTER,lower_ptsn,upper_ptsn,null as remaining_rides,CARD_SERIAL_NUMBER,TRANSACTION_VALUE,PURSE_REMAINING_VALUE,REPORTS.BKK_INT_FUN.GETTRANSACTIONDESC (UD_TYPE,UD_SUBTYPE) AS TXN_TYPE,A.EXCEPTION_LIST, A.UD_TYPE,A.UD_SUBTYPE,A.TXN_DATE_TIME,RECONCILIATION_DATE,LAV_DATE_TIME,A.CARD_SEQUENCE_NUMBER,PTSN,'CUT_PI_FINANCIAL' AS TABLE_NAME,SOURCE_PARTICIPANT_ID,SERVICE_PARTICIPANT_ID,DESTINATION_PARTICIPANT_ID,DEVICE_ID,UDSN,device_location,to_number(substr(to_char(device_location,'XXXXXXXX'),-6,6),'XXXXXXXX') as location_id_trf, DATA_VERSION,ORIGINAL_FILE_NAME,original_txn_type,SETTLEMENT_DATE,iss_txn_reflection,cch_txn_approved
                  ,payment_method0,payment_value0,payment_method1,payment_value1,payment_method2,payment_value2,payment_method3,payment_value3
                  ,LAV_PARTICIPANT_ID, LAV_SAM_ID, LAV_PTSN, LAV_TXN_VALUE, LAV_REMAINING_VALUE,  null as LAV_REMAINING_RIDES, LAV_METHOD_OF_PAYMENT
                  FROM CUT_PI_FINANCIAL A
                  ) cut_all
                  left join SYSCD_LOCATION L on (to_number(substr(to_char(CUT_ALL.device_location,'XXXXXXXX'),-6,6),'XXXXXXXX')=L.location_code) and (CUT_ALL.source_participant_id=L.participant_id) and (CUT_ALL.DATA_VERSION=L.DATA_VERSION) and (L.location_type in (9,15,16,21))  
                  left join DEVICE_STATUS on CUT_ALL.Device_ID=DEVICE_STATUS.Device_ID and CUT_ALL.SOURCE_PARTICIPANT_ID=DEVICE_STATUS.PARTICIPANT_ID
                  left join SYSTEMCD.SYSCD_TXN T on (CUT_ALL.DATA_VERSION=T.DATA_VERSION) AND (CUT_ALL.UD_TYPE=T.TXN_TYPE) AND  (CUT_ALL.UD_SUBTYPE=T.TXN_SUBTYPE)
                  where cut_all.iss_txn_reflection = 'N'
                  and settlement_date = TRUNC(SYSDATE-1)
                  --and exception_list not like '%DDT%'
                  and cch_txn_approved = 'Y'
                  --between '1-MAR-2018' and '1-MAR-2018'
                  and SOURCE_PARTICIPANT_ID = 42
                  and ud_type = 3
                  and ud_subtype = 13
                  ; 
                              
            loop
              fetch detail
              INTO 
              v_bss_txn_type ,
              v_exception_list ,
              v_transaction_value ,
              v_loc_txn_date_time,
              v_reconciliation_date ,
              v_settlement_date ,
              v_location_name ;

              
              exit
            WHEN detail%notfound;
             
              v_log := v_bss_txn_type||','||v_exception_list||','||v_transaction_value||','||v_loc_txn_date_time||','||v_reconciliation_date||','||v_settlement_date||','||v_location_name ||chr(13);
              
              utl_file.put_line(fhandle, v_log);
              utl_file.fflush(fhandle);
              
            END loop ;
            CLOSE detail;

            utl_file.fclose(fhandle);
          END;
          
         --send mail--
           DECLARE
          smtpservername VARCHAR2(200);
          sender VARCHAR2(200);
          recipient VARCHAR2(250);
          ccrecipient VARCHAR2(250);
          bccrecipient VARCHAR2(250);
          subject VARCHAR2(250);
          BODY VARCHAR2(250);
          errormessage VARCHAR2(250);
          attachments sendmailjpkg.attachments_list;
          v_return NUMBER;
          v_date date;
         
          BEGIN
          
            SELECT to_char(SYSDATE-1,'dd-MON-yyyy')
              INTO v_date
              FROM dual;
            dbms_java.grant_permission( 'BSS', 'SYS:java.io.FilePermission', '/export/home/bssuser/dba_directory/PL_SQL/EX_DATA/DAILY_MCTHAI_s.'|| to_char(SYSDATE-1,'DD-MON-YYYY') || '.csv', 'read' );
            COMMIT;
            smtpservername := '127.0.0.1';
            sender := 'be@rabbit.co.th';
            recipient := 'be@rabbit.co.th';
            ccrecipient := 'be@rabbit.co.th';
            bccrecipient := NULL;
            subject := 'DAILY_MCTHAI_s.' || to_char(SYSDATE-1, 'YYYYMMDD') ;
            BODY := 'Dear ALL,' || chr(13) || chr(13) ||
        
                        '    DAILY_MCTHAI s.' || to_char(SYSDATE-1, 'YYYYMMDD') || ' as attached.' || chr(13) || chr(13) ||
        
                      'Best Regards,'|| chr(13) 
                      ;
            -- Modify the code to initialize the variable
             attachments := sendmailjpkg.attachments_list('/export/home/bssuser/dba_directory/PL_SQL/EX_DATA/DAILY_MCTHAI_s.'|| to_char(SYSDATE-1,'DD-MON-YYYY') || '.csv');
              v_return := sendmailjpkg.sendmail(
              smtpservername => smtpservername,
              sender => sender,
              recipient => recipient,
              ccrecipient => ccrecipient,
              bccrecipient => bccrecipient,
              subject => subject,
              BODY => BODY,
              errormessage => errormessage,
              attachments => attachments
            );
            
          END; 
END DAILY_MCTHAI;


PROCEDURE CLOUDID
    AS 

    BEGIN
          
           DECLARE
        
          fhandle utl_file.file_type;
          v_date VARCHAR2(11);
          v_date1 VARCHAR2(15);
          TYPE gencurtyp IS REF CURSOR;
              detail gencurtyp;
              v_log  VARCHAR2(1000);
              v_header_rec VARCHAR2(1000);
             
              v_CLOUDID VARCHAR2(1000);
              
              
                            

            BEGIN
              ----get settlement_date ----
              SELECT to_char(SYSDATE,'DD-MON-YYYY')
              INTO v_date
              FROM dual;
              
              SELECT to_char(SYSDATE,'YYYYMMDD_HH24MISS')
              INTO v_date1
              FROM dual;
            ---------------------------
            fhandle :=utl_file.fopen('EX_DATA_BE','BSS_C_PASSENGER_'|| v_date1 || '.txt','w');--Opening a file
            -------------- HEADER ----------------
            SELECT 'H|' || to_char(SYSDATE,'YYYYMMDD') AS HEADER
            INTO v_header_rec
            FROM dual ;
            --------------END HEADER ----------------
            --------------WRITE HEADER---------------
            v_log := v_header_rec ||chr(13);
            utl_file.put_line(fhandle, v_log);
            -----------------------------------------
            OPEN detail FOR 
            
    
   select aa.MIN||'|'||aa.CNT||'|'||aa.Passenger_type||'|'||BB.DESCRIPTION||'|'||dd.DISPLAY||'|'||cc.ALLOW_BINDING as CLOUDID
      from ( select min(TS) as min,CNT ,PASSENGER_TYPE from (
      select TS,min(CNT) as CNT,PASSENGER_TYPE from (
      WITH cte as ( 
      SELECT CARD_SERIAL_NUMBER, PASSENGER_TYPE, 
      ROW_NUMBER() OVER(PARTITION BY PASSENGER_TYPE ORDER BY CARD_SERIAL_NUMBER) AS gn,ROW_NUMBER() OVER (ORDER BY CARD_SERIAL_NUMBER) AS rn 
      FROM CLOUDID.card_type ), cte2 AS ( SELECT PASSENGER_TYPE, CARD_SERIAL_NUMBER, gn, rn, gn - rn as gb 
      FROM cte ), cte3 AS ( 
      SELECT PASSENGER_TYPE, MIN(CARD_SERIAL_NUMBER) As Ts,max(CARD_SERIAL_NUMBER) as Cnt 
      FROM cte2 
      GROUP BY PASSENGER_TYPE, gb) 
      SELECT Ts,Cnt,PASSENGER_TYPE 
      FROM cte3 
   UNION ALL  
      SELECT MIN(CARD_SERIAL_NUMBER) as low_height, 
      max(CARD_SERIAL_NUMBER) as max, 
      PASSENGER_TYPE as series 
      FROM CLOUDID.card_type
      group by PASSENGER_TYPE 
    UNION ALL 
      SELECT MAX(CARD_SERIAL_NUMBER) aslow_height, 
      max(CARD_SERIAL_NUMBER) as max, 
      PASSENGER_TYPE as series 
      FROM CLOUDID.card_type 
      group by PASSENGER_TYPE 
      order by 3,1,2 ) group by TS,PASSENGER_TYPE) group by CNT,PASSENGER_TYPE )aa
       --Left join (select PASSENGER_TYPE,DESCRIPTION from SYSTEMCD.SYSCD_PASSENGER_TYPE
       --    where DATA_VERSION in ( select max(data_version) from SYSTEMCD.SYSCD_PASSENGER_TYPE))bb on BB.PASSENGER_TYPE = AA.PASSENGER_TYPE
       Left join (
       SELECT DISTINCT 
fki_psgn_typ as PASSENGER_TYPE, 
name as DESCRIPTION
--,DSCR as FULL_NAME 
FROM 
( 
SELECT vsd.FKI_PSGN_TYP, tsd.NAME, tsd.DSCR 
FROM cd.VER_SALE_DTL vsd 
INNER JOIN cd.TXT_SALE_DTL tsd 
ON vsd.FKI_SALE_DTL = tsd.FKI_SALE_DTL 
AND vsd.VER = tsd.FKV_SALE_DTL 
WHERE ( vsd.FKI_SALE_DTL, vsd.VER ) IN 
( 
SELECT esd.FKI_SALE_DTL, esd.FKV_SALE_DTL 
FROM CD.EIS_SALE_DTL esd 
WHERE FKV_CD_SET = (SELECT MAX(DATA_VERSION) FROM V_VERSION1) 
) 
AND ( vsd.FKI_SALE_DTL <> 4294967295 ) 
AND tsd.FKE_LANG = 3751 
ORDER BY vsd.FKI_PSGN_TYP, tsd.FKE_LANG 
) 
union all (select 0,'Rabbit' from dual)
       
       )
bb on BB.PASSENGER_TYPE = AA.PASSENGER_TYPE

       Left join (select PASSENGER_TYPE_ID,ALLOW_BINDING from CLOUDID.PASSENGER_ALLOW_BINDING)cc on aa.PASSENGER_TYPE = cc.PASSENGER_TYPE_ID
       Left join (select PASSENGER_TYPE_ID,DISPLAY from CLOUDID.Passenger_display) dd  on  aa.PASSENGER_TYPE = dd.PASSENGER_TYPE_ID
     order by aa.MIN
     ;

                              
            loop
              fetch detail
              INTO 
              v_CLOUDID ;
              

              
              exit
            WHEN detail%notfound;
             
              v_log := v_CLOUDID||chr(13);
              
              utl_file.put_line(fhandle, v_log);
              utl_file.fflush(fhandle);
              
            END loop ;
            CLOSE detail;

            utl_file.fclose(fhandle);
          END;
          
         --send mail--
       
END CLOUDID;


PROCEDURE DAILY_TEXT_FILE_BUS_SALAYA
    AS 

    BEGIN
          
           DECLARE
        
          fhandle utl_file.file_type;
          v_date VARCHAR2(11);
          TYPE gencurtyp IS REF CURSOR;
              detail gencurtyp;
              v_log  VARCHAR2(1000);
              v_header_rec VARCHAR2(1000);
             
              v_TXN_DATE_TIME VARCHAR2(100);
              v_TXN_id number;
              v_SOURCE_PARTICIPANT_ID number;
              v_DEVICE_ID number;
              v_CARD_SERIAL_NUMBER number;
              v_card_type number;
              v_product_type number;
              v_CARD_SEQUENCE_NUMBER number;
              v_ROUTE_ID number;
              v_BUS_ID VARCHAR2(100);
              v_STATION_ID number;
              v_IN_USE_PRODUCT number;
              v_TXN_VALUE number;
              v_ENTRY_DATETIME VARCHAR2(100);
              v_ENTRY_STATION VARCHAR2(100);
              v_EXIT_DATETIME VARCHAR2(100);
              v_EXIT_STATION VARCHAR2(100);
              v_FARE_OVERRIDE_MODE VARCHAR2(100);
              v_POINT_NAME VARCHAR2(100);
             
         
                         

            BEGIN
              ----get settlement_date ----
              SELECT to_char(SYSDATE-1,'YYYYMMDD')
              INTO v_date
              FROM dual;
            ---------------------------
            fhandle :=utl_file.fopen('EX_DATA_BE','RD_'|| v_date ||'_000000'||'_00000000'||'_104'|| '.txt','w');--Opening a file
            -------------- HEADER ----------------
            SELECT 'TXN_DATE_TIME#TXN_id#SOURCE_PARTICIPANT_ID#DEVICE_ID#CARD_SERIAL_NUMBER#card_type#product_type#CARD_SEQUENCE_NUMBER#ROUTE_ID#BUS_ID#STATION_ID#IN_USE_PRODUCT#TXN_VALUE#ENTRY_DATETIME#ENTRY_STATION#EXIT_DATETIME#EXIT_STATION#FARE_OVERRIDE_MODE#POINT_NAME' AS HEADER
            INTO v_header_rec
            FROM dual ;
            --------------END HEADER ----------------
            --------------WRITE HEADER---------------
            v_log := v_header_rec ||chr(13);
            utl_file.put_line(fhandle, v_log);
            -----------------------------------------
            OPEN detail FOR 
                
      SELECT
      to_Char(RP_STD.TOLOCALTIME(TXN_DATE_TIME),'YYYY-MM-dd HH24:MI:SS') AS TXN_DATE_TIME,
      case when ud_subtype = 13 then '41' else '92' end AS TXN_id,
      SOURCE_PARTICIPANT_ID,
      CUT_ALL.DEVICE_ID as DEVICE_ID ,
      case when CARD_SERIAL_NUMBER in (003200571,
          003192082,
          003200572,
          003192083,
          003200569,
          003200573,
          003200568,
          003200575,
          003192079,
          003192080,
          003192079,
          003200574) then '88' || lpad(CARD_SERIAL_NUMBER,9,'0') else '00000000000' end as CARD_SERIAL_NUMBER,
      application_PASSENGER_TYPE AS card_type,
      null as product_type,
     -- bss_reports.pkg_fun.getproductsaledesc(aa.csc_serial_number, aa.csc_issuer_id, aa.csc_lifecycle_count, aa.csc_type) as product_type,
      CARD_SEQUENCE_NUMBER,
      null as ROUTE_ID,
      DEVICE_STATUS.EQUIPMENT_NO as BUS_ID,
      null as STATION_ID,
      '0' as IN_USE_PRODUCT,
      TRANSACTION_VALUE as TXN_VALUE,
      to_Char(RECONCILIATION_DATE,'YYYY-MM-dd HH24:MI:SS') AS ENTRY_DATETIME,
      null as ENTRY_STATION,
      null as EXIT_DATETIME,
      null as EXIT_STATION,
      null as FARE_OVERRIDE_MODE,
      null as POINT_NAME
      FROM  
( 
    SELECT null as card_uid,card_issuer_id,null as TRIP_ORIGIN_LOCATION,CARD_LIFE_CYCLE_COUNT,eft_terminal_id,eft_trace_number,streaming_session_id,null as AUTOLOAD_DAILY_LIMIT,null as AUTOLOAD_DAILY_COUNTER,lower_ptsn,upper_ptsn,null as remaining_rides,CARD_SERIAL_NUMBER,TRANSACTION_VALUE,PURSE_REMAINING_VALUE,REPORTS.BKK_INT_FUN.GETTRANSACTIONDESC (UD_TYPE,UD_SUBTYPE) AS TXN_TYPE,A.EXCEPTION_LIST, A.UD_TYPE,A.UD_SUBTYPE,A.TXN_DATE_TIME,RECONCILIATION_DATE,LAV_DATE_TIME,A.CARD_SEQUENCE_NUMBER,PTSN,'CUT_PI_FINANCIAL' AS TABLE_NAME,SOURCE_PARTICIPANT_ID,SERVICE_PARTICIPANT_ID,DESTINATION_PARTICIPANT_ID,DEVICE_ID,UDSN,device_location,to_number(substr(to_char(device_location,'XXXXXXXX'),-6,6),'XXXXXXXX') as location_id_trf, DATA_VERSION,ORIGINAL_FILE_NAME,original_txn_type,SETTLEMENT_DATE,iss_txn_reflection,cch_txn_approved
    ,payment_method0,payment_value0,payment_method1,payment_value1,payment_method2,payment_value2,payment_method3,payment_value3
    ,LAV_PARTICIPANT_ID, LAV_SAM_ID, LAV_PTSN, LAV_TXN_VALUE, LAV_REMAINING_VALUE,  null as LAV_REMAINING_RIDES, LAV_METHOD_OF_PAYMENT
    ,APPLICATION_PASSENGER_TYPE FROM CUT_PI_FINANCIAL A
    UNION ALL
    SELECT card_uid,card_issuer_id,null as TRIP_ORIGIN_LOCATION,CARD_LIFE_CYCLE_COUNT,null as eft_terminal_id,null as eft_trace_number,streaming_session_id,null as AUTOLOAD_DAILY_LIMIT,null as AUTOLOAD_DAILY_COUNTER,null as lower_ptsn,null as upper_ptsn,null as remaining_rides,CARD_SERIAL_NUMBER,TRANSACTION_VALUE,NULL AS PURSE_REMAINING_VALUE,REPORTS.BKK_INT_FUN.GETTRANSACTIONDESC (UD_TYPE,UD_SUBTYPE) AS TXN_TYPE,EXCEPTION_LIST, UD_TYPE,UD_SUBTYPE,TXN_DATE_TIME,RECONCILIATION_DATE,NULL AS LAV_DATE_TIME,CARD_SEQUENCE_NUMBER,NULL AS PTSN,'CUT_CI_MAINTENANCE' AS TABLE_NAME,SOURCE_PARTICIPANT_ID,SERVICE_PARTICIPANT_ID,DESTINATION_PARTICIPANT_ID,DEVICE_ID,UDSN,device_location,to_number(substr(to_char(device_location,'XXXXXXXX'),-6,6),'XXXXXXXX') as location_id_trf, DATA_VERSION,ORIGINAL_FILE_NAME,original_txn_type,SETTLEMENT_DATE,iss_txn_reflection,cch_txn_approved
    ,payment_method0,payment_value0,payment_method1,payment_value1,payment_method2,payment_value2,payment_method3,payment_value3
    ,null as LAV_PARTICIPANT_ID, null as LAV_SAM_ID, null as LAV_PTSN, null as LAV_TXN_VALUE, null as LAV_REMAINING_VALUE, null as LAV_REMAINING_RIDES, null as LAV_METHOD_OF_PAYMENT
    ,null as APPLICATION_PASSENGER_TYPE FROM CUT_CI_MAINTENANCE A
) CUT_ALL
        left join DEVICE_STATUS on CUT_ALL.Device_ID=DEVICE_STATUS.Device_ID and CUT_ALL.SOURCE_PARTICIPANT_ID=DEVICE_STATUS.PARTICIPANT_ID
        left join SYSTEMCD.SYSCD_TXN T on (CUT_ALL.DATA_VERSION=T.DATA_VERSION) AND (CUT_ALL.UD_TYPE=T.TXN_TYPE) AND  (CUT_ALL.UD_SUBTYPE=T.TXN_SUBTYPE)
        left join SYSCD_LOCATION L on (to_number(substr(to_char(CUT_ALL.device_location,'XXXXXXXX'),-6,6),'XXXXXXXX')=L.location_code) and (CUT_ALL.source_participant_id=L.participant_id) and (CUT_ALL.DATA_VERSION=L.DATA_VERSION) and (L.location_type in (9,15,16))
       left join application_account aa on CUT_ALL.card_serial_number = aa.csc_serial_number and CUT_ALL.CARD_LIFE_CYCLE_COUNT = aa.csc_lifecycle_count
      left join syscd_passenger_type p on p.passenger_type = cut_all.card_uid and p.data_version = cut_all.data_version
        WHERE CUT_ALL.iss_txn_reflection = 'N'
        and CUT_ALL.cch_txn_approved = 'Y'
        AND CUT_ALL.settlement_date = TRUNC(SYSDATE-1)
        and source_participant_id = 104
        and ud_subtype = 13 and ud_type = 3
        ;  
        
                              
            loop
              fetch detail
              INTO 
              v_TXN_DATE_TIME ,
              v_TXN_id ,
              v_SOURCE_PARTICIPANT_ID ,
              v_DEVICE_ID,
              v_CARD_SERIAL_NUMBER,
              v_card_type,
              v_product_type,
              v_CARD_SEQUENCE_NUMBER,
              v_ROUTE_ID,
              v_BUS_ID,
              v_STATION_ID,
              v_IN_USE_PRODUCT,
              v_TXN_VALUE,
              v_ENTRY_DATETIME,
              v_ENTRY_STATION,
              v_EXIT_DATETIME,
              v_EXIT_STATION,
              v_FARE_OVERRIDE_MODE,
              v_POINT_NAME;

              
              exit
            WHEN detail%notfound;
             
              v_log := v_TXN_DATE_TIME||'#'||v_TXN_id||'#'||v_SOURCE_PARTICIPANT_ID||'#'||v_DEVICE_ID||'#'||v_CARD_SERIAL_NUMBER||'#'||v_card_type||'#'||v_product_type||'#'||v_CARD_SEQUENCE_NUMBER||'#'||v_ROUTE_ID||'#'||v_BUS_ID||'#'||v_STATION_ID||'#'||v_IN_USE_PRODUCT||'#'||v_TXN_VALUE||'#'||v_ENTRY_DATETIME||'#'||v_ENTRY_STATION||'#'||v_EXIT_DATETIME||'#'||v_EXIT_STATION||'#'||v_FARE_OVERRIDE_MODE||'#'||v_POINT_NAME||chr(13);
              
              utl_file.put_line(fhandle, v_log);
              utl_file.fflush(fhandle);
              
            END loop ;
            CLOSE detail;

            utl_file.fclose(fhandle);
          END;
          
 --send mail--
       /*  DECLARE
          smtpservername VARCHAR2(200);
          sender VARCHAR2(200);
          recipient VARCHAR2(250);
          ccrecipient VARCHAR2(250);
          bccrecipient VARCHAR2(250);
          subject VARCHAR2(250);
          BODY VARCHAR2(250);
          errormessage VARCHAR2(250);
          attachments sendmailjpkg.attachments_list;
          v_return NUMBER;
          v_date date;
         
          BEGIN
          
            SELECT to_char(SYSDATE-1,'DD-MON-YYYY')
              INTO v_date
              FROM dual;
            dbms_java.grant_permission( 'BSS', 'SYS:java.io.FilePermission', '/export/home/bssuser/dba_directory/PL_SQL/EX_DATA/RD_s.'|| to_char(SYSDATE-1,'DD-MON-YYYY') || '.txt', 'read' );
            COMMIT;
            smtpservername := '127.0.0.1';
            sender := 'be@rabbit.co.th';
            recipient := 'sirilucks@rabbit.co.th';
            --ccrecipient := 'be@rabbit.co.th';
            bccrecipient := NULL;
            subject := 'DAILY_TEXT_FILE_BUS_SALAYA_s.' || to_char(SYSDATE-1, 'YYYYMMDD') ;
            BODY := 'Dear ALL,' || chr(13) || chr(13) ||
        
                        '    DAILY_TEXT_FILE_BUS_SALAYA s.' || to_char(SYSDATE-1, 'YYYYMMDD') || ' as attached.' || chr(13) || chr(13) ||
        
                      'Best Regards,'|| chr(13) 
                      ;
            -- Modify the code to initialize the variable
             attachments := sendmailjpkg.attachments_list('/export/home/bssuser/dba_directory/PL_SQL/EX_DATA/RD_s.'|| to_char(SYSDATE-1,'DD-MON-YYYY') || '.txt');
              v_return := sendmailjpkg.sendmail(
              smtpservername => smtpservername,
              sender => sender,
              recipient => recipient,
              ccrecipient => ccrecipient,
              bccrecipient => bccrecipient,
              subject => subject,
              BODY => BODY,
              errormessage => errormessage,
              attachments => attachments
            );
            
          END; */
END DAILY_TEXT_FILE_BUS_SALAYA;

PROCEDURE Amlo_Monitor_Daily
    AS 

    BEGIN
          
           DECLARE
        
          fhandle utl_file.file_type;
          v_date VARCHAR2(11);
          TYPE gencurtyp IS REF CURSOR;
              detail gencurtyp;
              v_log  VARCHAR2(1000);
              v_header_rec VARCHAR2(1000);
             
              v_CARDHOLDER_NUMBER         number;
              v_CSC_SERIAL_NUMBER         number;
              v_CARDHOLDER_TITLE          number;
              v_CARDHOLDER_NAME           VARCHAR2(200);
              v_CARDHOLDER_SURNAME        VARCHAR2(200);
              v_SEX                       VARCHAR2(100);
              v_DATE_OF_BIRTH             date;
              v_CARDHOLDER_EMAIL          VARCHAR2(200);
              v_REFERENCE_NUMBER          VARCHAR2(100);
              v_CARDHOLDER_PHONE_MOBILE   VARCHAR2(100);
              v_CARDHOLDER_SERIAL_NUMBER  VARCHAR2(100);
              v_PERSONALISATION_VERSION   date;
              v_LAST_USAGE_TIME           date;
                            
         
                         

            BEGIN
              ----get settlement_date ----
              SELECT to_char(SYSDATE-1,'DD-MON-YYYY')
              INTO v_date
              FROM dual;
            ---------------------------
            fhandle :=utl_file.fopen('EX_DATA_BE','Amlo_Monitor_Daily_s.'|| v_date || '.csv','w');--Opening a file
            -------------- HEADER ----------------
             SELECT 'CARDHOLDER_NUMBER ,CSC_SERIAL_NUMBER,CARDHOLDER_TITLE,CARDHOLDER_NAME,CARDHOLDER_SURNAME,SEX,DATE_OF_BIRTH,CARDHOLDER_EMAIL,REFERENCE_NUMBER,CARDHOLDER_PHONE_MOBILE,CARDHOLDER_SERIAL_NUMBER,PERSONALISATION_VERSION,LAST_USAGE_TIME'  AS HEADER
            INTO v_header_rec
            FROM dual ;
            --------------END HEADER ----------------
            --------------WRITE HEADER---------------
            v_log := v_header_rec ||chr(13);
            utl_file.put_line(fhandle, v_log);
            -----------------------------------------
            OPEN detail FOR 
    
         select CARDHOLDER_NUMBER ,CSC_SERIAL_NUMBER,CARDHOLDER_TITLE,CARDHOLDER_NAME,CARDHOLDER_SURNAME,SEX,DATE_OF_BIRTH,CARDHOLDER_EMAIL,REFERENCE_NUMBER,CARDHOLDER_PHONE_MOBILE
                ,CARDHOLDER_SERIAL_NUMBER,
                PERSONALISATION_VERSION,LAST_USAGE_TIME 
                from (     
                select distinct 
                ac.CARDHOLDER_NUMBER ,
                H.CSC_SERIAL_NUMBER,
                ac.CARDHOLDER_TITLE,
                ac.CARDHOLDER_NAME,
                ac.CARDHOLDER_SURNAME,
                ac.SEX,
                ac.DATE_OF_BIRTH,
                ac.CARDHOLDER_EMAIL,
                ac.REFERENCE_NUMBER,
                ac.CARDHOLDER_PHONE_MOBILE,
                ac.CARDHOLDER_SERIAL_NUMBER,
                ac.PERSONALISATION_VERSION,
                ac.LAST_USAGE_TIME
                
                from cardholder_account ac
                left join card_holder h on ac.CARDHOLDER_SERIAL_NUMBER = h.HOLDER_SERIAL_NUM
                where cardholder_number is not null 
                --and H.CSC_SERIAL_NUMBER = 580026778;
                and cardholder_number in (select ID_VALUE from REGISTRATION.IDnumber  )--where file_name like 'thailandlist%' )
                and (cardholder_number,CSC_SERIAL_NUMBER) not in (select ID_VALUE,CSC_SERIAL_NUMBER from REGISTRATION.idnumber_history ) -- 25/01/2021 add by sirilucks
               
                );
                              
            loop
              fetch detail
              INTO 
              v_CARDHOLDER_NUMBER ,
              v_CSC_SERIAL_NUMBER,
              v_CARDHOLDER_TITLE,
              v_CARDHOLDER_NAME,
              v_CARDHOLDER_SURNAME,
              v_SEX,
              v_DATE_OF_BIRTH,
              v_CARDHOLDER_EMAIL,
              v_REFERENCE_NUMBER,
              v_CARDHOLDER_PHONE_MOBILE,
              v_CARDHOLDER_SERIAL_NUMBER,
              v_PERSONALISATION_VERSION,
              v_LAST_USAGE_TIME;

              
              exit
            WHEN detail%notfound;
             
              v_log := v_CARDHOLDER_NUMBER||','||v_CSC_SERIAL_NUMBER||','||v_CARDHOLDER_TITLE||','||v_CARDHOLDER_NAME||','||v_CARDHOLDER_SURNAME||','||v_SEX||','||v_DATE_OF_BIRTH||','||v_CARDHOLDER_EMAIL||','||v_REFERENCE_NUMBER||','||v_CARDHOLDER_PHONE_MOBILE||','||v_CARDHOLDER_SERIAL_NUMBER||','||v_PERSONALISATION_VERSION||','||v_LAST_USAGE_TIME ||chr(13);
              
              utl_file.put_line(fhandle, v_log);
              utl_file.fflush(fhandle);
              
            END loop ;
            CLOSE detail;

            utl_file.fclose(fhandle);
          END;
          
         --send mail--
           DECLARE
          smtpservername VARCHAR2(200);
          sender VARCHAR2(200);
          recipient VARCHAR2(250);
          ccrecipient VARCHAR2(250);
          bccrecipient VARCHAR2(250);
          subject VARCHAR2(250);
          BODY VARCHAR2(250);
          errormessage VARCHAR2(250);
          attachments sendmailjpkg.attachments_list;
          v_return NUMBER;
          v_date date;
         
          BEGIN
          
            SELECT to_char(SYSDATE-1,'dd-MON-yyyy')
              INTO v_date
              FROM dual;
            dbms_java.grant_permission( 'BSS', 'SYS:java.io.FilePermission', '/export/home/bssuser/dba_directory/PL_SQL/EX_DATA/Amlo_Monitor_Daily_s.'|| to_char(SYSDATE-1,'DD-MON-YYYY') || '.csv', 'read' );
            COMMIT;
            smtpservername := '127.0.0.1';
            sender := 'amlo_alert@rabbit.co.th';
            recipient := 'be@rabbit.co.th,qa@rabbit.co.th';
            --ccrecipient := 'be@rabbit.co.th';
            bccrecipient := NULL;
            subject := 'Amlo_Monitor_Daily_s.' || to_char(SYSDATE-1, 'YYYYMMDD') ;
            BODY := 'Dear Team,' || chr(13) || chr(13) ||
        
                        '    Amlo_Monitor_Daily s.' || to_char(SYSDATE-1, 'YYYYMMDD') || ' as attached.' || chr(13) || chr(13) ||
        
                      'Best Regards,'|| chr(13) 
                      ;
            -- Modify the code to initialize the variable
             attachments := sendmailjpkg.attachments_list('/export/home/bssuser/dba_directory/PL_SQL/EX_DATA/Amlo_Monitor_Daily_s.'|| to_char(SYSDATE-1,'DD-MON-YYYY') || '.csv');
              v_return := sendmailjpkg.sendmail(
              smtpservername => smtpservername,
              sender => sender,
              recipient => recipient,
              ccrecipient => ccrecipient,
              bccrecipient => bccrecipient,
              subject => subject,
              BODY => BODY,
              errormessage => errormessage,
              attachments => attachments
            );
            
          END; 
END Amlo_Monitor_Daily;

PROCEDURE CCH_LATE_TXN_MONTHLY
    AS 

    BEGIN
          
           DECLARE
        
          fhandle utl_file.file_type;
          v_date VARCHAR2(11);
          TYPE gencurtyp IS REF CURSOR;
              detail gencurtyp;
              v_log  VARCHAR2(1000);
              v_header_rec VARCHAR2(1000);
             
            v_CCH_SETTLEMENT_DATE       date;
            v_RECON_DATE                date;
            v_SERVICE_ID                VARCHAR2(200);
            v_SERV_PARTICIPANT_NAME     VARCHAR2(200);
            v_TXN_TYPE                  VARCHAR2(200);
            v_VOLUME                    number;
            v_VALUE                     number;
              
                            
         
                         

            BEGIN
              ----get settlement_date ----
              SELECT to_char(SYSDATE-1,'DD-MON-YYYY')
              INTO v_date
              FROM dual;
            ---------------------------
            fhandle :=utl_file.fopen('EX_DATA_BE','CCH_LATE_TXN_MONTHLY_s.'|| v_date || '.csv','w');--Opening a file
            -------------- HEADER ----------------
             SELECT 'CCH_SETTLEMENT_DATE,RECON_DATE,SERVICE_ID,SERV_PARTICIPANT_NAME,TXN_TYPE,VOLUME,VALUE '  AS HEADER
            INTO v_header_rec
            FROM dual ;
            --------------END HEADER ----------------
            --------------WRITE HEADER---------------
            v_log := v_header_rec ||chr(13);
            utl_file.put_line(fhandle, v_log);
            -----------------------------------------
            OPEN detail FOR 
    
                        select  
                        CCH_SETTLEMENT_DATE AS CCH_SETTLEMENT_DATE 
                        ,recon_date as RECON_DATE 
                        ,service_id as service_id
                        ,case when reports.BKK_INT_FUN.GetParticipantLongName (OSUMM.SERVICE_ID) like '%,%' 
                         then  replace  ( reports.BKK_INT_FUN.GetParticipantLongName (OSUMM.SERVICE_ID),',','')
                         else  reports.BKK_INT_FUN.GetParticipantLongName (OSUMM.SERVICE_ID)end AS SERV_PARTICIPANT_NAME
                        ,REPORTS.BKK_INT_FUN.GETTRANSACTIONDESC (txn_type,txn_sub_type) as TXN_TYPE  
                        ,SUM(GFS_VOLUME) as VOLUME  
                        ,SUM(GFS_VALUE/100) as VALUE   
                        from online_summ  OSUMM
                        where cch_settlement_date between TRUNC(SYSDATE-10) and TRUNC(SYSDATE-1)  
                        and txn_type=3  
                        and txn_sub_type in (10,13,16,19,26,37,39,71,91,118) 
                        and recon_date < TRUNC(SYSDATE-10) 
                        and GFS_VOLUME > 0  
                        group by   
                        CCH_SETTLEMENT_DATE ,Reports.BKK_INT_FUN.GetParticipantLongName (OSUMM.SERVICE_ID) 
                        ,recon_date 
                        ,service_id  
                        ,REPORTS.BKK_INT_FUN.GETTRANSACTIONDESC (txn_type,txn_sub_type)  
                        ORDER BY 
                        CCH_SETTLEMENT_DATE 
                        ,recon_date 
                        ,service_id;
                              
            loop
              fetch detail
              INTO 
            v_CCH_SETTLEMENT_DATE,
            v_RECON_DATE,
            v_SERVICE_ID,
             v_SERV_PARTICIPANT_NAME,
            v_TXN_TYPE,
            v_VOLUME,
            v_VALUE;

              
              exit
            WHEN detail%notfound;
             
              v_log := v_CCH_SETTLEMENT_DATE||','||v_RECON_DATE||','||v_SERVICE_ID|| v_SERV_PARTICIPANT_NAME||','||v_TXN_TYPE||','||v_VOLUME||','||v_VALUE||chr(13);
              
              utl_file.put_line(fhandle, v_log);
              utl_file.fflush(fhandle);
              
            END loop ;
            CLOSE detail;

            utl_file.fclose(fhandle);
          END;
          
         --send mail--
           DECLARE
          smtpservername VARCHAR2(200);
          sender VARCHAR2(200);
          recipient VARCHAR2(250);
          ccrecipient VARCHAR2(250);
          bccrecipient VARCHAR2(250);
          subject VARCHAR2(250);
          BODY VARCHAR2(250);
          errormessage VARCHAR2(250);
          attachments sendmailjpkg.attachments_list;
          v_return NUMBER;
          v_date date;
         
          BEGIN
          
            SELECT to_char(SYSDATE-1,'dd-MON-yyyy')
              INTO v_date
              FROM dual;
            dbms_java.grant_permission( 'BSS', 'SYS:java.io.FilePermission', '/export/home/bssuser/dba_directory/PL_SQL/EX_DATA/CCH_LATE_TXN_MONTHLY_s.'|| to_char(SYSDATE-1,'DD-MON-YYYY') || '.csv', 'read' );
            COMMIT;
            smtpservername := '127.0.0.1';
            sender := 'be@rabbit.co.th';
            recipient := 'be@rabbit.co.th';
            --ccrecipient := 'be@rabbit.co.th';
            bccrecipient := NULL;
            subject := 'CCH_LATE_TXN_MONTHLY_s.' || to_char(SYSDATE-1, 'YYYYMMDD') ;
            BODY := 'Dear ALL,' || chr(13) || chr(13) ||
        
                        '    CCH_LATE_TXN_MONTHLY '  || ' as attached.' || chr(13) || chr(13) ||
        
                      'Best Regards,'|| chr(13) 
                      ;
            -- Modify the code to initialize the variable
             attachments := sendmailjpkg.attachments_list('/export/home/bssuser/dba_directory/PL_SQL/EX_DATA/CCH_LATE_TXN_MONTHLY_s.'|| to_char(SYSDATE-1,'DD-MON-YYYY') || '.csv');
              v_return := sendmailjpkg.sendmail(
              smtpservername => smtpservername,
              sender => sender,
              recipient => recipient,
              ccrecipient => ccrecipient,
              bccrecipient => bccrecipient,
              subject => subject,
              BODY => BODY,
              errormessage => errormessage,
              attachments => attachments
            );
            
          END; 
END CCH_LATE_TXN_MONTHLY;

PROCEDURE DAILY_BLACKLIST_HOTLINE
    AS 

    BEGIN
          
           DECLARE
        
          fhandle utl_file.file_type;
          v_date VARCHAR2(11);
          TYPE gencurtyp IS REF CURSOR;
              detail gencurtyp;
              v_log  VARCHAR2(1000);
              v_header_rec VARCHAR2(1000);
                               
                    V_DATE_TIME date;
                    V_NAME VARCHAR2(250);
                    V_PHONE VARCHAR2(100);
                    V_ID_CARD VARCHAR2(100);
                    V_CARD VARCHAR2(100);
                    V_CARD_TYPE VARCHAR2(250);
                    V_PRODUCT VARCHAR2(100); 
                    V_TRIP_REMAIN number ;
                    V_TRIPS number ;
                    V_ISSUE_PASS_DATE date;
                    V_EXPIRY_TIME_TRIP date;
                    V_STATUS VARCHAR2(100);
                    V_DEPOSIT_BALANCE number ;
                         

            BEGIN
              ----get settlement_date ----
              SELECT to_char(SYSDATE-1,'YYYYMMDD')
              INTO v_date
              FROM dual;
            ---------------------------
            fhandle :=utl_file.fopen('EX_DATA_BE','BLACKLIST_s.'|| v_date || '.txt','w');--Opening a file
            -------------- HEADER ----------------
            SELECT 'DATE_TIME,NAME,PHONE,ID_CARD,CARD,CARD_TYPE,PRODUCT,TRIP_REMAIN,TRIPS,ISSUE_PASS_DATE,EXPIRY_TIME_TRIP,STATUS,DEPOSIT_BALANCE' AS HEADER
            INTO v_header_rec
            FROM dual ;
            --------------END HEADER ----------------
            --------------WRITE HEADER---------------
            v_log := v_header_rec ||chr(13);
            utl_file.put_line(fhandle, v_log);
            -----------------------------------------
            OPEN detail FOR 
                
                            select date_time,name,phone,id_card  ,'088' || lpad(card,9,'0')as card
                        ,reports.bkk_int_fun.getpassengertype(p.PASSENGER_TYPE,(select max(data_version) from syscd_passenger_type ) ,'EN') AS card_type
                        , case when pc.prod_serial_number =1 then prod_serial_number||'-Purse'
                        else prod_serial_number||'-Pass' end as product
                        ,case when pc.prod_serial_number = 1 then pc.remaining_value*0.01
                        else pc.remaining_value end as trip_remain
                        ,pc.pass_number_of_trips_issued as trips
                        ,pc.issued_time+7/24 as  Issue_Pass_date
                        ,pc.expiry_time+7/24 as expiry_time_trip
                        
                        ,case when expiry_time >= (sysdate) and pc.prod_serial_number !=1 then 'active'
                        when pc.prod_serial_number =1  then 'active'
                        When expiry_time is null then 'active'
                        else 'expired' end as status,
                       ca.deposit_balance/100 as deposit_balance
                        from                        (select distinct cc.card_serial_number as card,
                                                    ac.cardholder_name as name
                                                    ,ac.cardholder_surname as surname
                                                    ,ac.cardholder_phone_mobile as mobile_phone
                                                    ,ac.cardholder_phone_home as phone
                                                    ,ac.cardholder_serial_number 
                                                    ,ac.cardholder_number as id_card
                                                    ,to_date(ah.date_time,'DD-MON-YYYY HH24:MI:SS')as date_time
                                                    from  actionlist.actionlist_history ah
                                                    left join actionlist.card_actionlist cc on cc.entry_id = ah.entry_id  
                                                    left join CARD.card_holder h on h.csc_serial_number = cc.card_serial_number 
                                                    left join cardholder_account ac on ac.CARDHOLDER_SERIAL_NUMBER = h.HOLDER_SERIAL_NUM 
                                                    where to_char(date_time,'DD-MON-YYYY') = to_char(sysdate-1,'DD-MON-YYYY')
                                                    and ah.notes like 'CREATED%'
                                                    and holder_serial_num in (select max(a.holder_serial_num)  from card_holder a where a.csc_serial_number = h.csc_serial_number )
                                                  -- and ap.time_loaded = (select max(ap2.time_loaded) from ATUAGENT.atu_personalise_detail ap2 where ap.bss_card_number = ap2.bss_card_number)
                                                    ) a                              
                         left join PRODUCT.product_account pc on a.card = pc.csc_serial_number  
                        left join application_account aa on a.card = aa.csc_serial_number 
                        left join card_account ca on ca.csc_serial_number = aa.csc_serial_number
                        left join syscd_passenger_type p on p.passenger_type = aa.passenger_type 
                         where               pc.account_state = 3 
                                             and pc.remaining_value !=0 
                                             and data_version = (select max(data_version) from syscd_passenger_type)
                                             and ca.csc_lifecycle_count = (select max(b.csc_lifecycle_count) from card_account b where b.csc_serial_number = ca.csc_serial_number )
                         order by  card,Issue_Pass_date
                                             ;
            loop
              fetch detail
              INTO 
                    V_DATE_TIME,
                    V_NAME,
                    V_PHONE,
                    V_ID_CARD,
                    V_CARD,
                    V_CARD_TYPE,
                    V_PRODUCT,
                    V_TRIP_REMAIN,
                    V_TRIPS,
                    V_ISSUE_PASS_DATE,
                    V_EXPIRY_TIME_TRIP,
                    V_STATUS,
                    V_DEPOSIT_BALANCE;
              
              exit
            WHEN detail%notfound;
             
              v_log := V_DATE_TIME||','||V_NAME||','||V_PHONE||','||V_ID_CARD||','||V_CARD||','||V_CARD_TYPE||','||V_PRODUCT||','||V_TRIP_REMAIN||','||V_TRIPS||','||V_ISSUE_PASS_DATE||','||V_EXPIRY_TIME_TRIP||','||V_STATUS||','||V_DEPOSIT_BALANCE||chr(13);
              
              utl_file.put_line(fhandle, v_log);
              utl_file.fflush(fhandle);
              
            END loop ;
            CLOSE detail;

            utl_file.fclose(fhandle);
          END;
          
         --send mail--
        DECLARE
          smtpservername VARCHAR2(200);
          sender VARCHAR2(200);
          recipient VARCHAR2(250);
          ccrecipient VARCHAR2(250);
          bccrecipient VARCHAR2(250);
          subject VARCHAR2(250);
          BODY VARCHAR2(250);
          errormessage VARCHAR2(250);
          attachments sendmailjpkg.attachments_list;
          v_return NUMBER;
          v_date VARCHAR2(250);
         
          BEGIN
          
            SELECT to_char(SYSDATE-1,'YYYYMMDD')
              INTO v_date
              FROM dual;
            dbms_java.grant_permission( 'BSS', 'SYS:java.io.FilePermission', '/export/home/bssuser/dba_directory/PL_SQL/EX_DATA/BLACKLIST_s.'|| to_char(SYSDATE-1,'YYYYMMDD') || '.txt', 'read' );
            COMMIT;
            smtpservername := '127.0.0.1';
            sender := 'be@rabbit.co.th';
           recipient := 'be@rabbit.co.th,parinnunr@bts.co.th,PilailukP@bts.co.th,EakkavitP@bts.co.th,WinaiS@bts.co.th,anuchan@rabbit.co.th,rf@rabbit.co.th,voranunts@rabbit.co.th';
          --  recipient := 'sirilucks@rabbit.co.th';
            bccrecipient := NULL;
            subject := 'DAILY_BLACKLIST_HOTLINE.' || to_char(SYSDATE-1, 'YYYYMMDD') ;
            BODY := 'Dear ALL,' || chr(13) || chr(13) ||
        
                        '    DAILY_BLACKLIST_HOTLINE s.' || to_char(SYSDATE-1, 'YYYYMMDD') || ' as attached.' || chr(13) || chr(13) ||
        
                      'Best Regards,'|| chr(13) 
                      ;
            -- Modify the code to initialize the variable
             attachments := sendmailjpkg.attachments_list('/export/home/bssuser/dba_directory/PL_SQL/EX_DATA/BLACKLIST_s.'|| to_char(SYSDATE-1,'YYYYMMDD') || '.txt');
              v_return := sendmailjpkg.sendmail(
              smtpservername => smtpservername,
              sender => sender,
              recipient => recipient,
              ccrecipient => ccrecipient,
              bccrecipient => bccrecipient,
              subject => subject,
              BODY => BODY,
              errormessage => errormessage,
              attachments => attachments
           );
            
          END; 

END DAILY_BLACKLIST_HOTLINE;

PROCEDURE CARD_HISTORY_BLACKLIST
    AS 

    BEGIN
          
           DECLARE
        
          fhandle utl_file.file_type;
          v_date VARCHAR2(11);
          TYPE gencurtyp IS REF CURSOR;
              detail gencurtyp;
              v_log  VARCHAR2(1000);
              v_header_rec VARCHAR2(1000);
             
                            
                    V_PARTICIPANT_ID number;
                    V_PARTICIPANT_NAME VARCHAR2(200);
                    V_EQUIPMENT_NO VARCHAR2(200); 
                    V_BUSINESS_DATE date;
                    V_TXN_LOCATION1 VARCHAR2(200);
                    V_TXN_DESC VARCHAR2(200);
                    V_PASSENGER_TYPE VARCHAR2(200);
                    V_CSC_PHYSICAL_ID number;
                    V_PTSN number;
                    V_UDSN number;
                    V_TXN_TIME date;
                    V_TXN_VALUE number;
                    V_REMAINING_VALUE number;
                    V_PROD_CATID number;
                    V_VALUE_PER_RIDE number;
                    V_AVG_VALUE_PER_RIDE number;
                    V_UD_SUBTYPE number;
                         

            BEGIN
              ----get settlement_date ----
              SELECT to_char(SYSDATE-1,'DD-MON-YYYY')
              INTO v_date
              FROM dual;
            ---------------------------
            fhandle :=utl_file.fopen('EX_DATA_BE','CARD_HISTORY_BLACKLIST_s.'|| v_date || '.csv','w');--Opening a file
            -------------- HEADER ----------------
             SELECT 'PARTICIPANT_ID,PARTICIPANT_NAME,EQUIPMENT_NO,BUSINESS_DATE,TXN_LOCATION1,TXN_DESC,PASSENGER_TYPE,CSC_PHYSICAL_ID,PTSN,UDSN,TXN_TIME,TXN_VALUE,REMAINING_VALUE,PROD_CATID,VALUE_PER_RIDE,AVG_VALUE_PER_RIDE,UD_SUBTYPE'  AS HEADER
            INTO v_header_rec
            FROM dual ;
            --------------END HEADER ----------------
            --------------WRITE HEADER---------------
            v_log := v_header_rec ||chr(13);
            utl_file.put_line(fhandle, v_log);
            -----------------------------------------
            OPEN detail FOR 
    
select 
 participant_id
 ,participant_name
 ,EQUIPMENT_NO 
 --,device_id
 ,business_date
 ,txn_location1
 ,txn_desc
 ,passenger_type
 ,'88' || lpad(csc_physical_id,9,'0') AS csc_physical_id
 ,ptsn
 ,udsn
 ,txn_time
 ,txn_value
 ,remaining_value
 ,prod_catid
 ,value_per_ride
 ,avg_value_per_ride
 ,ud_subtype
from (
  SELECT tx.ud_subtype,
            tx.source_participant_id AS participant_id,
            reports.rp_std.getparticipantname(tx.source_participant_id,tx.data_version) AS participant_name,
            bss.cda.getequipnofromdeviceid (tx.device_id,tx.source_participant_id)||' ('||device_id ||')' as EQUIPMENT_NO,
            --tx.device_id AS device_id,
            reports.rp_std.tolocaltime (tx.txn_date_time) as business_date,
            reports.bkk_int_fun.getlocationnamefromvlocation(tx.source_participant_id,tx.device_location, NULL) txn_location1,
            reports.rp_std.gettransactiondesc (tx.ud_type, tx.ud_subtype, tx.data_version) AS txn_desc,
            reports.bkk_int_fun.getpassengertype(aa.passenger_type, tx.data_version) AS passenger_type,
            TO_CHAR (tx.card_serial_number) AS csc_physical_id,
            tx.card_life_cycle_count AS csc_lifecycle, tx.ptsn AS ptsn,
            tx.udsn AS udsn,
            reports.rp_std.tolocaltime (tx.txn_date_time) AS txn_time,
            CASE WHEN  REPORTS.bkk_int_fun.getprodcategorycode(product_type,product_issuer_id,data_version)=3 THEN
            num_rides
                ELSE
                  CASE
                     WHEN tx.number_of_payments = 1
                        THEN (NVL (tx.payment_value0, 0)) * 0.01
                     WHEN tx.number_of_payments = 2
                        THEN   (  NVL (tx.payment_value0, 0)
                                + NVL (tx.payment_value1, 0)
                               )
                             * 0.01
                     WHEN tx.number_of_payments = 3
                        THEN   (  NVL (tx.payment_value0, 0)
                                + NVL (tx.payment_value1, 0)
                                + NVL (tx.payment_value2, 0)
                               )
                             * 0.01
                     WHEN tx.number_of_payments = 4
                        THEN   (  NVL (tx.payment_value0, 0)
                                + NVL (tx.payment_value1, 0)
                                + NVL (tx.payment_value2, 0)
                                + NVL (tx.payment_value3, 0)
                               )
                             * 0.01
                     ELSE 0
                  END
            END AS txn_value,
            case WHEN  REPORTS.bkk_int_fun.getprodcategorycode(product_type,product_issuer_id,data_version)=3 THEN
                    NVL (tx.remaining_rides, 0)
                ELSE
                    NVL (tx.purse_remaining_value, 0) * 0.01
            END AS remaining_value,
            REPORTS.bkk_int_fun.getprodcategorycode(product_type,product_issuer_id,data_version) AS prod_catid,
            value_per_ride,
             NVL (tx.value_per_ride * 0.01, 0)
              AS   avg_value_per_ride
          
       FROM REPORTS.RV_UD tx, application_account aa   -- Now using RV_UD instead of RP_TXN
      WHERE tx.card_issuer_id = aa.csc_issuer_id
        AND tx.card_life_cycle_count = aa.csc_lifecycle_count
        AND tx.card_serial_number = aa.csc_serial_number
        AND tx.card_type = aa.csc_type
        AND (tx.ud_type,tx.ud_subtype) not in ((3,25),(3,118),(1,36),(2,21),(3,68),(1,20))  -- edit 20190320 --
        AND (tx.settlement_date BETWEEN sysdate-90 and sysdate-1)
        AND  tx.card_serial_number in (select distinct ac.card_serial_number from  actionlist.actionlist_history ah
                                left join actionlist.card_actionlist ac on ac.entry_id = ah.entry_id 
                                where to_char(date_time,'DD-MON-YYYY') = to_char(sysdate-1,'DD-MON-YYYY')
                                and notes  like 'CREATED%')    
union all  

SELECT ud_subtype,
SOURCE_PARTICIPANT_ID as participant_id
,reports.rp_std.getparticipantname(cut_all.source_participant_id,cut_all.data_version) AS participant_name
,bss.cda.getequipnofromdeviceid (device_id,source_participant_id)||' ('||device_id ||')' as EQUIPMENT_NO
,reports.rp_std.tolocaltime (txn_date_time) AS business_date
,L.location_name as txn_location1
,CUT_ALL.TXN_TYPE  AS txn_desc
,reports.bkk_int_fun.getpassengertype(application_PASSENGER_TYPE,cut_all.data_version,'EN') AS passenger_type
,TO_CHAR (card_serial_number) as csc_physical_id
,CARD_LIFE_CYCLE_COUNT as csc_lifecycle
,PTSN
,udsn
,reports.rp_std.tolocaltime (txn_date_time)  AS txn_time
,transaction_value*0.01 AS txn_value
,PURSE_REMAINING_VALUE*0.01 as REMAINING_VALUE
,prod_catid
,0 as value_per_ride
,0 as avg_value_per_ride
FROM
( SELECT 
product_type
,product_issuer_id
,0 as avg_value_per_ride
,REPORTS.bkk_int_fun.getprodcategorycode(product_type,product_issuer_id,data_version) AS prod_catid 
,0 as PURSE_REMAINING_VALUE
,0 as card_uid,CARD_LIFE_CYCLE_COUNT
,CARD_SERIAL_NUMBER
,REPORTS.BKK_INT_FUN.GETTRANSACTIONDESC (UD_TYPE,UD_SUBTYPE)|| REPORTS.BKK_INT_FUN.getreasondesc(UD_TYPE,UD_SUBTYPE,CARD_USE_FAILURE_REASON) as  TXN_TYPE
,A.UD_TYPE
,A.UD_SUBTYPE
,A.TXN_DATE_TIME
,device_location
,PTSN
,SOURCE_PARTICIPANT_ID
,DEVICE_ID,UDSN
,DATA_VERSION
,iss_txn_reflection
,settlement_date
,0 as TRANSACTION_VALUE
,APPLICATION_PASSENGER_TYPE
,A.EXCEPTION_LIST 
,CARD_USE_FAILURE_REASON
,0 as SURCHARGE_DETAILS
 FROM CUT_CI_EVENT A 
UNION ALL
SELECT 
product_type
,product_issuer_id
,0 as avg_value_per_ride
,REPORTS.bkk_int_fun.getprodcategorycode(product_type,product_issuer_id,data_version) AS prod_catid
,0 as PURSE_REMAINING_VALUE
,0 as card_uid,CARD_LIFE_CYCLE_COUNT
,CARD_SERIAL_NUMBER
,REPORTS.BKK_INT_FUN.GETTRANSACTIONDESC (UD_TYPE,UD_SUBTYPE)|| REPORTS.BKK_INT_FUN.getreasondesc(UD_TYPE,UD_SUBTYPE,SURCHARGE_DETAILS) as  TXN_TYPE
,A.UD_TYPE
,A.UD_SUBTYPE
,A.TXN_DATE_TIME
,device_location
,PTSN
,SOURCE_PARTICIPANT_ID
,DEVICE_ID,UDSN
,DATA_VERSION
,iss_txn_reflection
,settlement_date
,TRANSACTION_VALUE
,APPLICATION_PASSENGER_TYPE
,A.EXCEPTION_LIST
,0 as CARD_USE_FAILURE_REASON
,0 as SURCHARGE_DETAILS
 FROM CUT_PI_FINANCIAL A
) cut_all
left join SYSCD_LOCATION L on (to_number(substr(to_char(CUT_ALL.device_location,'XXXXXXXX'),-6,6),'XXXXXXXX')=L.location_code) and (CUT_ALL.source_participant_id=L.participant_id) and (CUT_ALL.DATA_VERSION=L.DATA_VERSION) and (L.location_type in (9,15,16,21))  
left join application_account aa on CUT_ALL.card_serial_number = aa.csc_serial_number and CUT_ALL.CARD_LIFE_CYCLE_COUNT = aa.csc_lifecycle_count
left join syscd_passenger_type p on p.passenger_type = cut_all.card_uid and p.data_version = cut_all.data_version
left join syscd_product p on (CUT_ALL.DATA_VERSION=P.DATA_VERSION) AND (CUT_ALL.product_type=p.product_type) and (CUT_ALL.product_issuer_id=p.issuer_id)
where cut_all.iss_txn_reflection = 'N'
and  (ud_type,cut_all.ud_subtype) in ((3,25),(3,118),(1,36))
            and card_serial_number in (select distinct ac.card_serial_number from  actionlist.actionlist_history ah
                                left join actionlist.card_actionlist ac on ac.entry_id = ah.entry_id 
                                where to_char(date_time,'DD-MON-YYYY') = to_char(sysdate-1,'DD-MON-YYYY')
                                and notes  like 'CREATED%')
            and settlement_date BETWEEN sysdate-90 and sysdate-1            
) order by csc_physical_id,ptsn
,ud_subtype desc
;                        
            loop
              fetch detail
              INTO 
                    V_PARTICIPANT_ID,
                    V_PARTICIPANT_NAME,
                    V_EQUIPMENT_NO, 
                    V_BUSINESS_DATE,
                    V_TXN_LOCATION1,
                    V_TXN_DESC,
                    V_PASSENGER_TYPE,
                    V_CSC_PHYSICAL_ID,
                    V_PTSN,
                    V_UDSN,
                    V_TXN_TIME,
                    V_TXN_VALUE,
                    V_REMAINING_VALUE,
                    V_PROD_CATID,
                    V_VALUE_PER_RIDE,
                    V_AVG_VALUE_PER_RIDE,
                    V_UD_SUBTYPE;

              
              exit
            WHEN detail%notfound;
             
              v_log := V_PARTICIPANT_ID||','||V_PARTICIPANT_NAME||','||V_EQUIPMENT_NO||','|| V_BUSINESS_DATE||','||V_TXN_LOCATION1||','||V_TXN_DESC||','||V_PASSENGER_TYPE||','||V_CSC_PHYSICAL_ID||','||V_PTSN||','||V_UDSN||','||V_TXN_TIME||','||V_TXN_VALUE||','||V_REMAINING_VALUE||','||V_PROD_CATID||','||V_VALUE_PER_RIDE||','||V_AVG_VALUE_PER_RIDE||','||V_UD_SUBTYPE||chr(13);
              
              utl_file.put_line(fhandle, v_log);
              utl_file.fflush(fhandle);
              
            END loop ;
            CLOSE detail;

            utl_file.fclose(fhandle);
          END;
          
         --send mail--
           DECLARE
          smtpservername VARCHAR2(200);
          sender VARCHAR2(200);
          recipient VARCHAR2(250);
          ccrecipient VARCHAR2(250);
          bccrecipient VARCHAR2(250);
          subject VARCHAR2(250);
          BODY VARCHAR2(250);
          errormessage VARCHAR2(250);
          attachments sendmailjpkg.attachments_list;
          v_return NUMBER;
          v_date date;
         
          BEGIN
          
            SELECT to_char(SYSDATE-1,'dd-MON-yyyy')
              INTO v_date
              FROM dual;
            dbms_java.grant_permission( 'BSS', 'SYS:java.io.FilePermission', '/export/home/bssuser/dba_directory/PL_SQL/EX_DATA/CARD_HISTORY_BLACKLIST_s.'|| to_char(SYSDATE-1,'DD-MON-YYYY') || '.csv', 'read' );
            COMMIT;
            smtpservername := '127.0.0.1';
            sender := 'be@rabbit.co.th';
            recipient := 'be@rabbit.co.th';
            --ccrecipient := 'be@rabbit.co.th';
            bccrecipient := NULL;
            subject := 'CARD_HISTORY_BLACKLIST_s.' || to_char(SYSDATE-1, 'YYYYMMDD') ;
            BODY := 'Dear All,' || chr(13) || chr(13) ||
        
                        '    CARD_HISTORY_BLACKLIST s.' || to_char(SYSDATE-1, 'YYYYMMDD') || ' as attached.' || chr(13) || chr(13) ||
        
                      'Best Regards,'|| chr(13) 
                      ;
            -- Modify the code to initialize the variable
             attachments := sendmailjpkg.attachments_list('/export/home/bssuser/dba_directory/PL_SQL/EX_DATA/CARD_HISTORY_BLACKLIST_s.'|| to_char(SYSDATE-1,'DD-MON-YYYY') || '.csv');
              v_return := sendmailjpkg.sendmail(
              smtpservername => smtpservername,
              sender => sender,
              recipient => recipient,
              ccrecipient => ccrecipient,
              bccrecipient => bccrecipient,
              subject => subject,
              BODY => BODY,
              errormessage => errormessage,
              attachments => attachments
            );
            
          END; 
END CARD_HISTORY_BLACKLIST;

 PROCEDURE MONTHLY_CARD_EXPIRE_FOR_FA
    AS 

    BEGIN
          
           DECLARE
        
          fhandle utl_file.file_type;
          v_date VARCHAR2(11);
          TYPE gencurtyp IS REF CURSOR;
              detail gencurtyp;
              v_log  VARCHAR2(1000);
              v_header_rec VARCHAR2(1000);
             
              v_BSS_CARD_TYPE VARCHAR2(100);
              v_DESCRIPTION VARCHAR2(100);
              v_card_count number;
              v_DEPOSIT_BALANCE_THB number;
              v_REMAINING_VALUE_THB number;
              v_LEDGER_BALANCE number;
              v_VALUE_REFUND_LB_WRITE_OFF number;   
              v_DEPOSIT_REFUND_LB_WRITE_OFF number;
              v_CARD_ACCOUNT_STATE number;

            BEGIN
              ----get settlement_date ----
              SELECT to_char(SYSDATE,'DD-MON-YYYY')
              INTO v_date
              FROM dual;
            ---------------------------
            fhandle :=utl_file.fopen('EX_DATA_BE','MONTHLY_CARD_EXPIRE_FOR_FA_'|| v_date || '.csv','w');--Opening a file
            -------------- HEADER ----------------
            SELECT 'BSS_CARD_TYPE,DESCRIPTION,CARD_COUNT,DEPOSIT_BALANCE_THB,REMAINING_VALUE_THB,LEDGER_BALANCE,VALUE_REFUND_LB_WRITE_OFF,DEPOSIT_REFUND_LB_WRITE_OFF,CARD_ACCOUNT_STATE' AS HEADER
            INTO v_header_rec
            FROM dual ;
            --------------END HEADER ----------------
            --------------WRITE HEADER---------------
            v_log := v_header_rec ||chr(13);
            utl_file.put_line(fhandle, v_log);
            -----------------------------------------
            OPEN detail FOR 
             
                
    select 
      BSS_CARD_TYPE,DESCRIPTION,
      count(*) as card_count,
      sum(DEPOSIT_BALANCE_THB) as DEPOSIT_BALANCE_THB, 
      sum(REMAINING_VALUE_THB) as REMAINING_VALUE_THB,
      sum(LEDGER_BALANCE)*0.01 as LEDGER_BALANCE,
      sum(VALUE_REFUND_LIAB_WRITE_OFF)*0.01 as VALUE_REFUND_LB_WRITE_OFF,
      sum(DEPOSIT_REFUND_LIAB_WRITE_OFF)*0.01 as DEPOSIT_REFUND_LB_WRITE_OFF,
      CARD_ACCOUNT_STATE
      from
      (
      select 
      ca.account_state as "CARD_ACCOUNT_STATE",
      ca.csc_serial_number as "CSC_SERIAL_NUMBER",
      ca.deposit_balance*0.01 as "DEPOSIT_BALANCE_THB",
      aa.passenger_type as "BSS_CARD_TYPE",
      reports.bkk_int_fun.getpassengertype(aa.passenger_type) as "DESCRIPTION",
      pa.account_state as "PROD_ACCOUNT_STATE",
      pa.remaining_value*0.01 as "REMAINING_VALUE_THB",
      pa.VALUE_REFUND_LIAB_WRITE_OFF as VALUE_REFUND_LIAB_WRITE_OFF,
      ca.DEPOSIT_REFUND_LIAB_WRITE_OFF as DEPOSIT_REFUND_LIAB_WRITE_OFF,
      pa.LEDGER_BALANCE as "LEDGER_BALANCE"
      FROM card_account ca, product_account pa, application_account aa
          WHERE  pa.prod_type = 256
          AND ca.csc_serial_number = pa.csc_serial_number(+)
          AND ca.csc_lifecycle_count = pa.csc_lifecycle_count(+)
          AND ca.csc_issuer_id = pa.csc_issuer_id(+)
          AND ca.csc_type = pa.csc_type(+)
          AND ca.csc_serial_number = aa.csc_serial_number(+)
          AND ca.csc_lifecycle_count = aa.csc_lifecycle_count(+)
          AND ca.csc_issuer_id = aa.csc_issuer_id(+)
          AND ca.csc_type = aa.csc_type(+)
          And ca.expiry_date < trunc(sysdate)
      )    
      group by BSS_CARD_TYPE,DESCRIPTION,CARD_ACCOUNT_STATE
     order by  BSS_CARD_TYPE  ;
          
                              
            loop
              fetch detail
              INTO 
              v_BSS_CARD_TYPE,
              v_DESCRIPTION ,
              v_card_count,
              v_DEPOSIT_BALANCE_THB,
              v_REMAINING_VALUE_THB,
              v_LEDGER_BALANCE,
              v_VALUE_REFUND_LB_WRITE_OFF ,
              v_DEPOSIT_REFUND_LB_WRITE_OFF,
              v_CARD_ACCOUNT_STATE;

              
              exit
            WHEN detail%notfound;
             
              v_log := v_BSS_CARD_TYPE||','||v_DESCRIPTION||','||v_card_count||','||v_DEPOSIT_BALANCE_THB||','||v_REMAINING_VALUE_THB||','||v_LEDGER_BALANCE||','||v_VALUE_REFUND_LB_WRITE_OFF||','||v_DEPOSIT_REFUND_LB_WRITE_OFF||','||v_CARD_ACCOUNT_STATE||chr(13);
              
              utl_file.put_line(fhandle, v_log);
              utl_file.fflush(fhandle);
              
            END loop ;
            CLOSE detail;

            utl_file.fclose(fhandle);
          END;
          
          
         --send mail--
           DECLARE
          smtpservername VARCHAR2(200);
          sender VARCHAR2(200);
          recipient VARCHAR2(250);
          ccrecipient VARCHAR2(250);
          bccrecipient VARCHAR2(250);
          subject VARCHAR2(250);
          BODY VARCHAR2(250);
          errormessage VARCHAR2(250);
          attachments sendmailjpkg.attachments_list;
          v_return NUMBER;
          v_date date;
         
          BEGIN
          
          
            SELECT to_char(SYSDATE,'dd-MON-yyyy')
              INTO v_date
              FROM dual;
           
            dbms_java.grant_permission( 'BSS', 'SYS:java.io.FilePermission', '/export/home/bssuser/dba_directory/PL_SQL/EX_DATA/MONTHLY_CARD_EXPIRE_FOR_FA_'|| to_char(SYSDATE,'DD-MON-YYYY') || '.csv', 'read' );
            COMMIT;
            smtpservername := '127.0.0.1';
            sender := 'be@rabbit.co.th';
            recipient := 'sirilucks@rabbit.co.th,saibuas@rabbit.co.th,benjamast@rabbit.co.th,witchudaa@rabbit.co.th';
            ccrecipient := 'be@rabbit.co.th';
            bccrecipient := NULL;
            subject := 'MONTHLY_CARD_EXPIRE_FOR_FA ' || to_char(SYSDATE, 'YYYYMMDD') ;
            BODY := 'Dear FA,' || chr(13) || chr(13) ||
        
                        '    Monthly Check Card Expire for FA ' || to_char(SYSDATE, 'YYYYMMDD') || ' as attached.' || chr(13) || chr(13) ||
        
                      'Best Regards,'|| chr(13) 
                      ;
            -- Modify the code to initialize the variable
            attachments := sendmailjpkg.attachments_list('/export/home/bssuser/dba_directory/PL_SQL/EX_DATA/MONTHLY_CARD_EXPIRE_FOR_FA_'|| to_char(SYSDATE,'DD-MON-YYYY') || '.csv');
            v_return := sendmailjpkg.sendmail(
              smtpservername => smtpservername,
              sender => sender,
              recipient => recipient,
              ccrecipient => ccrecipient,
              bccrecipient => bccrecipient,
              subject => subject,
              BODY => BODY,
              errormessage => errormessage,
              attachments => attachments
            );
            
            
            
          END; 
END MONTHLY_CARD_EXPIRE_FOR_FA;

 PROCEDURE MONTHLY_CARD_EXPIRE_STATISTIC
    AS 

    BEGIN
          
           DECLARE
        
          fhandle utl_file.file_type;
          v_date VARCHAR2(11);
          TYPE gencurtyp IS REF CURSOR;
              detail gencurtyp;
              v_log  VARCHAR2(1000);
              v_header_rec VARCHAR2(1000);
             
                V_CARD_ACCOUNT_STATE number;
                V_CSC_SERIAL_NUMBER VARCHAR2(100);
                V_DEPOSIT_BALANCE_THB number;
                V_BSS_CARD_TYPE VARCHAR2(250);
                V_DESCRIPTION  VARCHAR2(250);
                V_PROD_ACCOUNT_STATE number;
                V_REMAINING_VALUE_THB number;
                V_VALUE_REFUND_LIAB_WO number;
                V_DEPOSIT_REFUND_LIAB_WO number;
                V_cch_txn_approved VARCHAR2(50);
                V_exception_list VARCHAR2(250);
                V_LEDGER_BALANCE number;

            BEGIN
              ----get settlement_date ----
              SELECT to_char(SYSDATE,'DD-MON-YYYY')
              INTO v_date
              FROM dual;
            ---------------------------
            fhandle :=utl_file.fopen('EX_DATA_BE','MONTHLY_CARD_EXPIRE_STATISTIC_'|| v_date || '.csv','w');--Opening a file
            -------------- HEADER ----------------
            SELECT 'CARD_ACCOUNT_STATE,CSC_SERIAL_NUMBER,DEPOSIT_BALANCE_THB,BSS_CARD_TYPE,DESCRIPTION,PROD_ACCOUNT_STATE,REMAINING_VALUE_THB,VALUE_REFUND_LIAB_WRITE_OFF,DEPOSIT_REFUND_LIAB_WRITE_OFF,LEDGER_BALANCE,cch_txn_approved,exception_list' AS HEADER
            INTO v_header_rec
            FROM dual ;
            --------------END HEADER ----------------
            --------------WRITE HEADER---------------
            v_log := v_header_rec ||chr(13);
            utl_file.put_line(fhandle, v_log);
            -----------------------------------------
            OPEN detail FOR 
                
 select
      ca.account_state as "CARD_ACCOUNT_STATE",
      ca.csc_serial_number as "CSC_SERIAL_NUMBER",
      ca.deposit_balance*0.01 as "DEPOSIT_BALANCE_THB",
      aa.passenger_type as "BSS_CARD_TYPE",
      reports.bkk_int_fun.getpassengertype(aa.passenger_type) as "DESCRIPTION",
      pa.account_state as "PROD_ACCOUNT_STATE",
      pa.remaining_value*0.01 as "REMAINING_VALUE_THB",
      pa.VALUE_REFUND_LIAB_WRITE_OFF as VALUE_REFUND_LIAB_WRITE_OFF,
      ca.DEPOSIT_REFUND_LIAB_WRITE_OFF as DEPOSIT_REFUND_LIAB_WRITE_OFF,
      pa.LEDGER_BALANCE as "LEDGER_BALANCE",
      cut_all.cch_txn_approved,
      cut_all.exception_list
      FROM card_account ca, product_account pa, application_account aa, CUT_CI_MAINTENANCE CUT_ALL
          WHERE  pa.prod_type = 256
          AND ca.csc_serial_number = pa.csc_serial_number(+)
          AND ca.csc_lifecycle_count = pa.csc_lifecycle_count(+)
          AND ca.csc_issuer_id = pa.csc_issuer_id(+)
          AND ca.csc_type = pa.csc_type(+)
          AND ca.csc_serial_number = aa.csc_serial_number(+)
          AND ca.csc_lifecycle_count = aa.csc_lifecycle_count(+)
          AND ca.csc_issuer_id = aa.csc_issuer_id(+)
          AND ca.csc_type = aa.csc_type(+)
          and CUT_ALL.card_serial_number = ca.csc_serial_number
          and CUT_ALL.CARD_LIFE_CYCLE_COUNT = ca.csc_lifecycle_count
          And ca.expiry_date < trunc(sysdate)
          and CUT_ALL.settlement_date between reports.bkk_int_dfv.getlastmonthfirsdate and reports.bkk_int_dfv.getlastmonthlastdate(sysdate)
          and CUT_ALL.ud_type in (1) and CUT_ALL.ud_subtype in (16);
                              
            loop
              fetch detail
              INTO 
                V_CARD_ACCOUNT_STATE,
                V_CSC_SERIAL_NUMBER,
                V_DEPOSIT_BALANCE_THB,
                V_BSS_CARD_TYPE,
                V_DESCRIPTION,
                V_PROD_ACCOUNT_STATE,
                V_REMAINING_VALUE_THB,
                V_VALUE_REFUND_LIAB_WO,
                V_DEPOSIT_REFUND_LIAB_WO,
                V_LEDGER_BALANCE,
                 V_cch_txn_approved ,
                V_exception_list ;

              
              exit
            WHEN detail%notfound;
             
              v_log := V_CARD_ACCOUNT_STATE||','||V_CSC_SERIAL_NUMBER||','||V_DEPOSIT_BALANCE_THB||','||V_BSS_CARD_TYPE||','||V_DESCRIPTION||','||V_PROD_ACCOUNT_STATE||','||V_REMAINING_VALUE_THB||','||V_VALUE_REFUND_LIAB_WO||','||V_DEPOSIT_REFUND_LIAB_WO||','||V_LEDGER_BALANCE||','||V_cch_txn_approved||','||V_exception_list||chr(13);
              
              utl_file.put_line(fhandle, v_log);
              utl_file.fflush(fhandle);
              
            END loop ;
            CLOSE detail;

            utl_file.fclose(fhandle);
          END;
          
          
         --send mail--
           DECLARE
          smtpservername VARCHAR2(200);
          sender VARCHAR2(200);
          recipient VARCHAR2(250);
          ccrecipient VARCHAR2(250);
          bccrecipient VARCHAR2(250);
          subject VARCHAR2(250);
          BODY VARCHAR2(250);
          errormessage VARCHAR2(250);
          attachments sendmailjpkg.attachments_list;
          v_return NUMBER;
          v_date date;
         
          BEGIN
          
            SELECT to_char(SYSDATE,'dd-MON-yyyy')
              INTO v_date
              FROM dual;
           
            dbms_java.grant_permission( 'BSS', 'SYS:java.io.FilePermission', '/export/home/bssuser/dba_directory/PL_SQL/EX_DATA/MONTHLY_CARD_EXPIRE_STATISTIC_'|| to_char(SYSDATE,'DD-MON-YYYY') || '.csv', 'read' );
            COMMIT;
            smtpservername := '127.0.0.1';
            sender := 'be@rabbit.co.th';
            recipient := 'saibuas@rabbit.co.th,benjamast@rabbit.co.th,witchudaa@rabbit.co.th,anukoolb@rabbit.co.th';
            ccrecipient := 'be@rabbit.co.th';
            bccrecipient := NULL;
            subject := 'MONTHLY_CARD_EXPIRE_STATISTIC ' || to_char(SYSDATE, 'YYYYMMDD') ;
            BODY := 'Dear FA,' || chr(13) || chr(13) ||
        
                        '    Monthly Check Card Expire Statistic ' || to_char(SYSDATE, 'YYYYMMDD') || ' as attached.' || chr(13) || chr(13) ||
        
                      'Best Regards,'|| chr(13) 
                      ;
            -- Modify the code to initialize the variable
            attachments := sendmailjpkg.attachments_list('/export/home/bssuser/dba_directory/PL_SQL/EX_DATA/MONTHLY_CARD_EXPIRE_STATISTIC_'|| to_char(SYSDATE,'DD-MON-YYYY') || '.csv');
            v_return := sendmailjpkg.sendmail(
              smtpservername => smtpservername,
              sender => sender,
              recipient => recipient,
              ccrecipient => ccrecipient,
              bccrecipient => bccrecipient,
              subject => subject,
              BODY => BODY,
              errormessage => errormessage,
              attachments => attachments
            );
            
          END; 
          
END MONTHLY_CARD_EXPIRE_STATISTIC;

PROCEDURE purge_CARDHOLDER_SERIAL_NUM0 
    AS 

    BEGIN
          
	INSERT INTO 
	   BSS_REPORTS.BOT_RV_LESS_THAN_ZERO(SETTLEMENT_DATE,VALUE) 
		 select 
		   TRUNC(CURRENT_DATE-1) as SETTLEMENT_DATE,
		   VALUE
		 from
		   (
		   select 
			 sum(REMAINING_VALUE)/100 as VALUE
		   from product.product_account 
		   where REMAINING_VALUE < 0
		   )
	   ;
   
   INSERT INTO BSS_REPORTS.BOT_LB_DATA
		select 
		 TRUNC(CURRENT_DATE-1) AS SETTLEMENT_DATE,
		 TXN_TYPE,
		 VOLUME,
		 case
		   when TXN_TYPE in ('Add','Add recover','Use reverse','Write off positive') then VALUE*-1
		   else VALUE
		 end as VALUE
		from 
		 (select --REPORTS.BKK_INT_FUN.GETTRANSACTIONDESC (txn_type,txn_sub_type)
		 case 
		   WHEN txn_sub_type=10 THEN 'Add'
		   WHEN txn_sub_type in (13,91) THEN 'Use'
		   WHEN txn_sub_type=16 THEN 'Add reverse'
		   WHEN txn_sub_type=19 THEN 'Use reverse'
		   WHEN txn_sub_type=26 THEN 'Refund'
		   WHEN txn_sub_type=37 THEN 'Write off positive'
		   WHEN txn_sub_type=39 THEN 'Add recover'
		   WHEN txn_sub_type=71 THEN 'Write off negative'
		   WHEN txn_sub_type=118 THEN 'Compensation fare'
		 end as TXN_TYPE,
		 SUM(GFS_VOLUME) as VOLUME,
		 SUM(GFS_VALUE/100) as VALUE
		 from online_summ
		 where cch_settlement_date = TRUNC(CURRENT_DATE-1)
		 and txn_type=3
		 and txn_sub_type in (10,13,16,19,26,37,39,71,91,118)
		 group by 
		 case 
		   WHEN txn_sub_type=10 THEN 'Add'
		   WHEN txn_sub_type in (13,91) THEN 'Use'
		   WHEN txn_sub_type=16 THEN 'Add reverse'
		   WHEN txn_sub_type=19 THEN 'Use reverse'
		   WHEN txn_sub_type=26 THEN 'Refund'
		   WHEN txn_sub_type=37 THEN 'Write off positive'
		   WHEN txn_sub_type=39 THEN 'Add recover'
		   WHEN txn_sub_type=71 THEN 'Write off negative'
		   WHEN txn_sub_type=118 THEN 'Compensation fare'
		 end);
     
    INSERT INTO BSS_REPORTS.BOT_LB_DATA
      select TRUNC(CURRENT_DATE-1) AS SETTLEMENT_DATE,
      'Purse negative' AS TXN_TYPE,
      '1' AS VOLUME,
      sum(value) as VALUE from (
      select value*-1 as value
      from bss_reports.bot_rv_less_than_zero
      where settlement_date = TRUNC(CURRENT_DATE-1)
      union all
      select value as value
      from bss_reports.bot_rv_less_than_zero
      where settlement_date = TRUNC(CURRENT_DATE-2))
      group by TRUNC(CURRENT_DATE-1),
      'Purse negative',
      '1'; 
            
      commit;
      
      
END purge_CARDHOLDER_SERIAL_NUM0 ;



PROCEDURE purge_CARDHOLDER_SERIAL_NUM_0 

    AS 
    BEGIN
    
        INSERT INTO 
            cardholder.CARDHOLDER_FEES_TEMP 
            select * from cardholder.CARDHOLDER_FEES
            WHERE CARDHOLDER_SERIAL_NUMBER = 0 
            AND TRUNC(TIME) <= SYSDATE-2;
    commit;
    
    
        DELETE 
            FROM cardholder.CARDHOLDER_FEES 
            WHERE CARDHOLDER_SERIAL_NUMBER = 0
            AND TRUNC(TIME) <= SYSDATE-2;
        
        commit;
    
END purge_CARDHOLDER_SERIAL_NUM_0;


PROCEDURE Z004_BTS (
      vcursor			OUT		t_cur,
      settle_date		IN		DATE
      
   ) AS
     
   dtsettledt       DATE   := reports.bkk_int_dfv.getdefaultsettledate;
   vstdt            DATE;

      
  BEGIN
    /* TODO implementation required */
    IF settle_date IS NULL
      THEN
         vstdt := dtsettledt;
      ELSE
         vstdt := TRUNC (settle_date);
      END IF;
      

      
    OPEN vcursor FOR
    
   select '1-BTS' as SP,settlement_date,
Txn_type
, sum(Transaction_value/100) as Value,equipment_number as equipment
from 
(select Transaction_value,settlement_date,
case when ud_type = 3 and ud_subtype = 10 then 'Purse Add by Cash' 
     when ud_type = 3 and ud_subtype = 16 then 'Purse Add reverse by Cash' 
     when ud_type = 3 and ud_subtype = 3 then 'STP Issuing Fee' 
     when ud_type = 3 and ud_subtype = 79 then 'STP Issuing Fee reverse' 
end as Txn_type
,case when equipment_number like 'P%' then 'POS'
      when equipment_number like 'T%' then 'TVM'
 else equipment_number end as equipment_number
from cut_pi_financial
where settlement_date = vstdt
and ud_type = 3 and ud_subtype in (3,10,16,79)
and iss_txn_reflection = 'N'
and cch_txn_approved = 'Y'
and source_participant_id =1
and service_participant_id =1
and payment_method0 in (1,18,17,19)
)
group by equipment_number ,Txn_type,settlement_date


union all  

select '1-BTS' as SP ,settlement_date,
Txn_type,
sum(Transaction_value/100) as Value,equipment_number as equipment from 
(select Transaction_value,settlement_date,
case when ud_type = 3 and ud_subtype = 10 then 'Purse Add by Credit Card' 
     when ud_type = 3 and ud_subtype = 16 then 'Purse Add reverse by Credit Card' 
     when ud_type = 3 and ud_subtype = 3 then 'STP Issuing Fee by Credit Card' 
     when ud_type = 3 and ud_subtype = 79 then 'STP Issuing Fee reverse by Credit Card' 
end as Txn_type
,case when equipment_number like 'P%' then 'POS'
      when equipment_number like 'T%' then 'TVM'
 else equipment_number end as equipment_number
from cut_pi_financial
where settlement_date = vstdt
and ud_type = 3 and ud_subtype in (3,10,16,79)
and iss_txn_reflection = 'N'
and cch_txn_approved = 'Y'
and source_participant_id =1
and service_participant_id =1
and payment_method0 in (6)
)
group by equipment_number,Txn_type,settlement_date

order by Txn_type;
  
  END Z004_BTS;

PROCEDURE Z004_BTS_TVM (
      vcursor			OUT		t_cur,
      settle_date		IN		DATE
      
   ) AS
     
   dtsettledt       DATE   := reports.bkk_int_dfv.getdefaultsettledate;
   vstdt            DATE;

      
  BEGIN
    /* TODO implementation required */
    IF settle_date IS NULL
      THEN
         vstdt := dtsettledt;
      ELSE
         vstdt := TRUNC (settle_date);
      END IF;
      

      
    OPEN vcursor FOR
    
  select '1-BTS' as SP,settlement_date,
Txn_type
, sum(Transaction_value/100) as Value,equipment_number as equipment,device_id,location_name
from 
(select Transaction_value,settlement_date,device_id,L.location_name as location_name,
case when ud_type = 3 and ud_subtype = 10 then 'Purse Add by Cash' 
     when ud_type = 3 and ud_subtype = 16 then 'Purse Add reverse by Cash' 
     when ud_type = 3 and ud_subtype = 3 then 'STP Issuing Fee' 
     when ud_type = 3 and ud_subtype = 79 then 'STP Issuing Fee reverse' 
end as Txn_type
,case when equipment_number like 'P%' then 'POS'
      when equipment_number like 'T%' then 'TVM'
 else equipment_number end as equipment_number
from cut_pi_financial CUT_ALL
left join SYSCD_LOCATION L on (to_number(substr(to_char(CUT_ALL.device_location,'XXXXXXXX'),-6,6),'XXXXXXXX')=L.location_code) and (CUT_ALL.source_participant_id=L.participant_id) and (CUT_ALL.DATA_VERSION=L.DATA_VERSION) and (L.location_type in (9,15,16,21))  

where settlement_date = vstdt
and ud_type = 3 and ud_subtype in (3,10,16,79)
and iss_txn_reflection = 'N'
and cch_txn_approved = 'Y'
and source_participant_id =1
and service_participant_id =1
and payment_method0 in (1,18,17,19)
and equipment_number like 'T%'
)

group by equipment_number ,Txn_type,settlement_date,device_id,location_name


union all  

select '1-BTS' as SP ,settlement_date,
Txn_type,
sum(Transaction_value/100) as Value,equipment_number as equipment ,device_id ,location_name from 
(select Transaction_value,settlement_date,device_id,L.location_name as location_name,
case when ud_type = 3 and ud_subtype = 10 then 'Purse Add by Credit Card' 
     when ud_type = 3 and ud_subtype = 16 then 'Purse Add reverse by Credit Card' 
     when ud_type = 3 and ud_subtype = 3 then 'STP Issuing Fee by Credit Card' 
     when ud_type = 3 and ud_subtype = 79 then 'STP Issuing Fee reverse by Credit Card' 
end as Txn_type
,case when equipment_number like 'P%' then 'POS'
      when equipment_number like 'T%' then 'TVM'
 else equipment_number end as equipment_number
from cut_pi_financial CUT_ALL
left join SYSCD_LOCATION L on (to_number(substr(to_char(CUT_ALL.device_location,'XXXXXXXX'),-6,6),'XXXXXXXX')=L.location_code) and (CUT_ALL.source_participant_id=L.participant_id) and (CUT_ALL.DATA_VERSION=L.DATA_VERSION) and (L.location_type in (9,15,16,21))  

where settlement_date = vstdt
and ud_type = 3 and ud_subtype in (3,10,16,79)
and iss_txn_reflection = 'N'
and cch_txn_approved = 'Y'
and source_participant_id =1
and service_participant_id =1
and payment_method0 in (6)
and equipment_number like 'T%'
)

group by equipment_number,Txn_type,settlement_date,device_id,location_name

order by Txn_type;
  
  END Z004_BTS_TVM;

PROCEDURE support_report_diff (
      vcursor			OUT		t_cur,
      settle_date		IN		DATE,
      vparticipantid    IN NUMBER,
      vparticipantid1    IN NUMBER
      
   ) AS
     
   dtsettledt       DATE   := reports.bkk_int_dfv.getdefaultsettledate;
   vstdt            DATE;

      
  BEGIN
    /* TODO implementation required */
    IF settle_date IS NULL
      THEN
         vstdt := dtsettledt;
      ELSE
         vstdt := TRUNC (settle_date);
      END IF;
      

      
    OPEN vcursor FOR
    
  select 
Data_group,
settlement as SETTLEMENT_DATE,
settlement as RECONCILIATION_DATE,
case when TXN_TYPE like 'Purse Add' then 'Purse Add (Top up)'
else 
txn_type  end as TXN_TYPE,
VOLUME,
VALUE,
source_id ||' '|| SP_NAME as PARTICIPANT


from BSS.support_report
where settlement = '13/09/2019'
and (vparticipantid IS NULL OR source_id = vparticipantid)

union all
select 
Data_group,
settlement as SETTLEMENT_DATE,
settlement as RECONCILIATION_DATE,
case when TXN_TYPE like 'Purse Add' then 'Purse Add (Top up)'
else 
txn_type  end as TXN_TYPE,
VOLUME,
VALUE,
source_id ||' '|| SP_NAME as PARTICIPANT
from BSS.support_report
where settlement = '13/09/2019'
and (vparticipantid1 IS NULL OR source_id = vparticipantid1)

;


  END support_report_diff;

PROCEDURE MONTHLY_CHECK_CARD_BINDING
    AS 

    BEGIN
          
           DECLARE
        
          fhandle utl_file.file_type;
          v_date VARCHAR2(11);
          TYPE gencurtyp IS REF CURSOR;
              detail gencurtyp;
              v_log  VARCHAR2(1000);
              v_header_rec VARCHAR2(1000);

              v_CARD_SERIAL_NUMBER VARCHAR2(100);
              v_CARD_TYPE VARCHAR2(100);
              v_LOCATION_NAME VARCHAR2(200);
              
              

            BEGIN
              ----get settlement_date ----
              SELECT to_char(SYSDATE,'DD-MON-YYYY')
              INTO v_date
              FROM dual;
            ---------------------------
            fhandle :=utl_file.fopen('EX_DATA_BE','MONTHLY_CHECK_CARD_BINDING_'|| v_date || '.csv','w');--Opening a file
            -------------- HEADER ----------------
            SELECT 'CARD_SERIAL_NUMBER,CARD_TYPE,LOCATION_NAME' AS HEADER
            INTO v_header_rec
            FROM dual ;
            --------------END HEADER ----------------
            --------------WRITE HEADER---------------
            v_log := v_header_rec ||chr(13);
            utl_file.put_line(fhandle, v_log);
            -----------------------------------------
            OPEN detail FOR 
            
  

  
  
  select CARD_SERIAL_NUMBER,CARD_TYPE,LOCATION_NAME from (
select card_serial_number, card_type,location_name
from cloudid.binding_card
where 
/*
    (card_serial_number between 88751276711 and 88751278810) or
    (card_serial_number between 88700817551 and 88700818100) or
    (card_serial_number between 88700818101 and 88700819675) or 
    (card_serial_number between 88700819676 and 88700822175) or 
    (card_serial_number between 88751278811 and 88751285910)
*/
--edit 071019
    (card_serial_number between 88004691901 and 88004712200) or
    (card_serial_number between 88400968401 and 88400978400) or
    (card_serial_number between 88500335001 and 88500355000) or 
    (card_serial_number between 88580032951 and 88580034000) or 
    (card_serial_number between 88630094971 and 88630102620) or
    (card_serial_number between 88700817551 and 88700822175) or
    (card_serial_number between 88700822176 and 88700824825) or
    (card_serial_number between 88751276711 and 88751331680) 
    
and settlement_date between TRUNC(reports.bkk_int_dfv.getlastmonthfirsdate) and TRUNC(reports.bkk_int_dfv.getlastmonthlastdate(sysdate))
 --and settlement_date like '%MAY-18%'
group by card_serial_number,card_type,location_name
order by card_serial_number
);
                              
            loop
              fetch detail
              INTO 
              v_CARD_SERIAL_NUMBER ,
              v_CARD_TYPE,
              v_LOCATION_NAME;
              
         

              
              exit
            WHEN detail%notfound;
             
              v_log := v_CARD_SERIAL_NUMBER||','||v_CARD_TYPE||','||v_LOCATION_NAME||chr(13);
              
              utl_file.put_line(fhandle, v_log);
              utl_file.fflush(fhandle);
              
            END loop ;
            CLOSE detail;

            utl_file.fclose(fhandle);
          END;
          
         --send mail--
           DECLARE
          smtpservername VARCHAR2(200);
          sender VARCHAR2(200);
          recipient VARCHAR2(250);
          ccrecipient VARCHAR2(250);
          bccrecipient VARCHAR2(250);
          subject VARCHAR2(250);
          BODY VARCHAR2(250);
          errormessage VARCHAR2(250);
          attachments sendmailjpkg.attachments_list;
          v_return NUMBER;
          v_date date;
         
          BEGIN
          
            SELECT to_char(SYSDATE,'dd-MON-yyyy')
              INTO v_date
              FROM dual;
           
            dbms_java.grant_permission( 'BSS', 'SYS:java.io.FilePermission', '/export/home/bssuser/dba_directory/PL_SQL/EX_DATA/MONTHLY_CHECK_CARD_BINDING_'|| to_char(SYSDATE,'DD-MON-YYYY') || '.csv', 'read' );
            COMMIT;
            smtpservername := '127.0.0.1';
            sender := 'be@rabbit.co.th';
            recipient := 'be@rabbit.co.th';
           --ccrecipient := 'be@rabbit.co.th';
            bccrecipient := NULL;
            subject := 'MONTHLY_CHECK_CARD_BINDING_' || to_char(SYSDATE, 'YYYYMMDD') ;
            BODY := 'Dear All,' || chr(13) || chr(13) ||
        
                        '   MONTHLY_CHECK_CARD_BINDING.' || to_char(SYSDATE, 'YYYYMMDD') || ' as attached.' || chr(13) || chr(13) ||
        
                      'Best Regards,'|| chr(13) 
                      ;
            -- Modify the code to initialize the variable
            attachments := sendmailjpkg.attachments_list('/export/home/bssuser/dba_directory/PL_SQL/EX_DATA/MONTHLY_CHECK_CARD_BINDING_'|| to_char(SYSDATE,'DD-MON-YYYY') || '.csv');
            v_return := sendmailjpkg.sendmail(
              smtpservername => smtpservername,
              sender => sender,
              recipient => recipient,
              ccrecipient => ccrecipient,
              bccrecipient => bccrecipient,
              subject => subject,
              BODY => BODY,
              errormessage => errormessage,
              attachments => attachments
            );
            
          END; 
END MONTHLY_CHECK_CARD_BINDING;


PROCEDURE datafile_smart_bus (
      vcursor			OUT		t_cur,
      settle_date		IN		DATE,
      vparticipantid    IN    NUMBER,
     vroute_id   IN    NUMBER
   ) AS
   
   dtsettledt       DATE   := reports.bkk_int_dfv.getdefaultsettledate;
   vstdt            DATE;
   vsyscdversion    NUMBER;
   vroute             NUMBER ;
   
  BEGIN
    /* TODO implementation required */
    IF settle_date IS NULL
      THEN
         vstdt := dtsettledt;
      ELSE
         vstdt := TRUNC (settle_date);
      END IF;

    SELECT MAX (data_version)
        INTO vsyscdversion
        FROM systemcd.syscd_version;
      
    /* IF vud_subtype IS NULL 
      THEN vud := 10;
      ELSE vud := 13;
      END IF;*/
           
        
OPEN vcursor FOR 



select --row_number() over (order by txn_date_time) record_number,
row_number() over (order by LOC_TXN_DATE_TIME) record_number,
--to_char(SETTLEMENT_DATE,'DDMMYYYY') as SETTLEMENT_DATE,
--to_char(to_date(SETTLEMENT_DATE,'DD-MON-YY HH24:MI:SS'),'DD/MM/YYYY' )AS SETTLEMENT_DATE,
--SETTLEMENT_DATE
to_char(Trunc(sysdate-1),'DDMMYYYY' )as SETTLEMENT_DATE,
--to_char(SETTLEMENT_DATE,'dd-MON-yy') AS SETTLEMENT_DATE, 
--to_char(SETTLEMENT_DATE,'DD/MM/YYYY') AS SETTLEMENT_DATE
'RB' as Source_type,
'D' as D
,SRC as ParticipantID,'1' as version,
CARD_SERIAL_NUMBER as Card_ID,
--product_sale_ID as PRODUCT_TYPE,
case when product_sale_ID = '{No Product Sale}' then ''
else product_sale_ID end as PRODUCT_TYPE,
CARD_TYPE_ID as CARD_TYPE,
'' as Pass_Type_id,--PRODUCT_TYPE_ID as Pass_Type_id,
original_txn_id,
to_char(LOC_TXN_DATE_TIME, 'DDMMYYYY') as Current_txn_date,

TXN_DATE_TIME as Current_txn_time,
RouteID,
BUS_ID        as BusID,
BUS_DIRECTION as direction,
case when original_txn_id in (31,99) then '4095'
when original_txn_id in (41) and SRC = 119 then '4095'
when original_txn_id in (41) then to_char(to_number(substr(lpad(trim(to_char(EFT_TERMINAL_ID,'XXXXXXXXXXXXXXXX')),16,'0'),5,4),'xxxx'))
when original_txn_id in (92) then to_char(to_number(substr(lpad(trim(to_char(EFT_TERMINAL_ID,'XXXXXXXXXXXXXXXX')),16,'0'),1,4),'xxxx')) 
else '0' end as Current_Station_ID,
--BUS_STOP_EXIT as Exit_station_ID,
case when BUS_STOP_EXIT = '0' and SRC = 119 then '4095'
else to_char(BUS_STOP_EXIT) end as Exit_station_ID,
lpad(trim(to_char(DEVICE_ID,'XXXXXXXX')),8,'0') as device_id,
BUS_SALE_ADD_FLAG as Flag_add_or_sale,
case when BUS_SALE_PRICE*100 = 0 then ''
else to_char(BUS_SALE_PRICE*100) end as Sale_amount,
TRANSACTION_VALUE as TRANSACTION_Amount  
from (
        SELECT
        --case when CUT_ALL.TXN_TYPE like '%Add%' and to_number(substr(lpad(trim(to_char(EFT_TRACE_NUMBER,'XXXXXXXXXXXXXXXX')),16,'0'),11,2),'xxxx') = 0 then '31'
        --     when CUT_ALL.TXN_TYPE like '%Add%' and to_number(substr(lpad(trim(to_char(EFT_TRACE_NUMBER,'XXXXXXXXXXXXXXXX')),16,'0'),11,2),'xxxx') = 1 then '99'
         --    when CUT_ALL.TXN_TYPE like 'Purse Use Reverse' then '92'
        --     when CUT_ALL.TXN_TYPE like 'Purse Use' then '41'
        --     else '0' end as original_txn_id,
        case when UD_TYPE = 3 and UD_SUBTYPE =10 and to_number(substr(lpad(trim(to_char(EFT_TRACE_NUMBER,'XXXXXXXXXXXXXXXX')),16,'0'),11,2),'xxxx') = 0 then '31'
             when UD_TYPE = 3 and UD_SUBTYPE =10 and to_number(substr(lpad(trim(to_char(EFT_TRACE_NUMBER,'XXXXXXXXXXXXXXXX')),16,'0'),11,2),'xxxx') = 1 then '99'
             when UD_TYPE = 3 and UD_SUBTYPE =19 then '92'
             when UD_TYPE = 3 and UD_SUBTYPE =13 then '41'
             else '0' end as original_txn_id,
        
        
        '88' || lpad(CARD_SERIAL_NUMBER,9,'0') AS CARD_SERIAL_NUMBER,
        --CUT_ALL.TXN_TYPE as BSS_TXN_TYPE,
        aa.passenger_type AS CARD_TYPE_ID,
        bss_reports.pkg_fun.getproductsaleid(aa.csc_serial_number, aa.csc_issuer_id, aa.csc_lifecycle_count, aa.csc_type) as product_sale_ID,
        p.PRODUCT_TYPE as PRODUCT_TYPE_ID,
        p.description as PRODUCT_TYPE_DESC,
        TRANSACTION_VALUE as TRANSACTION_VALUE,        
       -- to_date(RP_STD.TOLOCALTIME(TXN_DATE_TIME),'DD-MON-YY HH24:MI:SS') AS LOC_TXN_DATE_TIME,
        TXN_DATE_TIME+7/24 as LOC_TXN_DATE_TIME ,
        TO_CHAR(txn_date_time + (7/24), 'HH24MISS') as TXN_DATE_TIME,
         SETTLEMENT_DATE, 
        CUT_ALL.DEVICE_ID,
        SOURCE_PARTICIPANT_ID AS SRC,
        EFT_TERMINAL_ID ,EFT_TRACE_NUMBER,
        lpad(trim(to_char(EFT_TERMINAL_ID,'XXXXXXXXXXXXXXXX')),16,'0') as RD_EFT_TRACE_NUMBER,
        to_number(substr(lpad(trim(to_char(EFT_TERMINAL_ID,'XXXXXXXXXXXXXXXX')),16,'0'),1,4),'xxxx')  as BUS_STOP_EXIT,
        to_number(substr(lpad(trim(to_char(EFT_TERMINAL_ID,'XXXXXXXXXXXXXXXX')),16,'0'),5,4),'xxxx')  as BUS_STOP_ENTRY,
        to_number(substr(lpad(trim(to_char(EFT_TERMINAL_ID,'XXXXXXXXXXXXXXXX')),16,'0'),9,2),'xxxx')  as BUS_DIRECTION,
        to_number(substr(lpad(trim(to_char(EFT_TERMINAL_ID,'XXXXXXXXXXXXXXXX')),16,'0'),11,4),'xxxx') as RouteID,
        to_number(substr(lpad(trim(to_char(EFT_TERMINAL_ID,'XXXXXXXXXXXXXXXX')),16,'0'),15,2),'xxxx') as BUS_ENTRY_EXIT_FLAG,
        lpad(trim(to_char(EFT_TRACE_NUMBER,'XXXXXXXXXXXXXXXX')),16,'0') as RD_EFT_TRACE_NUMBER,
        to_number(substr(lpad(trim(to_char(EFT_TRACE_NUMBER,'XXXXXXXXXXXXXXXX')),16,'0'),7,4),'xxxx') as BUS_SALE_PRICE,
        to_number(substr(lpad(trim(to_char(EFT_TRACE_NUMBER,'XXXXXXXXXXXXXXXX')),16,'0'),11,2),'xxxx') as BUS_SALE_ADD_FLAG,
        to_number(substr(lpad(trim(to_char(EFT_TRACE_NUMBER,'XXXXXXXXXXXXXXXX')),16,'0'),13,4),'xxxx') as BUS_ID
            FROM
            (
                    SELECT lower_ptsn,upper_ptsn,null as remaining_rides,CARD_SERIAL_NUMBER,TRANSACTION_VALUE,PURSE_REMAINING_VALUE,EXCEPTION_LIST,UD_TYPE,UD_SUBTYPE,TXN_DATE_TIME,RECONCILIATION_DATE,LAV_DATE_TIME,CARD_SEQUENCE_NUMBER,PTSN,SOURCE_PARTICIPANT_ID,SERVICE_PARTICIPANT_ID,DESTINATION_PARTICIPANT_ID,DEVICE_ID,UDSN,device_location,to_number(substr(to_char(device_location,'XXXXXXXX'),-6,6),'XXXXXXXX') as location_id_trf, DATA_VERSION,ORIGINAL_FILE_NAME,original_txn_type,SETTLEMENT_DATE,iss_txn_reflection,cch_txn_approved
                    ,payment_method0,payment_value0,payment_method1,payment_value1,payment_method2,payment_value2,payment_method3,payment_value3
                    ,LAV_PARTICIPANT_ID, LAV_SAM_ID, LAV_PTSN, LAV_TXN_VALUE, LAV_REMAINING_VALUE,  null as LAV_REMAINING_RIDES, LAV_METHOD_OF_PAYMENT
                    ,EFT_TERMINAL_ID ,EFT_TRACE_NUMBER,CARD_LIFE_CYCLE_COUNT,product_issuer_id,product_type
                    FROM CUT_PI_FINANCIAL 
                   UNION ALL
                   SELECT null as lower_ptsn,null as upper_ptsn,remaining_rides,CARD_SERIAL_NUMBER,TRANSACTION_VALUE,PURSE_REMAINING_VALUE,EXCEPTION_LIST,UD_TYPE,UD_SUBTYPE,TXN_DATE_TIME,RECONCILIATION_DATE,LAV_DATE_TIME,CARD_SEQUENCE_NUMBER,PTSN,SOURCE_PARTICIPANT_ID,SERVICE_PARTICIPANT_ID,DESTINATION_PARTICIPANT_ID,DEVICE_ID,UDSN,device_location,to_number(substr(to_char(device_location,'XXXXXXXX'),-6,6),'XXXXXXXX') as location_id_trf, DATA_VERSION,ORIGINAL_FILE_NAME,original_txn_type,SETTLEMENT_DATE,iss_txn_reflection,cch_txn_approved
                  ,payment_method0,payment_value0,payment_method1,payment_value1,payment_method2,payment_value2,payment_method3,payment_value3
                  ,LAV_PARTICIPANT_ID, LAV_SAM_ID, LAV_PTSN, LAV_TXN_VALUE, null as LAV_REMAINING_VALUE, LAV_REMAINING_RIDES, LAV_METHOD_OF_PAYMENT 
                  , null as EFT_TERMINAL_ID, null as EFT_TRACE_NUMBER,CARD_LIFE_CYCLE_COUNT,product_issuer_id,product_type
                   FROM CUT_PI_EXIT 
            
            ) CUT_ALL
        left join DEVICE_STATUS on CUT_ALL.Device_ID=DEVICE_STATUS.Device_ID and CUT_ALL.SOURCE_PARTICIPANT_ID=DEVICE_STATUS.PARTICIPANT_ID
      --  left join SYSTEMCD.SYSCD_TXN T on (CUT_ALL.DATA_VERSION=T.DATA_VERSION) AND (CUT_ALL.UD_TYPE=T.TXN_TYPE) AND  (CUT_ALL.UD_SUBTYPE=T.TXN_SUBTYPE)
        --left join SYSCD_LOCATION L on (to_number(substr(to_char(CUT_ALL.device_location,'XXXXXXXX'),-6,6),'XXXXXXXX')=L.location_code) and (CUT_ALL.source_participant_id=L.participant_id) and (CUT_ALL.DATA_VERSION=L.DATA_VERSION) and (L.location_type in (9,15,16))
        left join application_account aa on CUT_ALL.card_serial_number = aa.csc_serial_number and CUT_ALL.CARD_LIFE_CYCLE_COUNT = aa.csc_lifecycle_count
        left join SYSTEMCD.syscd_product p on (CUT_ALL.DATA_VERSION=P.DATA_VERSION) AND (CUT_ALL.product_type=p.product_type) and (CUT_ALL.product_issuer_id=p.issuer_id) 
        WHERE CUT_ALL.iss_txn_reflection = 'N'
        and cch_txn_approved = 'Y'
       -- AND CUT_ALL.settlement_date between to_date('06-JAN-2019') and to_date('06-JAN-2019')
        AND CUT_ALL.settlement_date = vstdt
       -- AND CUT_ALL.settlement_date = '08-NOV-2019'
        AND (vparticipantid IS NULL OR source_participant_id = vparticipantid)
        --AND (source_participant_id = vparticipantid)
        --and source_participant_id in (119,109)
        and to_number(substr(lpad(trim(to_char(EFT_TERMINAL_ID,'XXXXXXXXXXXXXXXX')),16,'0'),11,4),'xxxx') in (vroute_id)
        and payment_method0 != 4
        ORDER BY CARD_SERIAL_NUMBER,TXN_DATE_TIME DESC,NVL(PTSN,0)
       )where   (vroute IS NULL OR RouteID = vroute_id)
       --)where   (RouteID = vroute_id)
;


  END datafile_smart_bus;
 
 PROCEDURE Promotion_smart_bus (
      vcursor			OUT		t_cur,
      settle_date		IN		DATE,
      vparticipantid    IN    NUMBER
     
   ) AS
   
   dtsettledt       DATE   := reports.bkk_int_dfv.getdefaultsettledate;
   vstdt            DATE;
   vsyscdversion    NUMBER;
   vroute             NUMBER ;
   
  BEGIN
    /* TODO implementation required */
    IF settle_date IS NULL
      THEN
         vstdt := dtsettledt;
      ELSE
         vstdt := TRUNC (settle_date);
      END IF;

    SELECT MAX (data_version)
        INTO vsyscdversion
        FROM systemcd.syscd_version;
      
    /* IF vud_subtype IS NULL 
      THEN vud := 10;
      ELSE vud := 13;
      END IF;*/
           
        
OPEN vcursor FOR 

select TXN_TYPE,CARD_TYPE_DESC,BUS_STOP_EXIT,BUS_STOP_ENTRY,BUS_ROUTE_ID,card_serial_number,settlement_date,source_participant_id
,Current_txn_date,Current_txn_time
,station_name_exit
,BUS_STOP_ENTRY ||'-'|| sa.station_name as station_name_entry
,'1' as fare
,f.Amount
--,f.Amount-1 as Fare --Kae edit 
from 
(
select 
REPORTS.BKK_INT_FUN.GETTRANSACTIONDESC (UD_TYPE,UD_SUBTYPE) AS TXN_TYPE
,TRANSACTION_VALUE/100 as value,
reports.bkk_int_fun.getpassengertype (aa.passenger_type,reports.bkk_int_fun.getdataversion(), 'en') AS CARD_TYPE_DESC,
to_number(substr(lpad(trim(to_char(EFT_TERMINAL_ID,'XXXXXXXXXXXXXXXX')),16,'0'),1,4),'xxxx')  as BUS_STOP_EXIT,
to_number(substr(lpad(trim(to_char(EFT_TERMINAL_ID,'XXXXXXXXXXXXXXXX')),16,'0'),5,4),'xxxx')  as BUS_STOP_ENTRY,
to_number(substr(lpad(trim(to_char(EFT_TERMINAL_ID,'XXXXXXXXXXXXXXXX')),16,'0'),11,4),'xxxx') as BUS_ROUTE_ID,
--a.ud_subtype,ptsn
'88' || lpad(a.CARD_SERIAL_NUMBER,9,'0') as card_serial_number
,settlement_date
,a.source_participant_id,
TO_CHAR(txn_date_time + (7/24), 'HH24MISS') as Current_txn_time,
--device_id,a.udsn
to_char(TXN_DATE_TIME+7/24, 'DDMMYYYY') as Current_txn_date
--TXN_DATE_TIME+7/24 as Current_txn_date1
,to_number(substr(lpad(trim(to_char(EFT_TERMINAL_ID,'XXXXXXXXXXXXXXXX')),16,'0'),1,4),'xxxx') ||'-' ||s.station_name as station_name_exit
--to_number(substr(lpad(trim(to_char(EFT_TERMINAL_ID,'XXXXXXXXXXXXXXXX')),16,'0'),5,4),'xxxx') ||'-' ||s.station_name as station_name_entry
        from cut_pi_financial a
        left join application_account aa on a.card_serial_number = aa.csc_serial_number and a.CARD_LIFE_CYCLE_COUNT = aa.csc_lifecycle_count
        left join SYSTEMCD.SYSCD_TXN T on (a.DATA_VERSION=T.DATA_VERSION) AND (a.UD_TYPE=T.TXN_TYPE) AND  (a.UD_SUBTYPE=T.TXN_SUBTYPE)
        left join BSS.SMARTBUS_STATION s on s.Route = to_number(substr(lpad(trim(to_char(a.EFT_TERMINAL_ID,'XXXXXXXXXXXXXXXX')),16,'0'),11,4),'xxxx')
        and  s.station_id = to_number(substr(lpad(trim(to_char(a.EFT_TERMINAL_ID,'XXXXXXXXXXXXXXXX')),16,'0'),1,4),'xxxx') 
        where ud_type = 3 and ud_subtype in (19)
        --and settlement_date between trunc(sysdate-3) and trunc(sysdate-3)
        AND a.settlement_date = vstdt --'16-NOV-2019'
        and (vparticipantid IS NULL OR source_participant_id = vparticipantid)
        --and source_participant_id = 109
        and iss_txn_reflection = 'N'
        and cch_txn_approved = 'Y'
        and ud_subtype = 19
        and aa.passenger_type in(30,31,32)
        order by  BUS_ROUTE_ID,TXN_DATE_TIME+7/24
  ) aa
  left join  BSS.SMARTBUS_STATION sa on sa.Route = aa.BUS_ROUTE_ID and sa.station_id = aa.BUS_STOP_ENTRY
  left join BSS.SMARTBUS_FARE f on f.Route = aa.BUS_ROUTE_ID and f.Entry_id = aa.BUS_STOP_ENTRY and f.Exit_id = aa.BUS_STOP_EXIT

   
        ;
              
        



  END Promotion_smart_bus;
 
procedure MONTHLY_SUM_TXN_LAWSON 
    AS 
    
    BEGIN
          
   declare
    fHandle UTL_FILE.FILE_TYPE;
    volume number;
    device_id number;
    last_time_used date;
    v_log varchar2(1000);
  
    
    cursor c_txn is
      
     select volume,device_id,last_time_used from (
select volume,a.device_id,b.time_used as last_time_used  from (
select count(card_serial_number)as volume ,device_id from cut_pi_financial
where settlement_date between trunc(sysdate-35) and trunc(sysdate-1)
and source_participant_id = 50
and device_id in (select device_id from DEVICE.device_status where participant_id = 50)
and iss_txn_reflection = 'N'
group by device_id
)a
left join DEVICE.device_last_used_time b on a.device_id = b.device_id
where volume> 5000
)
 ;
 
    begin  
      fHandle := UTL_FILE.FOPEN('EX_BE', 'MONTHLY_SUM_TXN_LAWSON_' || to_char(trunc(sysdate),'YYYYMMDD') || '.csv' , 'w');
      v_log := 'volume,device_id,last_time_used';
      UTL_FILE.PUT_LINE(fHandle, v_log);
      open c_txn;
    
      loop
        fetch c_txn
          into 
          volume,
          device_id,
          last_time_used;
          
        EXIT WHEN c_txn%NOTFOUND;
        v_log := '"'||volume||'","'||DEVICE_ID||'","'||last_time_used||'",';
        UTL_FILE.PUT_LINE(fHandle, v_log);
        UTL_FILE.FFLUSH(fHandle);
      end loop;
      close c_txn;
      UTL_FILE.FCLOSE(fHandle);
      
    end;
   
 
    
   DECLARE
          SMTPSERVERNAME VARCHAR2(200);
          SENDER VARCHAR2(200);
          RECIPIENT VARCHAR2(200);
          CCRECIPIENT VARCHAR2(200);
          BCCRECIPIENT VARCHAR2(200);
          SUBJECT VARCHAR2(200);
          BODY VARCHAR2(200);
          ERRORMESSAGE VARCHAR2(200);
     
          ATTACHMENTS SENDMAILJPKG.ATTACHMENTS_LIST;
          v_Return NUMBER;
          BEGIN
          
            dbms_java.grant_permission( 'BSS', 'SYS:java.io.FilePermission', '/export/home/ntusers/anchisai/EX_BE/MONTHLY_SUM_TXN_LAWSON_' || to_char(trunc(sysdate),'YYYYMMDD') || '.csv', 'read');
           -- dbms_java.grant_permission( 'BSS', 'SYS:java.io.FilePermission', '/export/home/ntusers/anchisai/EX_BE/card_hist_check_udsn_skip_' || to_char(trunc(sysdate),'YYYYMMDD') || '.csv', 'read');
            commit;
            SMTPSERVERNAME := '127.0.0.1';
            SENDER := 'be@rabbit.co.th';
            RECIPIENT :=  'sirilucks@rabbit.co.th';
           -- CCRECIPIENT := 'be@rabbit.co.th';
            BCCRECIPIENT := NULL;
            SUBJECT := 'MONTHLY_SUM_TXN_LAWSON ' || to_char(trunc(sysdate),'YYYYMMDD') ;
            BODY := 'Dear All' || CHR(13) || CHR(13) ||
        
                        '       Please find attached ka' || CHR(13) || CHR(13) ||
        
                      'Best Regards,'|| CHR(13) 
                      ;
            -- Modify the code to initialize the variable
            ATTACHMENTS := SENDMAILJPKG.ATTACHMENTS_LIST('/export/home/ntusers/anchisai/EX_BE/MONTHLY_SUM_TXN_LAWSON_' || to_char(trunc(sysdate),'YYYYMMDD') || '.csv');
            v_Return := SENDMAILJPKG.SENDMAIL(
              SMTPSERVERNAME => SMTPSERVERNAME,
              SENDER => SENDER,
              RECIPIENT => RECIPIENT,
              CCRECIPIENT => CCRECIPIENT,
              BCCRECIPIENT => BCCRECIPIENT,
              SUBJECT => SUBJECT,
              BODY => BODY,
              ERRORMESSAGE => ERRORMESSAGE,
              ATTACHMENTS => ATTACHMENTS
            );
            
          END; 
      
      
end MONTHLY_SUM_TXN_LAWSON;


 PROCEDURE Monthly_forecast_expiry_FA
    AS 

    BEGIN
          
           DECLARE
        
          fhandle utl_file.file_type;
          v_date VARCHAR2(11);
          TYPE gencurtyp IS REF CURSOR;
              detail gencurtyp;
              v_log  VARCHAR2(1000);
              v_header_rec VARCHAR2(1000);
             
              v_EXPIRY_MONTH VARCHAR2(100);
              v_ACCOUNT_STATE VARCHAR2(100);
              v_card_count number;
              v_REMAINING_VALUE_THB number;
              v_DEPOSIT_BALANCE_THB number;
              

            BEGIN
              ----get settlement_date ----
              SELECT to_char(SYSDATE,'DD-MON-YYYY')
              INTO v_date
              FROM dual;
            ---------------------------
            fhandle :=utl_file.fopen('EX_DATA_BE','Monthly_forecast_card_expiry_FA'|| v_date || '.csv','w');--Opening a file
            -------------- HEADER ----------------
            SELECT 'EXPIRY_MONTH,ACCOUNT_STATE,CARD_COUNT,REMAINING_VALUE_THB,DEPOSIT_BALANCE_THB' AS HEADER
            INTO v_header_rec
            FROM dual ;
            --------------END HEADER ----------------
            --------------WRITE HEADER---------------
            v_log := v_header_rec ||chr(13);
            utl_file.put_line(fhandle, v_log);
            -----------------------------------------
            OPEN detail FOR 
                
    select 
      EXPIRY_MONTH,
      ACCOUNT_STATE,
      count(*) as card_count,
      sum(REMAINING_VALUE_THB) as REMAINING_VALUE_THB,
      sum(DEPOSIT_BALANCE_THB) as DEPOSIT_BALANCE_THB 
      from
      (
      select 
      ca.ACCOUNT_STATE || '-' || case when ca.ACCOUNT_STATE = 3 then 'Issued'
      when ca.ACCOUNT_STATE = 6 then 'Refunded' end as ACCOUNT_STATE,
      ca.csc_serial_number as CSC_SERIAL_NUMBER,
      ca.deposit_balance*0.01 as DEPOSIT_BALANCE_THB,
      aa.passenger_type as BSS_CARD_TYPE,
      reports.bkk_int_fun.getpassengertype(aa.passenger_type) as DESCRIPTION,
      pa.account_state as PROD_ACCOUNT_STATE,
      pa.remaining_value*0.01 as REMAINING_VALUE_THB,
      pa.VALUE_REFUND_LIAB_WRITE_OFF as VALUE_REFUND_LIAB_WRITE_OFF,
      ca.DEPOSIT_REFUND_LIAB_WRITE_OFF as DEPOSIT_REFUND_LIAB_WRITE_OFF,
      to_char(ca.EXPIRY_DATE,'YYYY-MM') as EXPIRY_MONTH,
      pa.LEDGER_BALANCE as LEDGER_BALANCE
      FROM card_account ca, product_account pa, application_account aa
          WHERE --ca.account_state NOT IN (4, 6, 7)
           pa.prod_type = 256
          AND ca.csc_serial_number = pa.csc_serial_number(+)
          AND ca.csc_lifecycle_count = pa.csc_lifecycle_count(+)
          AND ca.csc_issuer_id = pa.csc_issuer_id(+)
          AND ca.csc_type = pa.csc_type(+)
          AND ca.csc_serial_number = aa.csc_serial_number(+)
          AND ca.csc_lifecycle_count = aa.csc_lifecycle_count(+)
          AND ca.csc_issuer_id = aa.csc_issuer_id(+)
          AND ca.csc_type = aa.csc_type(+)
          and ca.account_state in (3,6)
          --And ca.expiry_date BETWEEN '01-JUL-2020' and '31-JUL-2020'
          And ca.expiry_date BETWEEN '01-JAN-2019' and '31-DEC-2027'
          --and ca.expiry_date < TRUNC(SYSDATE-1)
      )    
      group by EXPIRY_MONTH,ACCOUNT_STATE
      order by EXPIRY_MONTH
    ;
                              
            loop
              fetch detail
              INTO 
              v_EXPIRY_MONTH,
              v_ACCOUNT_STATE,
              v_card_count ,
              v_REMAINING_VALUE_THB ,
              v_DEPOSIT_BALANCE_THB ;

              
              exit
            WHEN detail%notfound;
             
              v_log := v_EXPIRY_MONTH||','||v_ACCOUNT_STATE||','||v_card_count||','||v_REMAINING_VALUE_THB||','||v_DEPOSIT_BALANCE_THB||chr(13);
              
              utl_file.put_line(fhandle, v_log);
              utl_file.fflush(fhandle);
              
            END loop ;
            CLOSE detail;

            utl_file.fclose(fhandle);
          END;
          
         --send mail--
           DECLARE
          smtpservername VARCHAR2(200);
          sender VARCHAR2(200);
          recipient VARCHAR2(250);
          ccrecipient VARCHAR2(250);
          bccrecipient VARCHAR2(250);
          subject VARCHAR2(250);
          BODY VARCHAR2(250);
          errormessage VARCHAR2(250);
          attachments sendmailjpkg.attachments_list;
          v_return NUMBER;
          v_date date;
         
          BEGIN
          
            SELECT to_char(SYSDATE,'dd-MON-yyyy')
              INTO v_date
              FROM dual;
           
            dbms_java.grant_permission( 'BSS', 'SYS:java.io.FilePermission', '/export/home/bssuser/dba_directory/PL_SQL/EX_DATA/Monthly_forecast_card_expiry_FA'|| to_char(SYSDATE,'DD-MON-YYYY') || '.csv', 'read' );
            COMMIT;
            smtpservername := '127.0.0.1';
            sender := 'be@rabbit.co.th';
            recipient := 'witchudaa@rabbit.co.th, narinratr@rabbit.co.th, panchaneec@rabbit.co.th';
            --recipient := 'sutimak@rabbit.co.th';
            ccrecipient := 'be@rabbit.co.th';
            bccrecipient := NULL;
            subject := 'Monthly forecast card expiry to FA ' || to_char(SYSDATE, 'YYYYMMDD') ;
            BODY := 'Dear FA,' || chr(13) || chr(13) ||
        
                        '    Monthly forecast card expiry to FA ' || to_char(SYSDATE, 'YYYYMMDD') || ' as attached.' || chr(13) || chr(13) ||
        
                      'Best Regards,'|| chr(13) 
                      ;
            -- Modify the code to initialize the variable
            attachments := sendmailjpkg.attachments_list('/export/home/bssuser/dba_directory/PL_SQL/EX_DATA/Monthly_forecast_card_expiry_FA'|| to_char(SYSDATE,'DD-MON-YYYY') || '.csv');
            v_return := sendmailjpkg.sendmail(
              smtpservername => smtpservername,
              sender => sender,
              recipient => recipient,
              ccrecipient => ccrecipient,
              bccrecipient => bccrecipient,
              subject => subject,
              BODY => BODY,
              errormessage => errormessage,
              attachments => attachments
            );
            
          END; 
END Monthly_forecast_expiry_FA;

 PROCEDURE MONDAY_TESCO_COMPARE
    AS 

    BEGIN
          
           DECLARE
        
          fhandle utl_file.file_type;
          v_date VARCHAR2(11);
          TYPE gencurtyp IS REF CURSOR;
              detail gencurtyp;
              v_log  VARCHAR2(1000);
              v_header_rec VARCHAR2(1000);
             
              V_RABBIT_CARD VARCHAR2(100);
              V_RABBIT_VALUE NUMBER;
              V_RABBIT_DATE VARCHAR2(100);
              V_RABBIT_LOCATION_ID VARCHAR2(100);
              V_RABBIT_LOCATION_NAME VARCHAR2(500); 
              V_TESCO_CARD VARCHAR2(50);
              V_TESCO_VALUE NUMBER;
              V_TESCO_DATE VARCHAR2(50);
              V_SETTLEMENT_DATE VARCHAR2(50) ;
              V_TESCO_ID VARCHAR2(50) ;  
              V_MATCH VARCHAR2(100);
              V_STATUS_TXN VARCHAR2(250) ;
              

            BEGIN
              ----get settlement_date ----
              SELECT to_char(SYSDATE,'DD-MON-YYYY')
              INTO v_date
              FROM dual;
            ---------------------------
            fhandle :=utl_file.fopen('EX_DATA_BE','RECONCILITION_RABBIT_vs_TESCO_'|| v_date || '.csv','w');--Opening a file
            -------------- HEADER ----------------
            SELECT 'RABBIT_CARD,RABBIT_VALUE,RABBIT_DATE,RABBIT_lOCATION_ID,RABBIT_LOCATION_NAME,TESCO_CARD,TESCO_VALUE,TESCO_DATE,TESCO_ID,MATCH,STATUS_TXN' AS HEADER
            INTO v_header_rec
            FROM dual ;
            --------------END HEADER ----------------
            --------------WRITE HEADER---------------
            v_log := v_header_rec ||chr(13);
            utl_file.put_line(fhandle, v_log);
            -----------------------------------------
            OPEN detail FOR 
                
-- send Monday
/*select 
CCH_CARD_SERIAL_NUMBER as RABBIT_CARD,
CCH_TXN_VALUE AS RABBIT_VALUE,
CCH_TXN_DATE_TIME_NEW AS RABBIT_DATE,
CCH_Location_ID AS RABBIT_lOCATION_ID,
--CCH_Location_Name AS RABBIT_LOCATION_NAME,
case when CCH_Location_Name like '%,%' then Replace(CCH_Location_Name,',') else CCH_Location_Name end as RABBIT_LOCATION_NAME,
TESCO_CARD_SERIAL_NUMBER AS TESCO_CARD,
TESCO_TXN_VALUE AS TESCO_VALUE,
TESCO_TXN_DATE_TIME_NEW as TESCO_DATE ,
TESCO_SP_ID AS TESCO_ID ,
MATCH,
case when MATCH = 'Yes' and CCH_CARD_SERIAL_NUMBER = TESCO_CARD_SERIAL_NUMBER and CCH_TXN_VALUE = TESCO_TXN_VALUE and CCH_Location_ID=TESCO_SP_ID then 'MAP COMPLETE' 
     when MATCH = 'No'  and CCH_CARD_SERIAL_NUMBER = TESCO_CARD_SERIAL_NUMBER and CCH_TXN_VALUE <> TESCO_TXN_VALUE and CCH_Location_ID=TESCO_SP_ID then 'VALUE UNMATCH'     
     when MATCH = 'No'  and CCH_CARD_SERIAL_NUMBER is null and TESCO_CARD_SERIAL_NUMBER is not null  then 'NO_RD_TXN'
     when MATCH = 'No'  and CCH_CARD_SERIAL_NUMBER is not null  and TESCO_CARD_SERIAL_NUMBER is null  then 'NO_DATAFILE_TXN'
else 'null' end as  Status_TXN
from
(
    select a.card_serial_number as CCH_CARD_SERIAL_NUMBER,
    a.TXN_VALUE as CCH_TXN_VALUE,
    a.TXN_DATE_TIME_NEW as CCH_TXN_DATE_TIME_NEW,
    --a.TXN_DATE_OLD as TXN_DATE_OLD ,
    --a.CCH_SETTLEMENT_DATE as CCH_SETTLEMENT_DATE,
    a.CCH_Location_ID as CCH_Location_ID,
    Location_Name as  CCH_Location_Name,
    b.card_serial_number as TESCO_CARD_SERIAL_NUMBER,
    b.txn_value as TESCO_TXN_VALUE,
    --b.TESCO_TXN_DATE_TIME_OLD as TESCO_TXN_DATE_TIME_OLD,
    b.TESCO_TXN_DATE_TIME_NEW as TESCO_TXN_DATE_TIME_NEW,
    b.tesco_sp_id as TESCO_SP_ID, 
    case when a.TXN_VALUE - b.txn_value = 0 then 'Yes' else 'No' end as MATCH 
    from
  (
    -- Rabbit TXN
        select  card_serial_number,sum(txn_value) as TXN_VALUE,txn_date_time_new,CCH_Location_ID,Location_Name
        from BSS_REPORTS.rb_txn_tesco 
        where txn_date_time_new between  to_char((sysdate-5),'YYYYMMDD')  and  to_char((sysdate-1),'YYYYMMDD')
        and settlement_date between (sysdate-6) and (sysdate-1)
        group by card_serial_number,TXN_DATE_TIME_NEW,CCH_Location_ID,Location_Name                                            
  )a             
 left join 

        ( 
                select card_serial_number,sum(TXN_VALUE) as TXN_VALUE,TESCO_TXN_DATE_TIME_NEW,TESCO_SP_ID
                from (
                select card_serial_number as card_serial_number ,sum(amount*0.01)as TXN_VALUE,
                TO_CHAR(TO_TIMESTAMP(SUBSTR(txn_date_time,0,8), 'DDMMYYYY HH:MI:SS'),'DDMMYYYY') as TESCO_TXN_DATE_TIME_NEW                       
                ,SP_SHOP_ID AS TESCO_SP_ID                  
                from bss_reports.TESCO_DATA_FILE 
                where SUBSTR(SUBSTR(txn_date_time,0,8),5,5)||SUBSTR(SUBSTR(txn_date_time,0,8),3,2)||SUBSTR(SUBSTR(txn_date_time,0,8),1,2) between  to_char((sysdate-5),'YYYYMMDD')  and  to_char((sysdate-1),'YYYYMMDD')
                --and  SUBSTR(txn_date_time,9,14) > '223000'
                --and card_serial_number = '088002770545'
                group by card_serial_number ,
                  TO_CHAR(TO_TIMESTAMP(SUBSTR(txn_date_time,0,8), 'DDMMYYYY HH:MI:SS'),'DDMMYYYY')           
                  ,SP_SHOP_ID
                       )
                 group by card_serial_number,TESCO_TXN_DATE_TIME_NEW,TESCO_SP_ID           
         ) b

    on a.card_serial_number= b.card_serial_number 
    and a.TXN_DATE_TIME_NEW = b.TESCO_TXN_DATE_TIME_NEW
    and a.CCH_Location_ID= b.tesco_sp_id        

)

    union 


 select 
CCH_CARD_SERIAL_NUMBER as RABBIT_CARD,
CCH_TXN_VALUE AS RABBIT_VALUE,
CCH_TXN_DATE_TIME_NEW AS RABBIT_DATE,
CCH_Location_ID AS RABBIT_lOCATION_ID,
--CCH_Location_Name AS RABBIT_LOCATION_NAME,
case when CCH_Location_Name like '%,%' then Replace(CCH_Location_Name,',') else CCH_Location_Name end as RABBIT_LOCATION_NAME,
TESCO_CARD_SERIAL_NUMBER AS TESCO_CARD,
TESCO_TXN_VALUE AS TESCO_VALUE,
TESCO_TXN_DATE_TIME_NEW as TESCO_DATE ,
TESCO_SP_ID AS TESCO_ID ,
MATCH,
case when MATCH = 'Yes' and CCH_CARD_SERIAL_NUMBER = TESCO_CARD_SERIAL_NUMBER and CCH_TXN_VALUE = TESCO_TXN_VALUE and CCH_Location_ID=TESCO_SP_ID then 'MAP COMPLETE' 
     when MATCH = 'No'  and CCH_CARD_SERIAL_NUMBER = TESCO_CARD_SERIAL_NUMBER and CCH_TXN_VALUE <> TESCO_TXN_VALUE and CCH_Location_ID=TESCO_SP_ID then 'VALUE UNMATCH'     
     when MATCH = 'No'  and CCH_CARD_SERIAL_NUMBER is null and TESCO_CARD_SERIAL_NUMBER is not null  then 'NO_RD_TXN'
     when MATCH = 'No'  and CCH_CARD_SERIAL_NUMBER is not null  and TESCO_CARD_SERIAL_NUMBER is null  then 'NO_DATAFILE_TXN'
else 'null' end as  Status_TXN
from (
    select a.card_serial_number as CCH_CARD_SERIAL_NUMBER,
    a.TXN_VALUE as CCH_TXN_VALUE,
    a.TXN_DATE_TIME_NEW as CCH_TXN_DATE_TIME_NEW,
    --a.TXN_DATE_OLD as TXN_DATE_OLD ,
    --a.CCH_SETTLEMENT_DATE as CCH_SETTLEMENT_DATE,
    a.CCH_Location_ID as CCH_Location_ID,
    Location_Name as  CCH_Location_Name,
    b.card_serial_number as TESCO_CARD_SERIAL_NUMBER,
    b.txn_value as TESCO_TXN_VALUE,
    --b.TESCO_TXN_DATE_TIME_OLD as TESCO_TXN_DATE_TIME_OLD,
    b.TESCO_TXN_DATE_TIME_NEW as TESCO_TXN_DATE_TIME_NEW,
    b.tesco_sp_id as TESCO_SP_ID, 
    case when a.TXN_VALUE - b.txn_value = 0 then 'Yes' else 'No' end as MATCH 
    from
  (
            ( 
                select card_serial_number,sum(TXN_VALUE) as TXN_VALUE,TESCO_TXN_DATE_TIME_NEW,TESCO_SP_ID
                from (
                select card_serial_number as card_serial_number ,sum(amount*0.01)as TXN_VALUE,
                TO_CHAR(TO_TIMESTAMP(SUBSTR(txn_date_time,0,8), 'DDMMYYYY HH:MI:SS'),'DDMMYYYY') as TESCO_TXN_DATE_TIME_NEW                   
                ,SP_SHOP_ID AS TESCO_SP_ID                  
                from bss_reports.TESCO_DATA_FILE 
                where SUBSTR(SUBSTR(txn_date_time,0,8),5,5)||SUBSTR(SUBSTR(txn_date_time,0,8),3,2)||SUBSTR(SUBSTR(txn_date_time,0,8),1,2) between  to_char((sysdate-5),'YYYYMMDD')  and  to_char((sysdate-1),'YYYYMMDD')
                --and  SUBSTR(txn_date_time,9,14) > '223000'
                --and card_serial_number = '088002770545'
                group by card_serial_number ,
                  TO_CHAR(TO_TIMESTAMP(SUBSTR(txn_date_time,0,8), 'DDMMYYYY HH:MI:SS'),'DDMMYYYY')        
                  ,SP_SHOP_ID
                       )
                 group by card_serial_number,TESCO_TXN_DATE_TIME_NEW,TESCO_SP_ID           
            ) b


left join

(    -- Rabbit TXN
        select  card_serial_number,sum(txn_value) as TXN_VALUE,txn_date_time_new,CCH_Location_ID,Location_Name
        from BSS_REPORTS.rb_txn_tesco 
        where txn_date_time_new2 between  to_char((sysdate-5),'YYYYMMDD')  and  to_char((sysdate-1),'YYYYMMDD')
        and settlement_date between (sysdate-6) and (sysdate-1)
        group by card_serial_number,TXN_DATE_TIME_NEW,CCH_Location_ID,Location_Name                                              
 )a           
    on a.card_serial_number= b.card_serial_number 
    and a.TXN_DATE_TIME_NEW = b.TESCO_TXN_DATE_TIME_NEW
    and a.CCH_Location_ID= b.tesco_sp_id  
    )
    )
    order by RABBIT_DATE
;*/
select 
CCH_CARD_SERIAL_NUMBER as RABBIT_CARD,
CCH_TXN_VALUE AS RABBIT_VALUE,
CCH_TXN_DATE_TIME_NEW AS RABBIT_DATE,
CCH_Location_ID AS RABBIT_lOCATION_ID,
--CCH_Location_Name AS RABBIT_LOCATION_NAME,
case when CCH_Location_Name like '%,%' then Replace(CCH_Location_Name,',') else CCH_Location_Name end as RABBIT_LOCATION_NAME,
TESCO_CARD_SERIAL_NUMBER AS TESCO_CARD,
TESCO_TXN_VALUE AS TESCO_VALUE,
TESCO_TXN_DATE_TIME_NEW as TESCO_DATE ,
TESCO_SP_ID AS TESCO_ID ,
MATCH,
case when MATCH = 'Yes' and CCH_CARD_SERIAL_NUMBER = TESCO_CARD_SERIAL_NUMBER and CCH_TXN_VALUE = TESCO_TXN_VALUE and CCH_Location_ID=TESCO_SP_ID then 'MAP COMPLETE' 
     when MATCH = 'No'  and CCH_CARD_SERIAL_NUMBER = TESCO_CARD_SERIAL_NUMBER and CCH_TXN_VALUE <> TESCO_TXN_VALUE and CCH_Location_ID=TESCO_SP_ID then 'VALUE UNMATCH'     
     when MATCH = 'No'  and CCH_CARD_SERIAL_NUMBER is null and TESCO_CARD_SERIAL_NUMBER is not null  then 'NO_RD_TXN'
     when MATCH = 'No'  and CCH_CARD_SERIAL_NUMBER is not null  and TESCO_CARD_SERIAL_NUMBER is null  then 'NO_DATAFILE_TXN'
else 'null' end as  Status_TXN
from
(
    select a.card_serial_number as CCH_CARD_SERIAL_NUMBER,
    a.TXN_VALUE as CCH_TXN_VALUE,
    a.txn_date_time1 as CCH_TXN_DATE_TIME_NEW,
    --a.TXN_DATE_OLD as TXN_DATE_OLD ,
    --a.CCH_SETTLEMENT_DATE as CCH_SETTLEMENT_DATE,
    a.CCH_Location_ID as CCH_Location_ID,
    Location_Name as  CCH_Location_Name,
    b.card_serial_number as TESCO_CARD_SERIAL_NUMBER,
    b.txn_value as TESCO_TXN_VALUE,
    --b.TESCO_TXN_DATE_TIME_OLD as TESCO_TXN_DATE_TIME_OLD,
    b.TESCO_TXN_DATE_TIME_NEW as TESCO_TXN_DATE_TIME_NEW,
    b.tesco_sp_id as TESCO_SP_ID, 
    case when a.TXN_VALUE - b.txn_value = 0 then 'Yes' else 'No' end as MATCH 
    from
  (
    -- Rabbit TXN
        select  card_serial_number,sum(txn_value) as TXN_VALUE,txn_date_time1,CCH_Location_ID,Location_Name
        from BSS_REPORTS.rb_txn_tesco 
        where txn_date_time_new2 between  to_char((sysdate-5),'YYYYMMDD')  and  to_char((sysdate-1),'YYYYMMDD')
        and settlement_date between (sysdate-5) and (sysdate-1)
        group by card_serial_number,txn_date_time1,CCH_Location_ID,Location_Name                                            
  )a             
 left join 

        ( 
                select card_serial_number,sum(TXN_VALUE) as TXN_VALUE,TESCO_TXN_DATE_TIME_NEW,TESCO_SP_ID
                from (
                select card_serial_number as card_serial_number ,sum(amount*0.01)as TXN_VALUE,
                TO_CHAR(TO_TIMESTAMP(SUBSTR(txn_date_time,0,8), 'DDMMYYYY HH:MI:SS'),'DDMMYYYY') as TESCO_TXN_DATE_TIME_NEW                       
                ,SP_SHOP_ID AS TESCO_SP_ID                  
                from bss_reports.TESCO_DATA_FILE 
                where SUBSTR(SUBSTR(txn_date_time,0,8),5,5)||SUBSTR(SUBSTR(txn_date_time,0,8),3,2)||SUBSTR(SUBSTR(txn_date_time,0,8),1,2) between  to_char((sysdate-5),'YYYYMMDD')  and  to_char((sysdate-1),'YYYYMMDD')
                --and  SUBSTR(txn_date_time,9,14) > '223000'
                --and card_serial_number = '088002770545'
                group by card_serial_number ,
                  TO_CHAR(TO_TIMESTAMP(SUBSTR(txn_date_time,0,8), 'DDMMYYYY HH:MI:SS'),'DDMMYYYY')           
                  ,SP_SHOP_ID
                       )
                 group by card_serial_number,TESCO_TXN_DATE_TIME_NEW,TESCO_SP_ID           
         ) b

    on a.card_serial_number= b.card_serial_number 
    and a.txn_date_time1 = b.TESCO_TXN_DATE_TIME_NEW
    and a.CCH_Location_ID= b.tesco_sp_id        

)

    union 


 select 
CCH_CARD_SERIAL_NUMBER as RABBIT_CARD,
CCH_TXN_VALUE AS RABBIT_VALUE,
CCH_TXN_DATE_TIME_NEW AS RABBIT_DATE,
CCH_Location_ID AS RABBIT_lOCATION_ID,
--CCH_Location_Name AS RABBIT_LOCATION_NAME,
case when CCH_Location_Name like '%,%' then Replace(CCH_Location_Name,',') else CCH_Location_Name end as RABBIT_LOCATION_NAME,
TESCO_CARD_SERIAL_NUMBER AS TESCO_CARD,
TESCO_TXN_VALUE AS TESCO_VALUE,
TESCO_TXN_DATE_TIME_NEW as TESCO_DATE ,
TESCO_SP_ID AS TESCO_ID ,
MATCH,
case when MATCH = 'Yes' and CCH_CARD_SERIAL_NUMBER = TESCO_CARD_SERIAL_NUMBER and CCH_TXN_VALUE = TESCO_TXN_VALUE and CCH_Location_ID=TESCO_SP_ID then 'MAP COMPLETE' 
     when MATCH = 'No'  and CCH_CARD_SERIAL_NUMBER = TESCO_CARD_SERIAL_NUMBER and CCH_TXN_VALUE <> TESCO_TXN_VALUE and CCH_Location_ID=TESCO_SP_ID then 'VALUE UNMATCH'     
     when MATCH = 'No'  and CCH_CARD_SERIAL_NUMBER is null and TESCO_CARD_SERIAL_NUMBER is not null  then 'NO_RD_TXN'
     when MATCH = 'No'  and CCH_CARD_SERIAL_NUMBER is not null  and TESCO_CARD_SERIAL_NUMBER is null  then 'NO_DATAFILE_TXN'
else 'null' end as  Status_TXN
from (
    select a.card_serial_number as CCH_CARD_SERIAL_NUMBER,
    a.TXN_VALUE as CCH_TXN_VALUE,
    a.txn_date_time1 as CCH_TXN_DATE_TIME_NEW,
    --a.TXN_DATE_OLD as TXN_DATE_OLD ,
    --a.CCH_SETTLEMENT_DATE as CCH_SETTLEMENT_DATE,
    a.CCH_Location_ID as CCH_Location_ID,
    Location_Name as  CCH_Location_Name,
    b.card_serial_number as TESCO_CARD_SERIAL_NUMBER,
    b.txn_value as TESCO_TXN_VALUE,
    --b.TESCO_TXN_DATE_TIME_OLD as TESCO_TXN_DATE_TIME_OLD,
    b.TESCO_TXN_DATE_TIME_NEW as TESCO_TXN_DATE_TIME_NEW,
    b.tesco_sp_id as TESCO_SP_ID, 
    case when a.TXN_VALUE - b.txn_value = 0 then 'Yes' else 'No' end as MATCH 
    from
  (
            ( 
                select card_serial_number,sum(TXN_VALUE) as TXN_VALUE,TESCO_TXN_DATE_TIME_NEW,TESCO_SP_ID
                from (
                select card_serial_number as card_serial_number ,sum(amount*0.01)as TXN_VALUE,
                TO_CHAR(TO_TIMESTAMP(SUBSTR(txn_date_time,0,8), 'DDMMYYYY HH:MI:SS'),'DDMMYYYY') as TESCO_TXN_DATE_TIME_NEW                   
                ,SP_SHOP_ID AS TESCO_SP_ID                  
                from bss_reports.TESCO_DATA_FILE 
                where SUBSTR(SUBSTR(txn_date_time,0,8),5,5)||SUBSTR(SUBSTR(txn_date_time,0,8),3,2)||SUBSTR(SUBSTR(txn_date_time,0,8),1,2) between  to_char((sysdate-5),'YYYYMMDD')  and  to_char((sysdate-1),'YYYYMMDD')
                --and  SUBSTR(txn_date_time,9,14) > '223000'
                --and card_serial_number = '088002770545'
                group by card_serial_number ,
                  TO_CHAR(TO_TIMESTAMP(SUBSTR(txn_date_time,0,8), 'DDMMYYYY HH:MI:SS'),'DDMMYYYY')        
                  ,SP_SHOP_ID
                       )
                 group by card_serial_number,TESCO_TXN_DATE_TIME_NEW,TESCO_SP_ID           
            ) b


left join

(    -- Rabbit TXN
        select  card_serial_number,sum(txn_value) as TXN_VALUE,txn_date_time1,CCH_Location_ID,Location_Name
        from BSS_REPORTS.rb_txn_tesco 
        where txn_date_time_new2 between  to_char((sysdate-5),'YYYYMMDD')  and  to_char((sysdate-1),'YYYYMMDD')
        and settlement_date between (sysdate-5) and (sysdate-1)
        group by card_serial_number,txn_date_time1,CCH_Location_ID,Location_Name                                              
 )a           
    on a.card_serial_number= b.card_serial_number 
    and a.txn_date_time1 = b.TESCO_TXN_DATE_TIME_NEW
    and a.CCH_Location_ID= b.tesco_sp_id  
    )
    )
    order by RABBIT_DATE
;


                              
            loop
              fetch detail
              INTO 
                V_RABBIT_CARD,
                V_RABBIT_VALUE,
                V_RABBIT_DATE,
                V_RABBIT_lOCATION_ID,
                V_RABBIT_LOCATION_NAME,
                V_TESCO_CARD,
                V_TESCO_VALUE,
                V_TESCO_DATE,
                V_TESCO_ID,
                V_MATCH,
                V_Status_TXN;

              
              exit
            WHEN detail%notfound;
             
              v_log := V_RABBIT_CARD||','||V_RABBIT_VALUE||','||V_RABBIT_DATE||','||V_RABBIT_lOCATION_ID||','||V_RABBIT_LOCATION_NAME||','||V_TESCO_CARD||','||V_TESCO_VALUE||','||V_TESCO_DATE||','||V_TESCO_ID||','||V_MATCH||','||V_Status_TXN||chr(13);
              
              utl_file.put_line(fhandle, v_log);
              utl_file.fflush(fhandle);
              
            END loop ;
            CLOSE detail;

            utl_file.fclose(fhandle);
          END;
          
         --send mail--
           DECLARE
          smtpservername VARCHAR2(200);
          sender VARCHAR2(200);
          recipient VARCHAR2(250);
          ccrecipient VARCHAR2(250);
          bccrecipient VARCHAR2(250);
          subject VARCHAR2(250);
          BODY VARCHAR2(250);
          errormessage VARCHAR2(250);
          attachments sendmailjpkg.attachments_list;
          v_return NUMBER;
          v_date date;
         
          BEGIN
          
            SELECT to_char(SYSDATE,'dd-MON-yyyy')
              INTO v_date
              FROM dual;
            dbms_java.grant_permission( 'BSS', 'SYS:java.io.FilePermission', '/export/home/bssuser/dba_directory/PL_SQL/EX_DATA/RECONCILITION_RABBIT_vs_TESCO_'|| to_char(SYSDATE,'DD-MON-YYYY') || '.csv', 'read' );
            COMMIT;
            smtpservername := '127.0.0.1';
            sender := 'be@rabbit.co.th';
            recipient := 'Chaturong.Wichai@tesco.com,dolticha.buppha@tesco.com,Sattita.Saipoo@tesco.com,sirayaporn.srimuenval@tesco.com';
            ccrecipient := 'be@rabbit.co.th,project@rabbit.co.th,netiyao@rabbit.co.th,arrakp@rabbit.co.th,waressaras@rabbit.co.th,pimnadap@rabbit.co.th,anuchan@rabbit.co.th,sarana@rabbit.co.th';
            bccrecipient := NULL;
            subject := 'RECONCILITION RABBIT vs TESCO ' || to_char(SYSDATE, 'YYYYMMDD') ;
            BODY := 'Dear All,' || chr(13) || chr(13) ||
        
                        'Data comapare ' || to_char(SYSDATE, 'YYYYMMDD') || ' as attached.' || chr(13) || chr(13) ||
        
                      'Note : data between Tuseday > 22:30 and Sunday < 22:30 '|| chr(13) ||
                      'Best Regards,'|| chr(13) 
                      ;
            -- Modify the code to initialize the variable
             attachments := sendmailjpkg.attachments_list('/export/home/bssuser/dba_directory/PL_SQL/EX_DATA/RECONCILITION_RABBIT_vs_TESCO_'|| to_char(SYSDATE,'DD-MON-YYYY') || '.csv');
              v_return := sendmailjpkg.sendmail(
              smtpservername => smtpservername,
              sender => sender,
              recipient => recipient,
              ccrecipient => ccrecipient,
              bccrecipient => bccrecipient,
              subject => subject,
              BODY => BODY,
              errormessage => errormessage,
              attachments => attachments
            );
            
          END; 
END MONDAY_TESCO_COMPARE;

 PROCEDURE WEDNESDAY_TESCO_COMPARE
    AS 

    BEGIN
          
           DECLARE
        
          fhandle utl_file.file_type;
          v_date VARCHAR2(11);
          TYPE gencurtyp IS REF CURSOR;
              detail gencurtyp;
              v_log  VARCHAR2(1000);
              v_header_rec VARCHAR2(1000);
             
              V_RABBIT_CARD VARCHAR2(100);
              V_RABBIT_VALUE NUMBER;
              V_RABBIT_DATE VARCHAR2(100);
              V_RABBIT_LOCATION_ID VARCHAR2(100);
              V_RABBIT_LOCATION_NAME VARCHAR2(500); 
              V_TESCO_CARD VARCHAR2(50);
              V_TESCO_VALUE NUMBER;
              V_TESCO_DATE VARCHAR2(50);
              V_SETTLEMENT_DATE VARCHAR2(50) ;
              V_TESCO_ID VARCHAR2(50) ;  
              V_MATCH VARCHAR2(100);
              V_STATUS_TXN VARCHAR2(250) ;
              

            BEGIN
              ----get settlement_date ----
              SELECT to_char(SYSDATE,'DD-MON-YYYY')
              INTO v_date
              FROM dual;
            ---------------------------
            fhandle :=utl_file.fopen('EX_DATA_BE','RECONCILITION_RABBIT_vs_TESCO_'|| v_date || '.csv','w');--Opening a file
            -------------- HEADER ----------------
            SELECT 'RABBIT_CARD,RABBIT_VALUE,RABBIT_DATE,RABBIT_lOCATION_ID,RABBIT_LOCATION_NAME,TESCO_CARD,TESCO_VALUE,TESCO_DATE,TESCO_ID,MATCH,STATUS_TXN' AS HEADER
            INTO v_header_rec
            FROM dual ;
            --------------END HEADER ----------------
            --------------WRITE HEADER---------------
            v_log := v_header_rec ||chr(13);
            utl_file.put_line(fhandle, v_log);
            -----------------------------------------
            OPEN detail FOR 
                
-- send Wednesday

select 
CCH_CARD_SERIAL_NUMBER as RABBIT_CARD,
CCH_TXN_VALUE AS RABBIT_VALUE,
CCH_TXN_DATE_TIME_NEW AS RABBIT_DATE,
CCH_Location_ID AS RABBIT_lOCATION_ID,
--CCH_Location_Name AS RABBIT_LOCATION_NAME,
case when CCH_Location_Name like '%,%' then Replace(CCH_Location_Name,',') else CCH_Location_Name end as RABBIT_LOCATION_NAME,
TESCO_CARD_SERIAL_NUMBER AS TESCO_CARD,
TESCO_TXN_VALUE AS TESCO_VALUE,
TESCO_TXN_DATE_TIME_NEW as TESCO_DATE ,
TESCO_SP_ID AS TESCO_ID ,
MATCH,
case when MATCH = 'Yes' and CCH_CARD_SERIAL_NUMBER = TESCO_CARD_SERIAL_NUMBER and CCH_TXN_VALUE = TESCO_TXN_VALUE and CCH_Location_ID=TESCO_SP_ID then 'MAP COMPLETE' 
     when MATCH = 'No'  and CCH_CARD_SERIAL_NUMBER = TESCO_CARD_SERIAL_NUMBER and CCH_TXN_VALUE <> TESCO_TXN_VALUE and CCH_Location_ID=TESCO_SP_ID then 'VALUE UNMATCH'     
     when MATCH = 'No'  and CCH_CARD_SERIAL_NUMBER is null and TESCO_CARD_SERIAL_NUMBER is not null  then 'NO_RD_TXN'
     when MATCH = 'No'  and CCH_CARD_SERIAL_NUMBER is not null  and TESCO_CARD_SERIAL_NUMBER is null  then 'NO_DATAFILE_TXN'
else 'null' end as  Status_TXN
from
(
    select a.card_serial_number as CCH_CARD_SERIAL_NUMBER,
    a.TXN_VALUE as CCH_TXN_VALUE,
    a.TXN_DATE_TIME_NEW as CCH_TXN_DATE_TIME_NEW,
    --a.TXN_DATE_OLD as TXN_DATE_OLD ,
    --a.CCH_SETTLEMENT_DATE as CCH_SETTLEMENT_DATE,
    a.CCH_Location_ID as CCH_Location_ID,
    Location_Name as  CCH_Location_Name,
    b.card_serial_number as TESCO_CARD_SERIAL_NUMBER,
    b.txn_value as TESCO_TXN_VALUE,
    --b.TESCO_TXN_DATE_TIME_OLD as TESCO_TXN_DATE_TIME_OLD,
    b.TESCO_TXN_DATE_TIME_NEW as TESCO_TXN_DATE_TIME_NEW,
    b.tesco_sp_id as TESCO_SP_ID, 
    case when a.TXN_VALUE - b.txn_value = 0 then 'Yes' else 'No' end as MATCH 
    from
  (
    -- Rabbit TXN
        select  card_serial_number,sum(txn_value) as TXN_VALUE,txn_date_time_new,CCH_Location_ID,Location_Name
        from BSS_REPORTS.rb_txn_tesco 
        where txn_date_time_new2 between  to_char((sysdate-2),'YYYYMMDD')  and  to_char((sysdate-1),'YYYYMMDD')
        and settlement_date between trunc(sysdate-2) and trunc(sysdate-1)
        group by card_serial_number,TXN_DATE_TIME_NEW,CCH_Location_ID,Location_Name                                            
  )a             
 left join 

        ( 
                select card_serial_number,sum(TXN_VALUE) as TXN_VALUE,TESCO_TXN_DATE_TIME_NEW,TESCO_SP_ID
                from (
                select card_serial_number as card_serial_number ,sum(amount*0.01)as TXN_VALUE,
                TO_CHAR(TO_TIMESTAMP(SUBSTR(txn_date_time,0,8), 'DDMMYYYY HH:MI:SS'),'DDMMYYYY') as TESCO_TXN_DATE_TIME_NEW                       
                ,SP_SHOP_ID AS TESCO_SP_ID                  
                from bss_reports.TESCO_DATA_FILE 
                where SUBSTR(SUBSTR(txn_date_time,0,8),5,5)||SUBSTR(SUBSTR(txn_date_time,0,8),3,2)||SUBSTR(SUBSTR(txn_date_time,0,8),1,2) between  to_char((sysdate-2),'YYYYMMDD')  and  to_char((sysdate-1),'YYYYMMDD')
                --and  SUBSTR(txn_date_time,9,14) > '223000'
                --and card_serial_number = '088002770545'
                group by card_serial_number ,
                  TO_CHAR(TO_TIMESTAMP(SUBSTR(txn_date_time,0,8), 'DDMMYYYY HH:MI:SS'),'DDMMYYYY')           
                  ,SP_SHOP_ID
                       )
                 group by card_serial_number,TESCO_TXN_DATE_TIME_NEW,TESCO_SP_ID           
         ) b

    on a.card_serial_number= b.card_serial_number 
    and a.TXN_DATE_TIME_NEW = b.TESCO_TXN_DATE_TIME_NEW
    and a.CCH_Location_ID= b.tesco_sp_id        

)

    union 


 select 
CCH_CARD_SERIAL_NUMBER as RABBIT_CARD,
CCH_TXN_VALUE AS RABBIT_VALUE,
CCH_TXN_DATE_TIME_NEW AS RABBIT_DATE,
CCH_Location_ID AS RABBIT_lOCATION_ID,
--CCH_Location_Name AS RABBIT_LOCATION_NAME,
case when CCH_Location_Name like '%,%' then Replace(CCH_Location_Name,',') else CCH_Location_Name end as RABBIT_LOCATION_NAME,
TESCO_CARD_SERIAL_NUMBER AS TESCO_CARD,
TESCO_TXN_VALUE AS TESCO_VALUE,
TESCO_TXN_DATE_TIME_NEW as TESCO_DATE ,
TESCO_SP_ID AS TESCO_ID ,
MATCH,
case when MATCH = 'Yes' and CCH_CARD_SERIAL_NUMBER = TESCO_CARD_SERIAL_NUMBER and CCH_TXN_VALUE = TESCO_TXN_VALUE and CCH_Location_ID=TESCO_SP_ID then 'MAP COMPLETE' 
     when MATCH = 'No'  and CCH_CARD_SERIAL_NUMBER = TESCO_CARD_SERIAL_NUMBER and CCH_TXN_VALUE <> TESCO_TXN_VALUE and CCH_Location_ID=TESCO_SP_ID then 'VALUE UNMATCH'     
     when MATCH = 'No'  and CCH_CARD_SERIAL_NUMBER is null and TESCO_CARD_SERIAL_NUMBER is not null  then 'NO_RD_TXN'
     when MATCH = 'No'  and CCH_CARD_SERIAL_NUMBER is not null  and TESCO_CARD_SERIAL_NUMBER is null  then 'NO_DATAFILE_TXN'
else 'null' end as  Status_TXN
from (
    select a.card_serial_number as CCH_CARD_SERIAL_NUMBER,
    a.TXN_VALUE as CCH_TXN_VALUE,
    a.TXN_DATE_TIME_NEW as CCH_TXN_DATE_TIME_NEW,
    --a.TXN_DATE_OLD as TXN_DATE_OLD ,
    --a.CCH_SETTLEMENT_DATE as CCH_SETTLEMENT_DATE,
    a.CCH_Location_ID as CCH_Location_ID,
    Location_Name as  CCH_Location_Name,
    b.card_serial_number as TESCO_CARD_SERIAL_NUMBER,
    b.txn_value as TESCO_TXN_VALUE,
    --b.TESCO_TXN_DATE_TIME_OLD as TESCO_TXN_DATE_TIME_OLD,
    b.TESCO_TXN_DATE_TIME_NEW as TESCO_TXN_DATE_TIME_NEW,
    b.tesco_sp_id as TESCO_SP_ID, 
    case when a.TXN_VALUE - b.txn_value = 0 then 'Yes' else 'No' end as MATCH 
    from
  (
            ( 
                select card_serial_number,sum(TXN_VALUE) as TXN_VALUE,TESCO_TXN_DATE_TIME_NEW,TESCO_SP_ID
                from (
                select card_serial_number as card_serial_number ,sum(amount*0.01)as TXN_VALUE,
                TO_CHAR(TO_TIMESTAMP(SUBSTR(txn_date_time,0,8), 'DDMMYYYY HH:MI:SS'),'DDMMYYYY') as TESCO_TXN_DATE_TIME_NEW                   
                ,SP_SHOP_ID AS TESCO_SP_ID                  
                from bss_reports.TESCO_DATA_FILE 
                where SUBSTR(SUBSTR(txn_date_time,0,8),5,5)||SUBSTR(SUBSTR(txn_date_time,0,8),3,2)||SUBSTR(SUBSTR(txn_date_time,0,8),1,2) between  to_char((sysdate-2),'YYYYMMDD')  and  to_char((sysdate-1),'YYYYMMDD')
                --and  SUBSTR(txn_date_time,9,14) > '223000'
                --and card_serial_number = '088002770545'
                group by card_serial_number ,
                  TO_CHAR(TO_TIMESTAMP(SUBSTR(txn_date_time,0,8), 'DDMMYYYY HH:MI:SS'),'DDMMYYYY')        
                  ,SP_SHOP_ID
                       )
                 group by card_serial_number,TESCO_TXN_DATE_TIME_NEW,TESCO_SP_ID           
            ) b


left join

(    -- Rabbit TXN
                select  card_serial_number,sum(txn_value) as TXN_VALUE,txn_date_time_new,CCH_Location_ID,Location_Name
                from BSS_REPORTS.rb_txn_tesco 
                where txn_date_time_new2 between  to_char((sysdate-2),'YYYYMMDD')  and  to_char((sysdate-1),'YYYYMMDD')
                and settlement_date between trunc(sysdate-2) and trunc(sysdate-1)
                group by card_serial_number,TXN_DATE_TIME_NEW,CCH_Location_ID,Location_Name                                              
 )a           
    on a.card_serial_number= b.card_serial_number 
    and a.TXN_DATE_TIME_NEW = b.TESCO_TXN_DATE_TIME_NEW
    and a.CCH_Location_ID= b.tesco_sp_id  
    )
    )
order by RABBIT_DATE
;


                              
            loop
              fetch detail
              INTO 
                V_RABBIT_CARD,
                V_RABBIT_VALUE,
                V_RABBIT_DATE,
                V_RABBIT_lOCATION_ID,
                V_RABBIT_LOCATION_NAME,
                V_TESCO_CARD,
                V_TESCO_VALUE,
                V_TESCO_DATE,
                V_TESCO_ID,
                V_MATCH,
                V_Status_TXN;

              
              exit
            WHEN detail%notfound;
             
              v_log := V_RABBIT_CARD||','||V_RABBIT_VALUE||','||V_RABBIT_DATE||','||V_RABBIT_lOCATION_ID||','||V_RABBIT_LOCATION_NAME||','||V_TESCO_CARD||','||V_TESCO_VALUE||','||V_TESCO_DATE||','||V_TESCO_ID||','||V_MATCH||','||V_Status_TXN||chr(13);
              
              utl_file.put_line(fhandle, v_log);
              utl_file.fflush(fhandle);
              
            END loop ;
            CLOSE detail;

            utl_file.fclose(fhandle);
          END;
          
         --send mail--
           DECLARE
          smtpservername VARCHAR2(200);
          sender VARCHAR2(200);
          recipient VARCHAR2(250);
          ccrecipient VARCHAR2(250);
          bccrecipient VARCHAR2(250);
          subject VARCHAR2(250);
          BODY VARCHAR2(250);
          errormessage VARCHAR2(250);
          attachments sendmailjpkg.attachments_list;
          v_return NUMBER;
          v_date date;
         
          BEGIN
          
            SELECT to_char(SYSDATE,'dd-MON-yyyy')
              INTO v_date
              FROM dual;
            dbms_java.grant_permission( 'BSS', 'SYS:java.io.FilePermission', '/export/home/bssuser/dba_directory/PL_SQL/EX_DATA/RECONCILITION_RABBIT_vs_TESCO_'|| to_char(SYSDATE,'DD-MON-YYYY') || '.csv', 'read' );
            COMMIT;
            smtpservername := '127.0.0.1';
            sender := 'be@rabbit.co.th';
            recipient := 'Chaturong.Wichai@tesco.com,dolticha.buppha@tesco.com,Sattita.Saipoo@tesco.com,sirayaporn.srimuenval@tesco.com';
           -- recipient := 'sirilucks@rabbit.co.th';
            ccrecipient := 'be@rabbit.co.th,project@rabbit.co.th,netiyao@rabbit.co.th,arrakp@rabbit.co.th,waressaras@rabbit.co.th,pimnadap@rabbit.co.th,anuchan@rabbit.co.th,sarana@rabbit.co.th';
           -- ccrecipient := 'be@rabbit.co.th';
            bccrecipient := NULL;
            subject := 'RECONCILITION RABBIT vs TESCO ' || to_char(SYSDATE, 'YYYYMMDD') ;
            BODY := 'Dear All,' || chr(13) || chr(13) ||
        
                        'Data comapare ' || to_char(SYSDATE, 'YYYYMMDD') || ' as attached.' || chr(13) || chr(13) ||
                        'Note : data between Sunday > 22:30 and Tuseday < 22:30 '|| chr(13) ||
        
                      'Best Regards,'|| chr(13) 
                      ;
            -- Modify the code to initialize the variable
             attachments := sendmailjpkg.attachments_list('/export/home/bssuser/dba_directory/PL_SQL/EX_DATA/RECONCILITION_RABBIT_vs_TESCO_'|| to_char(SYSDATE,'DD-MON-YYYY') || '.csv');
              v_return := sendmailjpkg.sendmail(
              smtpservername => smtpservername,
              sender => sender,
              recipient => recipient,
              ccrecipient => ccrecipient,
              bccrecipient => bccrecipient,
              subject => subject,
              BODY => BODY,
              errormessage => errormessage,
              attachments => attachments
            );
            
          END; 
END WEDNESDAY_TESCO_COMPARE;

 PROCEDURE FRIDAY_TESCO_COMPARE
    AS 

    BEGIN
          
           DECLARE
        
          fhandle utl_file.file_type;
          v_date VARCHAR2(11);
          TYPE gencurtyp IS REF CURSOR;
              detail gencurtyp;
              v_log  VARCHAR2(1000);
              v_header_rec VARCHAR2(1000);
             
              V_RABBIT_CARD VARCHAR2(100);
              V_RABBIT_VALUE NUMBER;
              V_RABBIT_DATE VARCHAR2(100);
              V_RABBIT_LOCATION_ID VARCHAR2(100);
              V_RABBIT_LOCATION_NAME VARCHAR2(500); 
              V_TESCO_CARD VARCHAR2(50);
              V_TESCO_VALUE NUMBER;
              V_TESCO_DATE VARCHAR2(50);
              V_SETTLEMENT_DATE VARCHAR2(50) ;
              V_TESCO_ID VARCHAR2(50) ;  
              V_MATCH VARCHAR2(100);
              V_STATUS_TXN VARCHAR2(250) ;
              

            BEGIN
              ----get settlement_date ----
              SELECT to_char(SYSDATE,'DD-MON-YYYY')
              INTO v_date
              FROM dual;
            ---------------------------
            fhandle :=utl_file.fopen('EX_DATA_BE','RECONCILITION_RABBIT_vs_TESCO_'|| v_date || '.csv','w');--Opening a file
            -------------- HEADER ----------------
            SELECT 'RABBIT_CARD,RABBIT_VALUE,RABBIT_DATE,RABBIT_lOCATION_ID,RABBIT_LOCATION_NAME,TESCO_CARD,TESCO_VALUE,TESCO_DATE,TESCO_ID,MATCH,STATUS_TXN' AS HEADER
            INTO v_header_rec
            FROM dual ;
            --------------END HEADER ----------------
            --------------WRITE HEADER---------------
            v_log := v_header_rec ||chr(13);
            utl_file.put_line(fhandle, v_log);
            -----------------------------------------
            OPEN detail FOR 
                


select 
CCH_CARD_SERIAL_NUMBER as RABBIT_CARD,
CCH_TXN_VALUE AS RABBIT_VALUE,
CCH_TXN_DATE_TIME_NEW AS RABBIT_DATE,
CCH_Location_ID AS RABBIT_lOCATION_ID,
--CCH_Location_Name AS RABBIT_LOCATION_NAME,
case when CCH_Location_Name like '%,%' then Replace(CCH_Location_Name,',') else CCH_Location_Name end as RABBIT_LOCATION_NAME,
TESCO_CARD_SERIAL_NUMBER AS TESCO_CARD,
TESCO_TXN_VALUE AS TESCO_VALUE,
TESCO_TXN_DATE_TIME_NEW as TESCO_DATE ,
TESCO_SP_ID AS TESCO_ID ,
MATCH,
case when MATCH = 'Yes' and CCH_CARD_SERIAL_NUMBER = TESCO_CARD_SERIAL_NUMBER and CCH_TXN_VALUE = TESCO_TXN_VALUE and CCH_Location_ID=TESCO_SP_ID then 'MAP COMPLETE' 
     when MATCH = 'No'  and CCH_CARD_SERIAL_NUMBER = TESCO_CARD_SERIAL_NUMBER and CCH_TXN_VALUE <> TESCO_TXN_VALUE and CCH_Location_ID=TESCO_SP_ID then 'VALUE UNMATCH'     
     when MATCH = 'No'  and CCH_CARD_SERIAL_NUMBER is null and TESCO_CARD_SERIAL_NUMBER is not null  then 'NO_RD_TXN'
     when MATCH = 'No'  and CCH_CARD_SERIAL_NUMBER is not null  and TESCO_CARD_SERIAL_NUMBER is null  then 'NO_DATAFILE_TXN'
else 'null' end as  Status_TXN
from
(
    select a.card_serial_number as CCH_CARD_SERIAL_NUMBER,
    a.TXN_VALUE as CCH_TXN_VALUE,
    a.txn_date_time1 as CCH_TXN_DATE_TIME_NEW,
    --a.TXN_DATE_OLD as TXN_DATE_OLD ,
    --a.CCH_SETTLEMENT_DATE as CCH_SETTLEMENT_DATE,
    a.CCH_Location_ID as CCH_Location_ID,
    Location_Name as  CCH_Location_Name,
    b.card_serial_number as TESCO_CARD_SERIAL_NUMBER,
    b.txn_value as TESCO_TXN_VALUE,
    --b.TESCO_TXN_DATE_TIME_OLD as TESCO_TXN_DATE_TIME_OLD,
    b.TESCO_TXN_DATE_TIME_NEW as TESCO_TXN_DATE_TIME_NEW,
    b.tesco_sp_id as TESCO_SP_ID, 
    case when a.TXN_VALUE - b.txn_value = 0 then 'Yes' else 'No' end as MATCH 
    from
  (
    -- Rabbit TXN
        select  card_serial_number,sum(txn_value) as TXN_VALUE,txn_date_time1,CCH_Location_ID,Location_Name
        from BSS_REPORTS.rb_txn_tesco 
        where txn_date_time_new2 between  to_char((sysdate-9),'YYYYMMDD')  and  to_char((sysdate-1),'YYYYMMDD')
        and settlement_date between trunc(sysdate-9) and trunc(sysdate-1)
        group by card_serial_number,txn_date_time1,CCH_Location_ID,Location_Name                                            
  )a             
 left join 

        ( 
                select card_serial_number,sum(TXN_VALUE) as TXN_VALUE,TESCO_TXN_DATE_TIME_NEW,TESCO_SP_ID
                from (
                select card_serial_number as card_serial_number ,sum(amount*0.01)as TXN_VALUE,
                TO_CHAR(TO_TIMESTAMP(SUBSTR(txn_date_time,0,8), 'DDMMYYYY HH:MI:SS'),'DDMMYYYY') as TESCO_TXN_DATE_TIME_NEW                       
                ,SP_SHOP_ID AS TESCO_SP_ID                  
                from bss_reports.TESCO_DATA_FILE 
                where SUBSTR(SUBSTR(txn_date_time,0,8),5,5)||SUBSTR(SUBSTR(txn_date_time,0,8),3,2)||SUBSTR(SUBSTR(txn_date_time,0,8),1,2) between  to_char((sysdate-9),'YYYYMMDD')  and  to_char((sysdate-1),'YYYYMMDD')
                --and  SUBSTR(txn_date_time,9,14) > '223000'
                --and card_serial_number = '088002770545'
                group by card_serial_number ,
                  TO_CHAR(TO_TIMESTAMP(SUBSTR(txn_date_time,0,8), 'DDMMYYYY HH:MI:SS'),'DDMMYYYY')           
                  ,SP_SHOP_ID
                       )
                 group by card_serial_number,TESCO_TXN_DATE_TIME_NEW,TESCO_SP_ID           
         ) b

    on a.card_serial_number= b.card_serial_number 
    and a.txn_date_time1 = b.TESCO_TXN_DATE_TIME_NEW
    and a.CCH_Location_ID= b.tesco_sp_id        

)

    union 


 select 
CCH_CARD_SERIAL_NUMBER as RABBIT_CARD,
CCH_TXN_VALUE AS RABBIT_VALUE,
CCH_TXN_DATE_TIME_NEW AS RABBIT_DATE,
CCH_Location_ID AS RABBIT_lOCATION_ID,
--CCH_Location_Name AS RABBIT_LOCATION_NAME,
case when CCH_Location_Name like '%,%' then Replace(CCH_Location_Name,',') else CCH_Location_Name end as RABBIT_LOCATION_NAME,
TESCO_CARD_SERIAL_NUMBER AS TESCO_CARD,
TESCO_TXN_VALUE AS TESCO_VALUE,
TESCO_TXN_DATE_TIME_NEW as TESCO_DATE ,
TESCO_SP_ID AS TESCO_ID ,
MATCH,
case when MATCH = 'Yes' and CCH_CARD_SERIAL_NUMBER = TESCO_CARD_SERIAL_NUMBER and CCH_TXN_VALUE = TESCO_TXN_VALUE and CCH_Location_ID=TESCO_SP_ID then 'MAP COMPLETE' 
     when MATCH = 'No'  and CCH_CARD_SERIAL_NUMBER = TESCO_CARD_SERIAL_NUMBER and CCH_TXN_VALUE <> TESCO_TXN_VALUE and CCH_Location_ID=TESCO_SP_ID then 'VALUE UNMATCH'     
     when MATCH = 'No'  and CCH_CARD_SERIAL_NUMBER is null and TESCO_CARD_SERIAL_NUMBER is not null  then 'NO_RD_TXN'
     when MATCH = 'No'  and CCH_CARD_SERIAL_NUMBER is not null  and TESCO_CARD_SERIAL_NUMBER is null  then 'NO_DATAFILE_TXN'
else 'null' end as  Status_TXN
from (
    select a.card_serial_number as CCH_CARD_SERIAL_NUMBER,
    a.TXN_VALUE as CCH_TXN_VALUE,
    a.txn_date_time1 as CCH_TXN_DATE_TIME_NEW,
    --a.TXN_DATE_OLD as TXN_DATE_OLD ,
    --a.CCH_SETTLEMENT_DATE as CCH_SETTLEMENT_DATE,
    a.CCH_Location_ID as CCH_Location_ID,
    Location_Name as  CCH_Location_Name,
    b.card_serial_number as TESCO_CARD_SERIAL_NUMBER,
    b.txn_value as TESCO_TXN_VALUE,
    --b.TESCO_TXN_DATE_TIME_OLD as TESCO_TXN_DATE_TIME_OLD,
    b.TESCO_TXN_DATE_TIME_NEW as TESCO_TXN_DATE_TIME_NEW,
    b.tesco_sp_id as TESCO_SP_ID, 
    case when a.TXN_VALUE - b.txn_value = 0 then 'Yes' else 'No' end as MATCH 
    from
  (
            ( 
                select card_serial_number,sum(TXN_VALUE) as TXN_VALUE,TESCO_TXN_DATE_TIME_NEW,TESCO_SP_ID
                from (
                select card_serial_number as card_serial_number ,sum(amount*0.01)as TXN_VALUE,
                TO_CHAR(TO_TIMESTAMP(SUBSTR(txn_date_time,0,8), 'DDMMYYYY HH:MI:SS'),'DDMMYYYY') as TESCO_TXN_DATE_TIME_NEW                   
                ,SP_SHOP_ID AS TESCO_SP_ID                  
                from bss_reports.TESCO_DATA_FILE 
                where SUBSTR(SUBSTR(txn_date_time,0,8),5,5)||SUBSTR(SUBSTR(txn_date_time,0,8),3,2)||SUBSTR(SUBSTR(txn_date_time,0,8),1,2) between  to_char((sysdate-9),'YYYYMMDD')  and  to_char((sysdate-1),'YYYYMMDD')
                --and  SUBSTR(txn_date_time,9,14) > '223000'
                --and card_serial_number = '088002770545'
                group by card_serial_number ,
                  TO_CHAR(TO_TIMESTAMP(SUBSTR(txn_date_time,0,8), 'DDMMYYYY HH:MI:SS'),'DDMMYYYY')        
                  ,SP_SHOP_ID
                       )
                 group by card_serial_number,TESCO_TXN_DATE_TIME_NEW,TESCO_SP_ID           
            ) b


left join

(    -- Rabbit TXN
                select  card_serial_number,sum(txn_value) as TXN_VALUE,txn_date_time1,CCH_Location_ID,Location_Name
                from BSS_REPORTS.rb_txn_tesco 
                where txn_date_time_new2 between  to_char((sysdate-9),'YYYYMMDD')  and  to_char((sysdate-1),'YYYYMMDD')
                and settlement_date between trunc(sysdate-9) and trunc(sysdate-1)
                group by card_serial_number,txn_date_time1,CCH_Location_ID,Location_Name                                              
 )a           
    on a.card_serial_number= b.card_serial_number 
    and a.txn_date_time1 = b.TESCO_TXN_DATE_TIME_NEW
    and a.CCH_Location_ID= b.tesco_sp_id  
    )
    )
order by RABBIT_DATE
;


                              
            loop
              fetch detail
              INTO 
                V_RABBIT_CARD,
                V_RABBIT_VALUE,
                V_RABBIT_DATE,
                V_RABBIT_lOCATION_ID,
                V_RABBIT_LOCATION_NAME,
                V_TESCO_CARD,
                V_TESCO_VALUE,
                V_TESCO_DATE,
                V_TESCO_ID,
                V_MATCH,
                V_Status_TXN;

              
              exit
            WHEN detail%notfound;
             
              v_log := V_RABBIT_CARD||','||V_RABBIT_VALUE||','||V_RABBIT_DATE||','||V_RABBIT_lOCATION_ID||','||V_RABBIT_LOCATION_NAME||','||V_TESCO_CARD||','||V_TESCO_VALUE||','||V_TESCO_DATE||','||V_TESCO_ID||','||V_MATCH||','||V_Status_TXN||chr(13);
              
              utl_file.put_line(fhandle, v_log);
              utl_file.fflush(fhandle);
              
            END loop ;
            CLOSE detail;

            utl_file.fclose(fhandle);
          END;
          
         --send mail--
           DECLARE
          smtpservername VARCHAR2(200);
          sender VARCHAR2(200);
          recipient VARCHAR2(250);
          ccrecipient VARCHAR2(250);
          bccrecipient VARCHAR2(250);
          subject VARCHAR2(250);
          BODY VARCHAR2(250);
          errormessage VARCHAR2(250);
          attachments sendmailjpkg.attachments_list;
          v_return NUMBER;
          v_date date;
         
          BEGIN
          
            SELECT to_char(SYSDATE,'dd-MON-yyyy')
              INTO v_date
              FROM dual;
            dbms_java.grant_permission( 'BSS', 'SYS:java.io.FilePermission', '/export/home/bssuser/dba_directory/PL_SQL/EX_DATA/RECONCILITION_RABBIT_vs_TESCO_'|| to_char(SYSDATE,'DD-MON-YYYY') || '.csv', 'read' );
            COMMIT;
            smtpservername := '127.0.0.1';
            sender := 'be@rabbit.co.th';
            recipient := 'project@rabbit.co.th,netiyao@rabbit.co.th,arrakp@rabbit.co.th,waressaras@rabbit.co.th,pimnadap@rabbit.co.th,anuchan@rabbit.co.th,sarana@rabbit.co.th';
           -- recipient := 'sirilucks@rabbit.co.th';
            ccrecipient := 'be@rabbit.co.th';
           -- ccrecipient := 'be@rabbit.co.th';
            bccrecipient := NULL;
            subject := 'RECONCILITION RABBIT vs TESCO (Weekly) ' || to_char(SYSDATE, 'YYYYMMDD') ;
            BODY := 'Dear All,' || chr(13) || chr(13) ||
        
                        'Data comapare ' || to_char(SYSDATE, 'YYYYMMDD') || ' as attached.' || chr(13) || chr(13) ||
                        'Note : data between Tuesday > 22:30 and Thurseday < 22:30 '|| chr(13) ||
        
                      'Best Regards,'|| chr(13) 
                      ;
            -- Modify the code to initialize the variable
             attachments := sendmailjpkg.attachments_list('/export/home/bssuser/dba_directory/PL_SQL/EX_DATA/RECONCILITION_RABBIT_vs_TESCO_'|| to_char(SYSDATE,'DD-MON-YYYY') || '.csv');
              v_return := sendmailjpkg.sendmail(
              smtpservername => smtpservername,
              sender => sender,
              recipient => recipient,
              ccrecipient => ccrecipient,
              bccrecipient => bccrecipient,
              subject => subject,
              BODY => BODY,
              errormessage => errormessage,
              attachments => attachments
            );
            
          END; 
END FRIDAY_TESCO_COMPARE;

 PROCEDURE MONTHLY_TESCO_COMPARE
    AS 

    BEGIN
          
           DECLARE
        
          fhandle utl_file.file_type;
          v_date VARCHAR2(11);
          TYPE gencurtyp IS REF CURSOR;
              detail gencurtyp;
              v_log  VARCHAR2(1000);
              v_header_rec VARCHAR2(1000);
             
              V_RABBIT_CARD VARCHAR2(100);
              V_RABBIT_VALUE NUMBER;
              V_RABBIT_DATE VARCHAR2(100);
              V_RABBIT_LOCATION_ID VARCHAR2(100);
              V_RABBIT_LOCATION_NAME VARCHAR2(500); 
              V_TESCO_CARD VARCHAR2(50);
              V_TESCO_VALUE NUMBER;
              V_TESCO_DATE VARCHAR2(50);
              V_SETTLEMENT_DATE VARCHAR2(50) ;
              V_TESCO_ID VARCHAR2(50) ;  
              V_MATCH VARCHAR2(100);
              V_STATUS_TXN VARCHAR2(250) ;
              

            BEGIN
              ----get settlement_date ----
              SELECT to_char(SYSDATE,'DD-MON-YYYY')
              INTO v_date
              FROM dual;
            ---------------------------
            fhandle :=utl_file.fopen('EX_DATA_BE','RECONCILITION_RABBIT_vs_TESCO_'|| v_date || '.csv','w');--Opening a file
            -------------- HEADER ----------------
            SELECT 'RABBIT_CARD,RABBIT_VALUE,RABBIT_DATE,RABBIT_lOCATION_ID,RABBIT_LOCATION_NAME,TESCO_CARD,TESCO_VALUE,TESCO_DATE,TESCO_ID,MATCH,STATUS_TXN' AS HEADER
            INTO v_header_rec
            FROM dual ;
            --------------END HEADER ----------------
            --------------WRITE HEADER---------------
            v_log := v_header_rec ||chr(13);
            utl_file.put_line(fhandle, v_log);
            -----------------------------------------
            OPEN detail FOR 
                


/*select 
CCH_CARD_SERIAL_NUMBER as RABBIT_CARD,
CCH_TXN_VALUE AS RABBIT_VALUE,
CCH_TXN_DATE_TIME_NEW AS RABBIT_DATE,
CCH_Location_ID AS RABBIT_lOCATION_ID,
--CCH_Location_Name AS RABBIT_LOCATION_NAME,
case when CCH_Location_Name like '%,%' then Replace(CCH_Location_Name,',') else CCH_Location_Name end as RABBIT_LOCATION_NAME,
TESCO_CARD_SERIAL_NUMBER AS TESCO_CARD,
TESCO_TXN_VALUE AS TESCO_VALUE,
TESCO_TXN_DATE_TIME_NEW as TESCO_DATE ,
TESCO_SP_ID AS TESCO_ID ,
MATCH,
case when MATCH = 'Yes' and CCH_CARD_SERIAL_NUMBER = TESCO_CARD_SERIAL_NUMBER and CCH_TXN_VALUE = TESCO_TXN_VALUE and CCH_Location_ID=TESCO_SP_ID then 'MAP COMPLETE' 
     when MATCH = 'No'  and CCH_CARD_SERIAL_NUMBER = TESCO_CARD_SERIAL_NUMBER and CCH_TXN_VALUE <> TESCO_TXN_VALUE and CCH_Location_ID=TESCO_SP_ID then 'VALUE UNMATCH'     
     when MATCH = 'No'  and CCH_CARD_SERIAL_NUMBER is null and TESCO_CARD_SERIAL_NUMBER is not null  then 'NO_RD_TXN'
     when MATCH = 'No'  and CCH_CARD_SERIAL_NUMBER is not null  and TESCO_CARD_SERIAL_NUMBER is null  then 'NO_DATAFILE_TXN'
else 'null' end as  Status_TXN
from
(
    select a.card_serial_number as CCH_CARD_SERIAL_NUMBER,
    a.TXN_VALUE as CCH_TXN_VALUE,
    a.TXN_DATE_TIME_NEW as CCH_TXN_DATE_TIME_NEW,
    --a.TXN_DATE_OLD as TXN_DATE_OLD ,
    --a.CCH_SETTLEMENT_DATE as CCH_SETTLEMENT_DATE,
    a.CCH_Location_ID as CCH_Location_ID,
    Location_Name as  CCH_Location_Name,
    b.card_serial_number as TESCO_CARD_SERIAL_NUMBER,
    b.txn_value as TESCO_TXN_VALUE,
    --b.TESCO_TXN_DATE_TIME_OLD as TESCO_TXN_DATE_TIME_OLD,
    b.TESCO_TXN_DATE_TIME_NEW as TESCO_TXN_DATE_TIME_NEW,
    b.tesco_sp_id as TESCO_SP_ID, 
    case when a.TXN_VALUE - b.txn_value = 0 then 'Yes' else 'No' end as MATCH 
    from
  (
    -- Rabbit TXN
        select  card_serial_number,sum(txn_value) as TXN_VALUE,txn_date_time_new,CCH_Location_ID,Location_Name
        from BSS_REPORTS.rb_txn_tesco 
        where txn_date_time_new2 between  to_char((sysdate-2),'YYYYMMDD')  and  to_char((sysdate-1),'YYYYMMDD')
        and settlement_date between trunc(sysdate-3) and trunc(sysdate-1)
        group by card_serial_number,TXN_DATE_TIME_NEW,CCH_Location_ID,Location_Name                                            
  )a             
 left join 

        ( 
                select card_serial_number,sum(TXN_VALUE) as TXN_VALUE,TESCO_TXN_DATE_TIME_NEW,TESCO_SP_ID
                from (
                select card_serial_number as card_serial_number ,sum(amount*0.01)as TXN_VALUE,
                TO_CHAR(TO_TIMESTAMP(SUBSTR(txn_date_time,0,8), 'DDMMYYYY HH:MI:SS'),'DDMMYYYY') as TESCO_TXN_DATE_TIME_NEW                       
                ,SP_SHOP_ID AS TESCO_SP_ID                  
                from bss_reports.TESCO_DATA_FILE 
                where SUBSTR(SUBSTR(txn_date_time,0,8),5,5)||SUBSTR(SUBSTR(txn_date_time,0,8),3,2)||SUBSTR(SUBSTR(txn_date_time,0,8),1,2) between  to_char((sysdate-2),'YYYYMMDD')  and  to_char((sysdate-1),'YYYYMMDD')
                --and  SUBSTR(txn_date_time,9,14) > '223000'
                --and card_serial_number = '088002770545'
                group by card_serial_number ,
                  TO_CHAR(TO_TIMESTAMP(SUBSTR(txn_date_time,0,8), 'DDMMYYYY HH:MI:SS'),'DDMMYYYY')           
                  ,SP_SHOP_ID
                       )
                 group by card_serial_number,TESCO_TXN_DATE_TIME_NEW,TESCO_SP_ID           
         ) b

    on a.card_serial_number= b.card_serial_number 
    and a.TXN_DATE_TIME_NEW = b.TESCO_TXN_DATE_TIME_NEW
    and a.CCH_Location_ID= b.tesco_sp_id        

)

    union 


 select 
CCH_CARD_SERIAL_NUMBER as RABBIT_CARD,
CCH_TXN_VALUE AS RABBIT_VALUE,
CCH_TXN_DATE_TIME_NEW AS RABBIT_DATE,
CCH_Location_ID AS RABBIT_lOCATION_ID,
--CCH_Location_Name AS RABBIT_LOCATION_NAME,
case when CCH_Location_Name like '%,%' then Replace(CCH_Location_Name,',') else CCH_Location_Name end as RABBIT_LOCATION_NAME,
TESCO_CARD_SERIAL_NUMBER AS TESCO_CARD,
TESCO_TXN_VALUE AS TESCO_VALUE,
TESCO_TXN_DATE_TIME_NEW as TESCO_DATE ,
TESCO_SP_ID AS TESCO_ID ,
MATCH,
case when MATCH = 'Yes' and CCH_CARD_SERIAL_NUMBER = TESCO_CARD_SERIAL_NUMBER and CCH_TXN_VALUE = TESCO_TXN_VALUE and CCH_Location_ID=TESCO_SP_ID then 'MAP COMPLETE' 
     when MATCH = 'No'  and CCH_CARD_SERIAL_NUMBER = TESCO_CARD_SERIAL_NUMBER and CCH_TXN_VALUE <> TESCO_TXN_VALUE and CCH_Location_ID=TESCO_SP_ID then 'VALUE UNMATCH'     
     when MATCH = 'No'  and CCH_CARD_SERIAL_NUMBER is null and TESCO_CARD_SERIAL_NUMBER is not null  then 'NO_RD_TXN'
     when MATCH = 'No'  and CCH_CARD_SERIAL_NUMBER is not null  and TESCO_CARD_SERIAL_NUMBER is null  then 'NO_DATAFILE_TXN'
else 'null' end as  Status_TXN
from (
    select a.card_serial_number as CCH_CARD_SERIAL_NUMBER,
    a.TXN_VALUE as CCH_TXN_VALUE,
    a.TXN_DATE_TIME_NEW as CCH_TXN_DATE_TIME_NEW,
    --a.TXN_DATE_OLD as TXN_DATE_OLD ,
    --a.CCH_SETTLEMENT_DATE as CCH_SETTLEMENT_DATE,
    a.CCH_Location_ID as CCH_Location_ID,
    Location_Name as  CCH_Location_Name,
    b.card_serial_number as TESCO_CARD_SERIAL_NUMBER,
    b.txn_value as TESCO_TXN_VALUE,
    --b.TESCO_TXN_DATE_TIME_OLD as TESCO_TXN_DATE_TIME_OLD,
    b.TESCO_TXN_DATE_TIME_NEW as TESCO_TXN_DATE_TIME_NEW,
    b.tesco_sp_id as TESCO_SP_ID, 
    case when a.TXN_VALUE - b.txn_value = 0 then 'Yes' else 'No' end as MATCH 
    from
  (
            ( 
                select card_serial_number,sum(TXN_VALUE) as TXN_VALUE,TESCO_TXN_DATE_TIME_NEW,TESCO_SP_ID
                from (
                select card_serial_number as card_serial_number ,sum(amount*0.01)as TXN_VALUE,
                TO_CHAR(TO_TIMESTAMP(SUBSTR(txn_date_time,0,8), 'DDMMYYYY HH:MI:SS'),'DDMMYYYY') as TESCO_TXN_DATE_TIME_NEW                   
                ,SP_SHOP_ID AS TESCO_SP_ID                  
                from bss_reports.TESCO_DATA_FILE 
                where SUBSTR(SUBSTR(txn_date_time,0,8),5,5)||SUBSTR(SUBSTR(txn_date_time,0,8),3,2)||SUBSTR(SUBSTR(txn_date_time,0,8),1,2) between  to_char((sysdate-2),'YYYYMMDD')  and  to_char((sysdate-1),'YYYYMMDD')
                --and  SUBSTR(txn_date_time,9,14) > '223000'
                --and card_serial_number = '088002770545'
                group by card_serial_number ,
                  TO_CHAR(TO_TIMESTAMP(SUBSTR(txn_date_time,0,8), 'DDMMYYYY HH:MI:SS'),'DDMMYYYY')        
                  ,SP_SHOP_ID
                       )
                 group by card_serial_number,TESCO_TXN_DATE_TIME_NEW,TESCO_SP_ID           
            ) b


left join

(    -- Rabbit TXN
                select  card_serial_number,sum(txn_value) as TXN_VALUE,txn_date_time_new,CCH_Location_ID,Location_Name
                from BSS_REPORTS.rb_txn_tesco 
                where txn_date_time_new2 between  to_char((sysdate-2),'YYYYMMDD')  and  to_char((sysdate-1),'YYYYMMDD')
                and settlement_date between trunc(sysdate-3) and trunc(sysdate-1)
                group by card_serial_number,TXN_DATE_TIME_NEW,CCH_Location_ID,Location_Name                                              
 )a           
    on a.card_serial_number= b.card_serial_number 
    and a.TXN_DATE_TIME_NEW = b.TESCO_TXN_DATE_TIME_NEW
    and a.CCH_Location_ID= b.tesco_sp_id  
    )
    )
order by RABBIT_DATE
;*/

select 
CCH_CARD_SERIAL_NUMBER as RABBIT_CARD,
CCH_TXN_VALUE AS RABBIT_VALUE,
CCH_TXN_DATE_TIME_NEW AS RABBIT_DATE,
CCH_Location_ID AS RABBIT_lOCATION_ID,
--CCH_Location_Name AS RABBIT_LOCATION_NAME,
case when CCH_Location_Name like '%,%' then Replace(CCH_Location_Name,',') else CCH_Location_Name end as RABBIT_LOCATION_NAME,
TESCO_CARD_SERIAL_NUMBER AS TESCO_CARD,
TESCO_TXN_VALUE AS TESCO_VALUE,
TESCO_TXN_DATE_TIME_NEW as TESCO_DATE ,
TESCO_SP_ID AS TESCO_ID ,
MATCH,
case when MATCH = 'Yes' and CCH_CARD_SERIAL_NUMBER = TESCO_CARD_SERIAL_NUMBER and CCH_TXN_VALUE = TESCO_TXN_VALUE and CCH_Location_ID=TESCO_SP_ID then 'MAP COMPLETE' 
     when MATCH = 'No'  and CCH_CARD_SERIAL_NUMBER = TESCO_CARD_SERIAL_NUMBER and CCH_TXN_VALUE <> TESCO_TXN_VALUE and CCH_Location_ID=TESCO_SP_ID then 'VALUE UNMATCH'     
     when MATCH = 'No'  and CCH_CARD_SERIAL_NUMBER is null and TESCO_CARD_SERIAL_NUMBER is not null  then 'NO_RD_TXN'
     when MATCH = 'No'  and CCH_CARD_SERIAL_NUMBER is not null  and TESCO_CARD_SERIAL_NUMBER is null  then 'NO_DATAFILE_TXN'
else 'null' end as  Status_TXN
from
(
    select a.card_serial_number as CCH_CARD_SERIAL_NUMBER,
    a.TXN_VALUE as CCH_TXN_VALUE,
    a.txn_date_time1 as CCH_TXN_DATE_TIME_NEW,
    --a.TXN_DATE_OLD as TXN_DATE_OLD ,
    --a.CCH_SETTLEMENT_DATE as CCH_SETTLEMENT_DATE,
    a.CCH_Location_ID as CCH_Location_ID,
    Location_Name as  CCH_Location_Name,
    b.card_serial_number as TESCO_CARD_SERIAL_NUMBER,
    b.txn_value as TESCO_TXN_VALUE,
    --b.TESCO_TXN_DATE_TIME_OLD as TESCO_TXN_DATE_TIME_OLD,
    b.TESCO_TXN_DATE_TIME_NEW as TESCO_TXN_DATE_TIME_NEW,
    b.tesco_sp_id as TESCO_SP_ID, 
    case when a.TXN_VALUE - b.txn_value = 0 then 'Yes' else 'No' end as MATCH 
    from
  (
    -- Rabbit TXN
        select  card_serial_number,sum(txn_value) as TXN_VALUE,txn_date_time1,CCH_Location_ID,Location_Name
        from BSS_REPORTS.rb_txn_tesco 
        where txn_date_time_new2 between  to_char((reports.bkk_int_dfv.getlastmonthfirsdate),'YYYYMMDD')  and  to_char((reports.bkk_int_dfv.getlastmonthlastdate(sysdate)),'YYYYMMDD')
        and settlement_date between TRUNC(reports.bkk_int_dfv.getlastmonthfirsdate) and TRUNC(reports.bkk_int_dfv.getlastmonthlastdate(sysdate))
        group by card_serial_number,txn_date_time1,CCH_Location_ID,Location_Name                                            
  )a             
 left join 

        ( 
                select card_serial_number,sum(TXN_VALUE) as TXN_VALUE,TESCO_TXN_DATE_TIME_NEW,TESCO_SP_ID
                from (
                select card_serial_number as card_serial_number ,sum(amount*0.01)as TXN_VALUE,
                TO_CHAR(TO_TIMESTAMP(SUBSTR(txn_date_time,0,8), 'DDMMYYYY HH:MI:SS'),'DDMMYYYY') as TESCO_TXN_DATE_TIME_NEW                       
                ,SP_SHOP_ID AS TESCO_SP_ID                  
                from bss_reports.TESCO_DATA_FILE 
                where SUBSTR(SUBSTR(txn_date_time,0,8),5,5)||SUBSTR(SUBSTR(txn_date_time,0,8),3,2)||SUBSTR(SUBSTR(txn_date_time,0,8),1,2)
                between to_char((reports.bkk_int_dfv.getlastmonthfirsdate),'YYYYMMDD')  and  to_char((reports.bkk_int_dfv.getlastmonthlastdate(sysdate)),'YYYYMMDD')
                --and  SUBSTR(txn_date_time,9,14) > '223000'
                --and card_serial_number = '088002770545'
                group by card_serial_number ,
                  TO_CHAR(TO_TIMESTAMP(SUBSTR(txn_date_time,0,8), 'DDMMYYYY HH:MI:SS'),'DDMMYYYY')           
                  ,SP_SHOP_ID
                       )
                 group by card_serial_number,TESCO_TXN_DATE_TIME_NEW,TESCO_SP_ID           
         ) b

    on a.card_serial_number= b.card_serial_number 
    and a.txn_date_time1 = b.TESCO_TXN_DATE_TIME_NEW
    and a.CCH_Location_ID= b.tesco_sp_id        

)

    union 


 select 
CCH_CARD_SERIAL_NUMBER as RABBIT_CARD,
CCH_TXN_VALUE AS RABBIT_VALUE,
CCH_TXN_DATE_TIME_NEW AS RABBIT_DATE,
CCH_Location_ID AS RABBIT_lOCATION_ID,
--CCH_Location_Name AS RABBIT_LOCATION_NAME,
case when CCH_Location_Name like '%,%' then Replace(CCH_Location_Name,',') else CCH_Location_Name end as RABBIT_LOCATION_NAME,
TESCO_CARD_SERIAL_NUMBER AS TESCO_CARD,
TESCO_TXN_VALUE AS TESCO_VALUE,
TESCO_TXN_DATE_TIME_NEW as TESCO_DATE ,
TESCO_SP_ID AS TESCO_ID ,
MATCH,
case when MATCH = 'Yes' and CCH_CARD_SERIAL_NUMBER = TESCO_CARD_SERIAL_NUMBER and CCH_TXN_VALUE = TESCO_TXN_VALUE and CCH_Location_ID=TESCO_SP_ID then 'MAP COMPLETE' 
     when MATCH = 'No'  and CCH_CARD_SERIAL_NUMBER = TESCO_CARD_SERIAL_NUMBER and CCH_TXN_VALUE <> TESCO_TXN_VALUE and CCH_Location_ID=TESCO_SP_ID then 'VALUE UNMATCH'     
     when MATCH = 'No'  and CCH_CARD_SERIAL_NUMBER is null and TESCO_CARD_SERIAL_NUMBER is not null  then 'NO_RD_TXN'
     when MATCH = 'No'  and CCH_CARD_SERIAL_NUMBER is not null  and TESCO_CARD_SERIAL_NUMBER is null  then 'NO_DATAFILE_TXN'
else 'null' end as  Status_TXN
from (
    select a.card_serial_number as CCH_CARD_SERIAL_NUMBER,
    a.TXN_VALUE as CCH_TXN_VALUE,
    a.txn_date_time1 as CCH_TXN_DATE_TIME_NEW,
    --a.TXN_DATE_OLD as TXN_DATE_OLD ,
    --a.CCH_SETTLEMENT_DATE as CCH_SETTLEMENT_DATE,
    a.CCH_Location_ID as CCH_Location_ID,
    Location_Name as  CCH_Location_Name,
    b.card_serial_number as TESCO_CARD_SERIAL_NUMBER,
    b.txn_value as TESCO_TXN_VALUE,
    --b.TESCO_TXN_DATE_TIME_OLD as TESCO_TXN_DATE_TIME_OLD,
    b.TESCO_TXN_DATE_TIME_NEW as TESCO_TXN_DATE_TIME_NEW,
    b.tesco_sp_id as TESCO_SP_ID, 
    case when a.TXN_VALUE - b.txn_value = 0 then 'Yes' else 'No' end as MATCH 
    from
  (
            ( 
                select card_serial_number,sum(TXN_VALUE) as TXN_VALUE,TESCO_TXN_DATE_TIME_NEW,TESCO_SP_ID
                from (
                select card_serial_number as card_serial_number ,sum(amount*0.01)as TXN_VALUE,
                TO_CHAR(TO_TIMESTAMP(SUBSTR(txn_date_time,0,8), 'DDMMYYYY HH:MI:SS'),'DDMMYYYY') as TESCO_TXN_DATE_TIME_NEW                   
                ,SP_SHOP_ID AS TESCO_SP_ID                  
                from bss_reports.TESCO_DATA_FILE 
                where SUBSTR(SUBSTR(txn_date_time,0,8),5,5)||SUBSTR(SUBSTR(txn_date_time,0,8),3,2)||SUBSTR(SUBSTR(txn_date_time,0,8),1,2) 
                between  to_char((reports.bkk_int_dfv.getlastmonthfirsdate),'YYYYMMDD')  and  to_char((reports.bkk_int_dfv.getlastmonthlastdate(sysdate)),'YYYYMMDD')
                --and  SUBSTR(txn_date_time,9,14) > '223000'
                --and card_serial_number = '088002770545'
                group by card_serial_number ,
                  TO_CHAR(TO_TIMESTAMP(SUBSTR(txn_date_time,0,8), 'DDMMYYYY HH:MI:SS'),'DDMMYYYY')        
                  ,SP_SHOP_ID
                       )
                 group by card_serial_number,TESCO_TXN_DATE_TIME_NEW,TESCO_SP_ID           
            ) b


left join

(    -- Rabbit TXN
                select  card_serial_number,sum(txn_value) as TXN_VALUE,txn_date_time1,CCH_Location_ID,Location_Name
                from BSS_REPORTS.rb_txn_tesco 
                where txn_date_time_new2 between to_char((reports.bkk_int_dfv.getlastmonthfirsdate),'YYYYMMDD')  and  to_char((reports.bkk_int_dfv.getlastmonthlastdate(sysdate)),'YYYYMMDD')
                and settlement_date between TRUNC(reports.bkk_int_dfv.getlastmonthfirsdate) and TRUNC(reports.bkk_int_dfv.getlastmonthlastdate(sysdate))
                group by card_serial_number,txn_date_time1,CCH_Location_ID,Location_Name                                              
 )a           
    on a.card_serial_number= b.card_serial_number 
    and a.txn_date_time1 = b.TESCO_TXN_DATE_TIME_NEW
    and a.CCH_Location_ID= b.tesco_sp_id  
    )
    )
order by RABBIT_DATE
;
                              
            loop
              fetch detail
              INTO 
                V_RABBIT_CARD,
                V_RABBIT_VALUE,
                V_RABBIT_DATE,
                V_RABBIT_lOCATION_ID,
                V_RABBIT_LOCATION_NAME,
                V_TESCO_CARD,
                V_TESCO_VALUE,
                V_TESCO_DATE,
                V_TESCO_ID,
                V_MATCH,
                V_Status_TXN;

              
              exit
            WHEN detail%notfound;
             
              v_log := V_RABBIT_CARD||','||V_RABBIT_VALUE||','||V_RABBIT_DATE||','||V_RABBIT_lOCATION_ID||','||V_RABBIT_LOCATION_NAME||','||V_TESCO_CARD||','||V_TESCO_VALUE||','||V_TESCO_DATE||','||V_TESCO_ID||','||V_MATCH||','||V_Status_TXN||chr(13);
              
              utl_file.put_line(fhandle, v_log);
              utl_file.fflush(fhandle);
              
            END loop ;
            CLOSE detail;

            utl_file.fclose(fhandle);
          END;
          
         --send mail--
           DECLARE
          smtpservername VARCHAR2(200);
          sender VARCHAR2(200);
          recipient VARCHAR2(250);
          ccrecipient VARCHAR2(250);
          bccrecipient VARCHAR2(250);
          subject VARCHAR2(250);
          BODY VARCHAR2(250);
          errormessage VARCHAR2(250);
          attachments sendmailjpkg.attachments_list;
          v_return NUMBER;
          v_date date;
         
          BEGIN
          
            SELECT to_char(SYSDATE,'dd-MON-yyyy')
              INTO v_date
              FROM dual;
            dbms_java.grant_permission( 'BSS', 'SYS:java.io.FilePermission', '/export/home/bssuser/dba_directory/PL_SQL/EX_DATA/RECONCILITION_RABBIT_vs_TESCO_'|| to_char(SYSDATE,'DD-MON-YYYY') || '.csv', 'read' );
            COMMIT;
            smtpservername := '127.0.0.1';
            sender := 'be@rabbit.co.th';
           -- recipient := 'sirayaporn.srimuenval@tesco.com,chaturong.wichai@tesco.com,Duangjai.Saenhom@tesco.com';
            recipient := 'be@rabbit.co.th,project@rabbit.co.th,netiyao@rabbit.co.th,arrakp@rabbit.co.th,waressaras@rabbit.co.th,pimnadap@rabbit.co.th,anuchan@rabbit.co.th,sarana@rabbit.co.th';
          --  ccrecipient := 'be@rabbit.co.th,project@rabbit.co.th,netiyao@rabbit.co.th,arrakp@rabbit.co.th,waressaras@rabbit.co.th,pimnadap@rabbit.co.th,anuchan@rabbit.co.th,sarana@rabbit.co.th';
           -- ccrecipient := 'be@rabbit.co.th';
            bccrecipient := NULL;
            subject := 'RECONCILITION RABBIT vs TESCO(Monthly) ' || to_char(SYSDATE, 'YYYYMMDD') ;
            BODY := 'Dear All,' || chr(13) || chr(13) ||
        
                        'Monthly data comapare ' || to_char(SYSDATE, 'YYYYMMDD') || ' as attached.' || chr(13) || chr(13) ||
                       
        
                      'Best Regards,'|| chr(13) 
                      ;
            -- Modify the code to initialize the variable
             attachments := sendmailjpkg.attachments_list('/export/home/bssuser/dba_directory/PL_SQL/EX_DATA/RECONCILITION_RABBIT_vs_TESCO_'|| to_char(SYSDATE,'DD-MON-YYYY') || '.csv');
              v_return := sendmailjpkg.sendmail(
              smtpservername => smtpservername,
              sender => sender,
              recipient => recipient,
              ccrecipient => ccrecipient,
              bccrecipient => bccrecipient,
              subject => subject,
              BODY => BODY,
              errormessage => errormessage,
              attachments => attachments
            );
            
          END; 
END MONTHLY_TESCO_COMPARE;

 
 PROCEDURE CARD_ISSUE_NOT_KYC
    AS 

    BEGIN
          
           DECLARE
        
          fhandle utl_file.file_type;
          v_date VARCHAR2(11);
          TYPE gencurtyp IS REF CURSOR;
              detail gencurtyp;
              v_log  VARCHAR2(1000);
              v_header_rec VARCHAR2(1000);
             
              V_CARD_SERIAL_NUMBER VARCHAR2(100);
              V_CARD_TYPE VARCHAR2(100);
              V_TXN_TYPE VARCHAR2(100);
              V_TXN_DATE_TIME date;
              V_EQUIPMENT_NUMBER VARCHAR2(50);
              V_LOCATION_NAME VARCHAR2(100);
             -- v_check_txn       NUMBER;
              
              
--cursor NOT_KYC is
            BEGIN
              ----get settlement_date ----
              SELECT to_char(SYSDATE,'DD-MON-YYYY')
              INTO v_date
              FROM dual;
            ---------------------------
            fhandle :=utl_file.fopen('EX_DATA_BE','CARD_ISSUE_NOT_KYC_'|| v_date || '.csv','w');--Opening a file
            
            -------------- HEADER ----------------
            SELECT ' CARD_SERIAL_NUMBER,CARD_TYPE,TXN_TYPE ,TXN_DATE_TIME,EQUIPMENT_NUMBER,LOCATION_NAME' AS HEADER
            INTO v_header_rec
            FROM dual ;
            --------------END HEADER ----------------
            --------------WRITE HEADER---------------
            v_log := v_header_rec ||chr(13);
            utl_file.put_line(fhandle, v_log);
            -----------------------------------------
OPEN detail FOR 
                
select CARD_SERIAL_NUMBER,
CARD_TYPE,
TXN_TYPE,TXN_DATE_TIME,EQUIPMENT_NUMBER,LOCATION_NAME
from (
select a.card_serial_number,
reports.bkk_int_fun.getpassengertype(aa.passenger_Type,a.data_version,'EN') AS CARD_TYPE,
a.settlement_date,a.ud_subtype,
to_date(RP_STD.TOLOCALTIME(TXN_DATE_TIME),'DD-MON-YY HH24:MI:SS') AS TXN_DATE_TIME
,L.location_name,a.equipment_number,REPORTS.BKK_INT_FUN.GETTRANSACTIONDESC (a.UD_TYPE,a.UD_SUBTYPE) AS TXN_TYPE 
FROM CUT_CI_MAINTENANCE a
left join SYSCD_LOCATION L on (to_number(substr(to_char(a.device_location,'XXXXXXXX'),-6,6),'XXXXXXXX')=L.location_code) and (a.source_participant_id=L.participant_id) and (a.DATA_VERSION=L.DATA_VERSION) and (L.location_type in (9,15,16,21))  
left join SYSTEMCD.SYSCD_TXN T on (a.DATA_VERSION=T.DATA_VERSION) AND (a.UD_TYPE=T.TXN_TYPE) AND  (a.UD_SUBTYPE=T.TXN_SUBTYPE)
left join application_account aa on a.card_serial_number = aa.csc_serial_number and a.CARD_LIFE_CYCLE_COUNT = aa.csc_lifecycle_count
left join syscd_passenger_type p on p.passenger_type = a.card_uid and p.data_version = a.data_version
where a.ud_type = 1 and a.ud_subtype =3
and a.source_participant_id = 1 
and cch_txn_approved = 'Y'
and a.settlement_date = TRUNC(SYSDATE-1) 
and not  exists ( select  'x'  from ATUAGENT.atu_personalise_detail atu
              where substr(atu.bss_card_number,4,9) = lpad(a.card_serial_number,9,'0')
              and trunc(atu.time_loaded) >= TRUNC(SYSDATE-10))
and  not exists  (select 'a' from REGISTRATION.transaction r  where  substr(r.CARD_SERAIL_NUMBER,5,9) = lpad(a.card_serial_number,9,'0') ) 
)
;  

            loop
              fetch detail
              INTO 
               V_CARD_SERIAL_NUMBER ,
               V_CARD_TYPE,
              V_TXN_TYPE ,
              V_TXN_DATE_TIME ,
              V_EQUIPMENT_NUMBER ,
              V_LOCATION_NAME ;
              

              
              exit
            WHEN detail%notfound;
             
              v_log := V_CARD_SERIAL_NUMBER||','||V_CARD_TYPE||','||V_TXN_TYPE||','||V_TXN_DATE_TIME||','||V_EQUIPMENT_NUMBER||','||V_LOCATION_NAME||chr(13);
              
              utl_file.put_line(fhandle, v_log);
              utl_file.fflush(fhandle);
              
            END loop ;
            CLOSE detail;

            utl_file.fclose(fhandle);
          END;
          
   
        DECLARE
        
          fhandle utl_file.file_type;
          v_date VARCHAR2(11);
          TYPE gencurtyp IS REF CURSOR;
              detail gencurtyp;
              v_log  VARCHAR2(1000);
              v_header_rec VARCHAR2(1000);
             
              V_CARD_SERIAL_NUMBER VARCHAR2(100);
              V_TXN_TYPE VARCHAR2(100);
              V_CARD_TYPE VARCHAR2(100);
              V_TXN_DATE_TIME date;
              V_EQUIPMENT_NUMBER VARCHAR2(50);
              V_LOCATION_NAME VARCHAR2(100);
             -- v_check_txn       NUMBER;
              
              

            BEGIN
              ----get settlement_date ----
              SELECT to_char(SYSDATE,'DD-MON-YYYY')
              INTO v_date
              FROM dual;
            ---------------------------
            fhandle :=utl_file.fopen('EX_DATA_BE','CARD_KYC_NOT_RECEIVED_AT_'|| v_date || '.csv','w');--Opening a file
            
            -------------- HEADER ----------------
            SELECT ' CARD_SERIAL_NUMBER,CARD_TYPE,TXN_TYPE ,TXN_DATE_TIME,EQUIPMENT_NUMBER,LOCATION_NAME' AS HEADER
            INTO v_header_rec
            FROM dual ;
            --------------END HEADER ----------------
            --------------WRITE HEADER---------------
            v_log := v_header_rec ||chr(13);
            utl_file.put_line(fhandle, v_log);
            -----------------------------------------
            OPEN detail FOR 
                
            select CARD_SERIAL_NUMBER,CARD_TYPE,TXN_TYPE ,TXN_DATE_TIME,EQUIPMENT_NUMBER,LOCATION_NAME
            from (
            select a.card_serial_number ,
            reports.bkk_int_fun.getpassengertype(aa.passenger_Type,a.data_version,'EN') AS CARD_TYPE,
            a.settlement_date,a.ud_subtype,
            to_date(RP_STD.TOLOCALTIME(TXN_DATE_TIME),'DD-MON-YY HH24:MI:SS') AS TXN_DATE_TIME
            ,L.location_name,a.equipment_number,REPORTS.BKK_INT_FUN.GETTRANSACTIONDESC (a.UD_TYPE,a.UD_SUBTYPE) AS TXN_TYPE 
            FROM CUT_CI_MAINTENANCE a
            left join SYSCD_LOCATION L on (to_number(substr(to_char(a.device_location,'XXXXXXXX'),-6,6),'XXXXXXXX')=L.location_code) and (a.source_participant_id=L.participant_id) and (a.DATA_VERSION=L.DATA_VERSION) and (L.location_type in (9,15,16,21))  
            left join SYSTEMCD.SYSCD_TXN T on (a.DATA_VERSION=T.DATA_VERSION) AND (a.UD_TYPE=T.TXN_TYPE) AND  (a.UD_SUBTYPE=T.TXN_SUBTYPE)
            left join application_account aa on a.card_serial_number = aa.csc_serial_number and a.CARD_LIFE_CYCLE_COUNT = aa.csc_lifecycle_count
            left join syscd_passenger_type p on p.passenger_type = a.card_uid and p.data_version = a.data_version
            where a.ud_type = 1 and a.ud_subtype =3
            and a.source_participant_id = 1 
            and cch_txn_approved = 'Y'
            and a.settlement_date = TRUNC(SYSDATE-1) 
            and   exists  (select 'a' from REGISTRATION.transaction r  where  substr(r.CARD_SERAIL_NUMBER,5,9) = lpad(a.card_serial_number,9,'0') ) 
            and not  exists ( select  'x'  from ATUAGENT.atu_personalise_detail atu
                          where substr(atu.bss_card_number,4,9) = lpad(a.card_serial_number,9,'0')
                          and trunc(atu.time_loaded) >= TRUNC(SYSDATE-10))            
            )
            ;

                              
            loop
              fetch detail
              INTO 
               V_CARD_SERIAL_NUMBER ,
               V_CARD_TYPE,
              V_TXN_TYPE ,
              V_TXN_DATE_TIME ,
              V_EQUIPMENT_NUMBER ,
              V_LOCATION_NAME ;
              

              
              exit
            WHEN detail%notfound;
             
              v_log := V_CARD_SERIAL_NUMBER||','||V_CARD_TYPE||','||V_TXN_TYPE||','||V_TXN_DATE_TIME||','||V_EQUIPMENT_NUMBER||','||V_LOCATION_NAME||chr(13);
              
              utl_file.put_line(fhandle, v_log);
              utl_file.fflush(fhandle);
              
            END loop ;
            CLOSE detail;

            utl_file.fclose(fhandle);
          END;
          
            
         --send mail--
           DECLARE
          smtpservername VARCHAR2(200);
          sender VARCHAR2(200);
          recipient VARCHAR2(250);
          ccrecipient VARCHAR2(250);
          bccrecipient VARCHAR2(250);
          subject VARCHAR2(250);
          BODY VARCHAR2(250);
          errormessage VARCHAR2(250);
          attachments sendmailjpkg.attachments_list;
          v_return NUMBER;
          v_date date;
          card_issue NUMBER;
          card_notkyc NUMBER;
          card_kyc NUMBER;
         
          BEGIN
          
            SELECT to_char(SYSDATE,'dd-MON-yyyy')
              INTO v_date
              FROM dual;
           
           
           select count(a.card_serial_number) into card_issue
            FROM CUT_CI_MAINTENANCE a
            where a.ud_type = 1 and a.ud_subtype =3
            and a.source_participant_id = 1
            and cch_txn_approved = 'Y'
            and a.settlement_date = TRUNC(SYSDATE-1);
           
           select count(distinct CARD_SERIAL_NUMBER) into card_notkyc
            from (select a.card_serial_number FROM CUT_CI_MAINTENANCE a
            where a.ud_type = 1 and a.ud_subtype =3
            and a.source_participant_id = 1 
            and cch_txn_approved = 'Y'
            and a.settlement_date = TRUNC(SYSDATE-1) 
            and not  exists ( select  'x'  from ATUAGENT.atu_personalise_detail atu
                          where substr(atu.bss_card_number,4,9) = lpad(a.card_serial_number,9,'0')
                          and trunc(atu.time_loaded) >= TRUNC(SYSDATE-10))
            and  not exists  (select 'a' from REGISTRATION.transaction r  where  substr(r.CARD_SERAIL_NUMBER,5,9) = lpad(a.card_serial_number,9,'0') ) 
            );
            
            
            select count(distinct CARD_SERIAL_NUMBER) into card_kyc
            from (
            select a.card_serial_number ,a.settlement_date,a.ud_subtype,a.TXN_DATE_TIME 
            ,L.location_name,a.equipment_number,REPORTS.BKK_INT_FUN.GETTRANSACTIONDESC (a.UD_TYPE,a.UD_SUBTYPE) AS TXN_TYPE 
            FROM CUT_CI_MAINTENANCE a
            left join SYSCD_LOCATION L on (to_number(substr(to_char(a.device_location,'XXXXXXXX'),-6,6),'XXXXXXXX')=L.location_code) and (a.source_participant_id=L.participant_id) and (a.DATA_VERSION=L.DATA_VERSION) and (L.location_type in (9,15,16,21))  
            left join SYSTEMCD.SYSCD_TXN T on (a.DATA_VERSION=T.DATA_VERSION) AND (a.UD_TYPE=T.TXN_TYPE) AND  (a.UD_SUBTYPE=T.TXN_SUBTYPE)
            where a.ud_type = 1 and a.ud_subtype =3
            and a.source_participant_id = 1 
            and cch_txn_approved = 'Y'
            and a.settlement_date = TRUNC(SYSDATE-1) 
            and   exists  (select 'a' from REGISTRATION.transaction r  where  substr(r.CARD_SERAIL_NUMBER,5,9) = lpad(a.card_serial_number,9,'0') ) 
            and not  exists ( select  'x'  from ATUAGENT.atu_personalise_detail atu
                          where substr(atu.bss_card_number,4,9) = lpad(a.card_serial_number,9,'0')
                          and trunc(atu.time_loaded) >= TRUNC(SYSDATE-10))            
            )
            ;      
                      
            dbms_java.grant_permission( 'BSS', 'SYS:java.io.FilePermission', '/export/home/bssuser/dba_directory/PL_SQL/EX_DATA/CARD_ISSUE_NOT_KYC_'|| to_char(SYSDATE,'DD-MON-YYYY') || '.csv', 'read' );
            dbms_java.grant_permission( 'BSS', 'SYS:java.io.FilePermission', '/export/home/bssuser/dba_directory/PL_SQL/EX_DATA/CARD_KYC_NOT_RECEIVED_AT_'|| to_char(SYSDATE,'DD-MON-YYYY') || '.csv', 'read' );
            --CARD_KYC_NOT_RECEIVED_AT
            COMMIT;                         
           smtpservername := '127.0.0.1';
            sender := 'be@rabbit.co.th';
            recipient := 'fe@rabbit.co.th,arrakp@rabbit.co.th';
            --recipient := 'sutimak@rabbit.co.th';
            ccrecipient := 'be@rabbit.co.th';
            bccrecipient := NULL;
            subject := 'DAILY CHECK CARD ISSUE NOT KYC_' || to_char(SYSDATE, 'YYYYMMDD') ;
            BODY := 'Dear FE,' || chr(13) || chr(13) ||                              
                        
                        ' Please help to check transaction as attached.' ||chr(13) || chr(13) ||
                        '   card issue at BTS :  ' || card_issue ||chr(13) || chr(13) ||
                        '   card not received AT file :  ' ||card_notkyc || chr(13) || chr(13) ||
                        '   card kyc (not received AT file) :  ' ||card_kyc || chr(13) || chr(13) ||
                      
                      'Best Regards,'|| chr(13) 
                      ;
            -- Modify the code to initialize the variable
            attachments := sendmailjpkg.attachments_list('/export/home/bssuser/dba_directory/PL_SQL/EX_DATA/CARD_ISSUE_NOT_KYC_'|| to_char(SYSDATE,'DD-MON-YYYY') || '.csv',
            '/export/home/bssuser/dba_directory/PL_SQL/EX_DATA/CARD_KYC_NOT_RECEIVED_AT_'|| to_char(SYSDATE,'DD-MON-YYYY') || '.csv');
            
            
            v_return := sendmailjpkg.sendmail(
              smtpservername => smtpservername,
              sender => sender,
              recipient => recipient,
              ccrecipient => ccrecipient,
              bccrecipient => bccrecipient,
              subject => subject,
              BODY => BODY,
              errormessage => errormessage,
              attachments => attachments
            );
            
          END; 

END CARD_ISSUE_NOT_KYC;



PROCEDURE MONTHLY_CARD_ISSUE_NOT_KYC
 AS 

    BEGIN
        /*   
           DECLARE
        
          fhandle utl_file.file_type;
          v_date VARCHAR2(11);
          TYPE gencurtyp IS REF CURSOR;
              detail gencurtyp;
              v_log  VARCHAR2(1000);
              v_header_rec VARCHAR2(1000);
             
              V_CARD_SERIAL_NUMBER VARCHAR2(100);
              V_CARD_TYPE VARCHAR2(100);
              V_TXN_TYPE VARCHAR2(100);
              V_TXN_DATE_TIME date;
              V_EQUIPMENT_NUMBER VARCHAR2(50);
              V_LOCATION_NAME VARCHAR2(100);
             -- v_check_txn       NUMBER;
              
              
--cursor NOT_KYC is
           BEGIN
              ----get settlement_date ----
              SELECT to_char(SYSDATE,'DD-MON-YYYY')
              INTO v_date
              FROM dual;
            ---------------------------
            fhandle :=utl_file.fopen('EX_DATA_BE','CARD_ISSUE_NOT_KYC_'|| v_date || '.csv','w');--Opening a file
            
            -------------- HEADER ----------------
            SELECT ' CARD_SERIAL_NUMBER,CARD_TYPE,TXN_TYPE ,TXN_DATE_TIME,EQUIPMENT_NUMBER,LOCATION_NAME' AS HEADER
            INTO v_header_rec
            FROM dual ;
            --------------END HEADER ----------------
            --------------WRITE HEADER---------------
            v_log := v_header_rec ||chr(13);
            utl_file.put_line(fhandle, v_log);
            -----------------------------------------
OPEN detail FOR 
                
select CARD_SERIAL_NUMBER,
CARD_TYPE,
TXN_TYPE,TXN_DATE_TIME,EQUIPMENT_NUMBER,LOCATION_NAME
from (
select a.card_serial_number,
reports.bkk_int_fun.getpassengertype(aa.passenger_Type,a.data_version,'EN') AS CARD_TYPE,
a.settlement_date,a.ud_subtype,
to_date(RP_STD.TOLOCALTIME(TXN_DATE_TIME),'DD-MON-YY HH24:MI:SS') AS TXN_DATE_TIME
,L.location_name,a.equipment_number,REPORTS.BKK_INT_FUN.GETTRANSACTIONDESC (a.UD_TYPE,a.UD_SUBTYPE) AS TXN_TYPE 
FROM CUT_CI_MAINTENANCE a
left join SYSCD_LOCATION L on (to_number(substr(to_char(a.device_location,'XXXXXXXX'),-6,6),'XXXXXXXX')=L.location_code) and (a.source_participant_id=L.participant_id) and (a.DATA_VERSION=L.DATA_VERSION) and (L.location_type in (9,15,16,21))  
left join SYSTEMCD.SYSCD_TXN T on (a.DATA_VERSION=T.DATA_VERSION) AND (a.UD_TYPE=T.TXN_TYPE) AND  (a.UD_SUBTYPE=T.TXN_SUBTYPE)
left join application_account aa on a.card_serial_number = aa.csc_serial_number and a.CARD_LIFE_CYCLE_COUNT = aa.csc_lifecycle_count
left join syscd_passenger_type p on p.passenger_type = a.card_uid and p.data_version = a.data_version
where a.ud_type = 1 and a.ud_subtype =3
and a.source_participant_id = 1 
and a.settlement_date = TRUNC(SYSDATE-1) 
and not  exists ( select  'x'  from ATUAGENT.atu_personalise_detail atu
              where substr(atu.bss_card_number,4,9) = lpad(a.card_serial_number,9,'0')
              and trunc(atu.time_loaded) >= TRUNC(SYSDATE-10))
and  not exists  (select 'a' from REGISTRATION.transaction r  where  substr(r.CARD_SERAIL_NUMBER,5,9) = lpad(a.card_serial_number,9,'0') ) 
)
;  

            loop
              fetch detail
              INTO 
               V_CARD_SERIAL_NUMBER ,
               V_CARD_TYPE,
              V_TXN_TYPE ,
              V_TXN_DATE_TIME ,
              V_EQUIPMENT_NUMBER ,
              V_LOCATION_NAME ;
              

              
              exit
            WHEN detail%notfound;
             
              v_log := V_CARD_SERIAL_NUMBER||','||V_CARD_TYPE||','||V_TXN_TYPE||','||V_TXN_DATE_TIME||','||V_EQUIPMENT_NUMBER||','||V_LOCATION_NAME||chr(13);
              
              utl_file.put_line(fhandle, v_log);
              utl_file.fflush(fhandle);
              
            END loop ;
            CLOSE detail;

            utl_file.fclose(fhandle);
          END; */
          
   
        DECLARE
        
          fhandle utl_file.file_type;
          v_date VARCHAR2(11);
          TYPE gencurtyp IS REF CURSOR;
              detail gencurtyp;
              v_log  VARCHAR2(1000);
              v_header_rec VARCHAR2(1000);
             
              V_CARD_SERIAL_NUMBER VARCHAR2(100);
              V_TXN_TYPE VARCHAR2(100);
              V_CARD_TYPE VARCHAR2(100);
              V_TXN_DATE_TIME date;
              V_EQUIPMENT_NUMBER VARCHAR2(50);
              V_LOCATION_NAME VARCHAR2(100);
             -- v_check_txn       NUMBER;
              
              

            BEGIN
              ----get settlement_date ----
              SELECT to_char(SYSDATE,'DD-MON-YYYY')
              INTO v_date
              FROM dual;
            ---------------------------
            fhandle :=utl_file.fopen('EX_DATA_BE','MONTHLY_CARD_KYC_NOT_RECEIVED_AT_'|| v_date || '.csv','w');--Opening a file
            
            -------------- HEADER ----------------
            SELECT ' CARD_SERIAL_NUMBER,CARD_TYPE,TXN_TYPE ,TXN_DATE_TIME,EQUIPMENT_NUMBER,LOCATION_NAME' AS HEADER
            INTO v_header_rec
            FROM dual ;
            --------------END HEADER ----------------
            --------------WRITE HEADER---------------
            v_log := v_header_rec ||chr(13);
            utl_file.put_line(fhandle, v_log);
            -----------------------------------------
            OPEN detail FOR 
                
            select CARD_SERIAL_NUMBER,CARD_TYPE,TXN_TYPE ,TXN_DATE_TIME,EQUIPMENT_NUMBER,LOCATION_NAME
            from (
            select a.card_serial_number ,
            reports.bkk_int_fun.getpassengertype(aa.passenger_Type,a.data_version,'EN') AS CARD_TYPE,
            a.settlement_date,a.ud_subtype,
            to_date(RP_STD.TOLOCALTIME(TXN_DATE_TIME),'DD-MON-YY HH24:MI:SS') AS TXN_DATE_TIME
            ,L.location_name,a.equipment_number,REPORTS.BKK_INT_FUN.GETTRANSACTIONDESC (a.UD_TYPE,a.UD_SUBTYPE) AS TXN_TYPE 
            FROM CUT_CI_MAINTENANCE a
            left join SYSCD_LOCATION L on (to_number(substr(to_char(a.device_location,'XXXXXXXX'),-6,6),'XXXXXXXX')=L.location_code) and (a.source_participant_id=L.participant_id) and (a.DATA_VERSION=L.DATA_VERSION) and (L.location_type in (9,15,16,21))  
            left join SYSTEMCD.SYSCD_TXN T on (a.DATA_VERSION=T.DATA_VERSION) AND (a.UD_TYPE=T.TXN_TYPE) AND  (a.UD_SUBTYPE=T.TXN_SUBTYPE)
            left join application_account aa on a.card_serial_number = aa.csc_serial_number and a.CARD_LIFE_CYCLE_COUNT = aa.csc_lifecycle_count
            left join syscd_passenger_type p on p.passenger_type = a.card_uid and p.data_version = a.data_version
            where a.ud_type = 1 and a.ud_subtype =3
            and a.source_participant_id = 1 
            and cch_txn_approved = 'Y'
            and a.settlement_date between reports.bkk_int_dfv.getlastmonthfirsdate and reports.bkk_int_dfv.getlastmonthlastdate(sysdate) --= TRUNC(SYSDATE-1) 
            and   exists  (select 'a' from REGISTRATION.transaction r  where  substr(r.CARD_SERAIL_NUMBER,5,9) = lpad(a.card_serial_number,9,'0') ) 
            and not  exists ( select  'x'  from ATUAGENT.atu_personalise_detail atu
                          where substr(atu.bss_card_number,4,9) = lpad(a.card_serial_number,9,'0')
                          --and trunc(atu.time_loaded) >= TRUNC(SYSDATE-10)
                          )            
            )
            ;

                              
            loop
              fetch detail
              INTO 
                V_CARD_SERIAL_NUMBER ,
                V_CARD_TYPE,
                V_TXN_TYPE ,
                V_TXN_DATE_TIME ,
                V_EQUIPMENT_NUMBER ,
                V_LOCATION_NAME ;
              

              
              exit
            WHEN detail%notfound;
             
              v_log := V_CARD_SERIAL_NUMBER||','||V_CARD_TYPE||','||V_TXN_TYPE||','||V_TXN_DATE_TIME||','||V_EQUIPMENT_NUMBER||','||V_LOCATION_NAME||chr(13);
              
              utl_file.put_line(fhandle, v_log);
              utl_file.fflush(fhandle);
              
            END loop ;
            CLOSE detail;

            utl_file.fclose(fhandle);
          END;
          
            
         --send mail--
           DECLARE
          smtpservername VARCHAR2(200);
          sender VARCHAR2(200);
          recipient VARCHAR2(250);
          ccrecipient VARCHAR2(250);
          bccrecipient VARCHAR2(250);
          subject VARCHAR2(250);
          BODY VARCHAR2(250);
          errormessage VARCHAR2(250);
          attachments sendmailjpkg.attachments_list;
          v_return NUMBER;
          v_date date;
          card_issue NUMBER;
          --card_notkyc NUMBER;
          card_kyc NUMBER;
         
          BEGIN
          
            SELECT to_char(SYSDATE,'dd-MON-yyyy')
              INTO v_date
              FROM dual;
           
           
           select count(a.card_serial_number) into card_issue
            FROM CUT_CI_MAINTENANCE a
            where a.ud_type = 1 and a.ud_subtype =3
            and a.source_participant_id = 1 
            and a.settlement_date between reports.bkk_int_dfv.getlastmonthfirsdate and reports.bkk_int_dfv.getlastmonthlastdate(sysdate); --= TRUNC(SYSDATE-1);
           
           /*select count(distinct CARD_SERIAL_NUMBER) into card_notkyc
            from (select a.card_serial_number FROM CUT_CI_MAINTENANCE a
            where a.ud_type = 1 and a.ud_subtype =3
            and a.source_participant_id = 1 
            and a.settlement_date = TRUNC(SYSDATE-1) 
            and not  exists ( select  'x'  from ATUAGENT.atu_personalise_detail atu
                          where substr(atu.bss_card_number,4,9) = lpad(a.card_serial_number,9,'0')
                          --and trunc(atu.time_loaded) >= TRUNC(SYSDATE-10))
            and  not exists  (select 'a' from REGISTRATION.transaction r  where  substr(r.CARD_SERAIL_NUMBER,5,9) = lpad(a.card_serial_number,9,'0') ) 
            );*/
            
            
            select count(distinct CARD_SERIAL_NUMBER) into card_kyc
            from (
            select a.card_serial_number ,a.settlement_date,a.ud_subtype,a.TXN_DATE_TIME 
            ,L.location_name,a.equipment_number,REPORTS.BKK_INT_FUN.GETTRANSACTIONDESC (a.UD_TYPE,a.UD_SUBTYPE) AS TXN_TYPE 
            FROM CUT_CI_MAINTENANCE a
            left join SYSCD_LOCATION L on (to_number(substr(to_char(a.device_location,'XXXXXXXX'),-6,6),'XXXXXXXX')=L.location_code) and (a.source_participant_id=L.participant_id) and (a.DATA_VERSION=L.DATA_VERSION) and (L.location_type in (9,15,16,21))  
            left join SYSTEMCD.SYSCD_TXN T on (a.DATA_VERSION=T.DATA_VERSION) AND (a.UD_TYPE=T.TXN_TYPE) AND  (a.UD_SUBTYPE=T.TXN_SUBTYPE)
            where a.ud_type = 1 and a.ud_subtype =3
            and a.source_participant_id = 1 
            and cch_txn_approved = 'Y'
            and a.settlement_date between reports.bkk_int_dfv.getlastmonthfirsdate and reports.bkk_int_dfv.getlastmonthlastdate(sysdate) --= TRUNC(SYSDATE-1) 
            and   exists  (select 'a' from REGISTRATION.transaction r  where  substr(r.CARD_SERAIL_NUMBER,5,9) = lpad(a.card_serial_number,9,'0') ) 
            and not  exists ( select  'x'  from ATUAGENT.atu_personalise_detail atu
                          where substr(atu.bss_card_number,4,9) = lpad(a.card_serial_number,9,'0')
                          --and trunc(atu.time_loaded) >= TRUNC(SYSDATE-10)
                          )            
            )
            ;      
                      
            --dbms_java.grant_permission( 'BSS', 'SYS:java.io.FilePermission', '/export/home/bssuser/dba_directory/PL_SQL/EX_DATA/CARD_ISSUE_NOT_KYC_'|| to_char(SYSDATE,'DD-MON-YYYY') || '.csv', 'read' );
            dbms_java.grant_permission( 'BSS', 'SYS:java.io.FilePermission', '/export/home/bssuser/dba_directory/PL_SQL/EX_DATA/MONTHLY_CARD_KYC_NOT_RECEIVED_AT_'|| to_char(SYSDATE,'DD-MON-YYYY') || '.csv', 'read' );
            --CARD_KYC_NOT_RECEIVED_AT
            COMMIT;                         
           smtpservername := '127.0.0.1';
            sender := 'be@rabbit.co.th';
            recipient := 'fe@rabbit.co.th,arrakp@rabbit.co.th';
           -- recipient := 'sutimak@rabbit.co.th';
            ccrecipient := 'be@rabbit.co.th';
            bccrecipient := NULL;
            subject := 'MONTHLY CHECK CARD KYC NOT RECEIVED AT_' || to_char(SYSDATE, 'YYYYMMDD') ;
            BODY := 'Dear FE,' || chr(13) || chr(13) ||                              
                        
                        ' Please help to check transaction as attached.' ||chr(13) || chr(13) ||
                        --'   card issue at BTS :  ' || card_issue ||chr(13) || chr(13) ||
                        --'   card not received AT file :  ' ||card_notkyc || chr(13) || chr(13) ||
                        '   card kyc (not received AT file) :  ' ||card_kyc || chr(13) || chr(13) ||
                      
                      'Best Regards,'|| chr(13) 
                      ;
            -- Modify the code to initialize the variable
            --attachments := sendmailjpkg.attachments_list('/export/home/bssuser/dba_directory/PL_SQL/EX_DATA/CARD_ISSUE_NOT_KYC_'|| to_char(SYSDATE,'DD-MON-YYYY') || '.csv',
            attachments := sendmailjpkg.attachments_list('/export/home/bssuser/dba_directory/PL_SQL/EX_DATA/MONTHLY_CARD_KYC_NOT_RECEIVED_AT_'|| to_char(SYSDATE,'DD-MON-YYYY') || '.csv');
            v_return := sendmailjpkg.sendmail
            (
              smtpservername => smtpservername,
              sender => sender,
              recipient => recipient,
              ccrecipient => ccrecipient,
              bccrecipient => bccrecipient,
              subject => subject,
              BODY => BODY,
              errormessage => errormessage,
              attachments => attachments
            );
            
          END; 

END MONTHLY_CARD_ISSUE_NOT_KYC;



PROCEDURE DAILY_Z101_FOR_FA
    AS 

    BEGIN
          
           DECLARE
        
          fhandle utl_file.file_type;
          v_date VARCHAR2(11);
          TYPE gencurtyp IS REF CURSOR;
              detail gencurtyp;
              v_log  VARCHAR2(1000);
              v_header_rec VARCHAR2(1000);
             
            V_PARTICIPANT VARCHAR2(100);
        V_LOCATION VARCHAR2(250);
        V_RECON_DATE date;
        V_SETTLEMENT_DATE date;
        V_DEIVCE_ID VARCHAR2(100);
        V_OLD_CARD_ID VARCHAR2(100);
        V_OLD_CARD_TYPE VARCHAR2(100);
        V_OLD_CARD_PRODUCT_TYPE VARCHAR2(250);
        V_NEW_CARD_ID VARCHAR2(100);
        V_NEW_CARD_TYPE  VARCHAR2(100);
        V_NEW_CARD_PRODUCT_TYPE VARCHAR2(250);
        V_REPLACEMENT_SERVICE_CHARGE number;
        V_REPLACEMENT_TYPE VARCHAR2(250);
        V_REPLACEMENT_FEE number;
        V_BEFORE_TAX number;
        V_TAX number;
             
         
                         

            BEGIN
              ----get settlement_date ----
              SELECT to_char(SYSDATE-1,'DD-MON-YYYY')
              INTO v_date
              FROM dual;
            ---------------------------
            fhandle :=utl_file.fopen('EX_DATA_BE','DAILY_Z101_FOR_FA_s.'|| v_date || '.csv','w');--Opening a file
            -------------- HEADER ----------------
            SELECT 'PARTICIPANT,LOCATION,RECON_DATE,SETTLEMENT_DATE,DEIVCE_ID,OLD_CARD_ID,OLD_CARD_TYPE,OLD_CARD_PRODUCT_TYPE,NEW_CARD_ID,NEW_CARD_TYPE,NEW_CARD_PRODUCT_TYPE,REPLACEMENT_SERVICE_CHARGE,REPLACEMENT_TYPE,REPLACEMENT_FEE,BEFORE_TAX,TAX' AS HEADER
            INTO v_header_rec
            FROM dual ;
            --------------END HEADER ----------------
            --------------WRITE HEADER---------------
            v_log := v_header_rec ||chr(13);
            utl_file.put_line(fhandle, v_log);
            -----------------------------------------
            OPEN detail FOR 
                
--Daily Z101 for FA .csv --
SELECT 
   rcpm.service_participant_id || '-' || reports.bkk_int_fun.getparticipantname (rcpm.service_participant_id) AS "PARTICIPANT",
   reports.bkk_int_fun.getlocationdesc (
             FLOOR (rcpm.device_location / 16777216) ,
             BITAND (rcpm.device_location, 16777215) ,
             rcpm.service_participant_id,
             NULL
    ) AS "LOCATION",
   rcpm.reconciliation_date as recon_date,
    rcpm.settlement_date,  
    rcpm.device_id || '(' || trim(to_char(rcpm.DEVICE_ID,'XXXXXXXX')) || ')' as "DEIVCE_ID",
    rcpm.old_card_serial_number as "OLD_CARD_ID",
--fix error  
reports.bkk_int_fun.getpassengertype (ao.passenger_type,reports.bkk_int_fun.getdataversion(), 'en') as OLD_CARD_TYPE,
--old product --
                case when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 A'
                      then 'Special Rabbit for Adult - Superman'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 B'
                      then 'Special Rabbit for Adult - Batman'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 C'
                      then 'Special Rabbit for Adult - Wonder Woman'
                      when aa.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 A'
                      then 'Special Rabbit for Student - Justice League'
                      when aa.passenger_type = 5 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Advertising'
                      then 'Standard - Rabbit  Adult  VGI'
                      --change on 30.10.2015--
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 D'
                      then 'Specail Rabbit for Adult - Woodstock Snoopy (D)'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 E'
                      then 'Specail  Rabbit for Adult - Hugs Snoopy (E)'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 F'
                      then 'Specail Rabbit for Adult - Camp Snoopy (F)'
                      -----end change----
                      --change on 16.02.2016--
                       when aa.passenger_type = 8 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Advertising'
                      then 'Standard - Rabbit Adult Advertising Type1'
                      when aa.passenger_type = 9 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Advertising'
                      then 'Standard - Rabbit Student Advertising Type1'
                      when aa.passenger_type = 10 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Advertising'
                      then 'Standard - Rabbit Senior Advertising Type1'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 G'
                      then 'Special Rabbit for Adult - Batman Showdonwn (G)'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 H'
                      then 'Special Rabbit for Adult - The Flash Showdonwn (H)'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 I'
                      then 'Special Rabbit for Adult - Green Lantern Showdonwn (I)'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 J'
                      then 'Special Rabbit for Adult - The Joker Showdonwn (J)'
                      when aa.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 G'
                      then 'Special Rabbit for Student - Bat Moblie Showdonwn (G)'
                      -----end change----
                      --change on 22.04.2016--
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 K'
                      then 'Special Rabbit for Adult - Red Angry Birds Movie (K)'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 L'
                      then 'Special Rabbit for Adult - Bomb Angry Birds Movie (L)'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 M'
                      then 'Special Rabbit for Adult - Chuck Angry Birds Movie (M)'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 N'
                      then 'Special Rabbit for Adult - Pigs Angry Birds Movie (N)'
                      when aa.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 K'
                      then 'Special Rabbit for Student - Red Angry Birds Movie (K)'
                      -----end change----
                       --change on 22.09.2016--
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 O'
                      then 'Special Rabbit for Adult - Hello Kitty Red&Bad Maru (O)'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 P'
                      then 'Special Rabbit for Adult - Hello Kitty Pink&Bad Maru (P)'
                      when aa.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 O'
                      then 'Special Rabbit for Student  - Hello Kitty Std.&Bad Maru(O)'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 Q'
                      then 'Special Rabbit for Adult - Bad Badtz White Kitty&Maru(Q)'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 R'
                      then 'Special Rabbit for Adult - Bad Badtz Black Kitty&Maru (R)'
                      when aa.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 Q'
                      then 'Special Rabbit for Student - Bad Badtz Std. Kitty&Maru (Q)'
                      -----end change----
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 S'
                      then 'Special Rabbit for Adult - Kumamon Red (S)'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 T'
                      then 'Special Rabbit for Adult - Kumamon Black (T)'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 U'
                      then 'Special Rabbit for Adult - Kumamon White (U)'
                      when aa.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 S'
                      then 'Special Rabbit for Student - Kumamon Student (S)'
                      -----end change----
                       when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 V'
                      then 'Special Rabbit for Adult - Gudetama Yellow (V)'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 W'
                      then 'Special Rabbit for Adult - Gudetama White (W)'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 X'
                      then 'Special Rabbit for Adult - Gudetama Lazy (X)'
                      when aa.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 V'
                      then 'Special Rabbit for Student - Gudetama Student (V)'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 250'
                      then 'Special Rabbit for Adult - Snowflake'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 Y'
                      then 'Special Rabbit for Adult - Moomin Mint (Y)'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 Z'
                      then 'Special Rabbit for Adult - Moomin White (Z)'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 AA'
                      then 'Special Rabbit for Adult - Moomin Pink (AA)'
                      when aa.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 Y'
                      then 'Special Rabbit for Student - Moomin and friend (Y)'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 BB'
                      then 'Special Rabbit for Adult - We Bare Bears GRIZZ (BB)'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 CC'
                      then 'Special Rabbit for Adult - We Bare Bears ICEBEAR (CC)'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 DD'
                      then 'Special Rabbit for Adult - We Bare Bears PANDA (DD)'
                      when aa.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 BB'
                      then 'Special Rabbit for Student - We Bare Bears STUDENT (BB)'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 350 A'
                      then 'Special Rabbit for Adult - Gundam Blue (A)'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 350 B'
                      then 'Special Rabbit for Adult - Zaku Red (B)'      
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 100 (A)'
                      then 'Special Rabbit for Adult - Cony (100 A)'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 100 (B)'
                      then 'Special Rabbit for Adult - Brown (100 B)'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 100 (C)'
                      then 'Special Rabbit for Adult - Choco (100 C)'
                      when aa.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 100 (A)'
                      then 'Special Rabbit for Student - Moon Green (100 A)'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 EE'
                      then 'Special Rabbit for Adult - Sesame Street White (EE)'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 FF'
                      then 'Special Rabbit for Adult - Sesame Street Blue (FF)'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 GG'
                      then 'Special Rabbit for Adult - Sesame Street Black (GG)'
                      when aa.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 EE'
                      then 'Special Rabbit for Student - Sesame Street Student (EE)'
                      --change on 31.05.2019--      
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 100 (D)'
                      then 'Special Rabbit for Adult - Nude Pink 100 (D)'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 100 (E)'
                      then 'Special Rabbit for Adult - Sky Blue 100 (E)'
                      when aa.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 100 (D)'
                      then 'Special Rabbit for Student - Light Green 100 (D)'
                       --change on 01.08.2019--
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 HH'
                      then 'Special Rabbit for Adult - Conan Black (HH)'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 II'
                      then 'Special Rabbit for Adult - Conan Blue (II)'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 JJ'
                      then 'Special Rabbit for Adult - Conan White (JJ)'
                      when aa.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 HH'
                      then 'Special Rabbit for Student - Conan Student (HH)'
                       --change on 25.10.2019--
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 269 (A)'
                      then 'Special Rabbit for Adult - Hello Kitty-Pink 269 (A)'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 269 (B)'
                      then 'Special Rabbit for Adult - Hello Kitty-White 269 (B)'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 269 (C)'
                      then 'Special Rabbit for Adult - Hello Kitty-Red 269 (C)'
                      when aa.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 269 (A)'
                      then 'Special Rabbit for Student - Hello Kitty-Pink 269 (A)'
                      --change on 26.02.2020--
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 KK'
                      then 'Special Rabbit for Adult - Pompom Yellow 199 (KK)'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 LL'
                      then 'Special Rabbit for Adult - Pompom Cup 199 (LL)'
                      when aa.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 KK'
                      then 'Special Rabbit for Student - Pompom Yellow Student 199 (KK)'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 MM'
                      then 'Special Rabbit for Adult - Cinnamon Pool 199 (MM)'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 NN'
                      then 'Special Rabbit for Adult - Cinnamon Blue 199 (NN)'
                      when aa.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 MM'
                      then 'Special Rabbit for Student - Cinnamon Blue Student 199 (MM)'
                      --change on 25.06.2020--
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 OO'
                      then 'Special Rabbit for Adult - My Melody Pink 199 (OO)'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 PP'
                      then 'Special Rabbit for Adult - My Melody Red 199 (PP)'
                      when aa.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 OO'
                      then 'Special Rabbit for Student - My Melody Pink 199 (OO)'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 (QQ)'
                      then 'Special Rabbit for Adult - Little Twin Pink 199 (QQ)'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 (RR)'
                      then 'Special Rabbit for Adult - Little Twin Purple 199 (RR)'
                      when aa.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 (QQ)'
                      then 'Special Rabbit for Student - Little Twin Blue 199 (QQ)'
                      --change on 09.11.2020--
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 299 (A)'
                      then 'Special Rabbit for Adult - Dragon Ball Z Black 299 (A)'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 299 (B)'
                      then 'Special Rabbit for Adult - Dragon Ball Z Blue 299 (B)'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 299 (C)'
                      then 'Special Rabbit for Adult - Dragon Ball Z Purple 299 (C)'
                      -----end change----
                            else bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)  --end as bss_card_type
                      end as OLD_CARD_PRODUCT_TYPE,
-- New card--      
rcpm.card_serial_number  as "NEW_CARD_ID",
reports.bkk_int_fun.getpassengertype(aa.passenger_type) as NEW_CARD_TYPE,
--fix error at Test 
   case when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 A'
      then 'Special Rabbit for Adult - Superman'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 B'
      then 'Special Rabbit for Adult - Batman'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 C'
      then 'Special Rabbit for Adult - Wonder Woman'
      when aa.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 A'
      then 'Special Rabbit for Student - Justice League'
      when aa.passenger_type = 5 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Advertising'
      then 'Standard - Rabbit  Adult  VGI'
      --change on 30.10.2015--
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 D'
      then 'Specail Rabbit for Adult - Woodstock Snoopy (D)'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 E'
      then 'Specail  Rabbit for Adult - Hugs Snoopy (E)'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 F'
      then 'Specail Rabbit for Adult - Camp Snoopy (F)'
      -----end change----
      --change on 16.02.2016--
       when aa.passenger_type = 8 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Advertising'
      then 'Standard - Rabbit Adult Advertising Type1'
      when aa.passenger_type = 9 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Advertising'
      then 'Standard - Rabbit Student Advertising Type1'
      when aa.passenger_type = 10 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Advertising'
      then 'Standard - Rabbit Senior Advertising Type1'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 G'
      then 'Special Rabbit for Adult - Batman Showdonwn (G)'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 H'
      then 'Special Rabbit for Adult - The Flash Showdonwn (H)'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 I'
      then 'Special Rabbit for Adult - Green Lantern Showdonwn (I)'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 J'
      then 'Special Rabbit for Adult - The Joker Showdonwn (J)'
      when aa.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 G'
      then 'Special Rabbit for Student - Bat Moblie Showdonwn (G)'
      -----end change----
      --change on 22.04.2016--
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 K'
      then 'Special Rabbit for Adult - Red Angry Birds Movie (K)'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 L'
      then 'Special Rabbit for Adult - Bomb Angry Birds Movie (L)'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 M'
      then 'Special Rabbit for Adult - Chuck Angry Birds Movie (M)'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 N'
      then 'Special Rabbit for Adult - Pigs Angry Birds Movie (N)'
      when aa.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 K'
      then 'Special Rabbit for Student - Red Angry Birds Movie (K)'
      -----end change----
       --change on 22.09.2016--
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 O'
      then 'Special Rabbit for Adult - Hello Kitty Red&Bad Maru (O)'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 P'
      then 'Special Rabbit for Adult - Hello Kitty Pink&Bad Maru (P)'
      when aa.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 O'
      then 'Special Rabbit for Student  - Hello Kitty Std.&Bad Maru(O)'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 Q'
      then 'Special Rabbit for Adult - Bad Badtz White Kitty&Maru(Q)'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 R'
      then 'Special Rabbit for Adult - Bad Badtz Black Kitty&Maru (R)'
      when aa.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 Q'
      then 'Special Rabbit for Student - Bad Badtz Std. Kitty&Maru (Q)'
      -----end change----
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 S'
      then 'Special Rabbit for Adult - Kumamon Red (S)'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 T'
      then 'Special Rabbit for Adult - Kumamon Black (T)'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 U'
      then 'Special Rabbit for Adult - Kumamon White (U)'
      when aa.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 S'
      then 'Special Rabbit for Student - Kumamon Student (S)'
      -----end change----
       when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 V'
      then 'Special Rabbit for Adult - Gudetama Yellow (V)'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 W'
      then 'Special Rabbit for Adult - Gudetama White (W)'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 X'
      then 'Special Rabbit for Adult - Gudetama Lazy (X)'
      when aa.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 V'
      then 'Special Rabbit for Student - Gudetama Student (V)'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 250'
      then 'Special Rabbit for Adult - Snowflake'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 Y'
      then 'Special Rabbit for Adult - Moomin Mint (Y)'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 Z'
      then 'Special Rabbit for Adult - Moomin White (Z)'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 AA'
      then 'Special Rabbit for Adult - Moomin Pink (AA)'
      when aa.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 Y'
      then 'Special Rabbit for Student - Moomin and friend (Y)'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 BB'
      then 'Special Rabbit for Adult - We Bare Bears GRIZZ (BB)'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 CC'
      then 'Special Rabbit for Adult - We Bare Bears ICEBEAR (CC)'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 DD'
      then 'Special Rabbit for Adult - We Bare Bears PANDA (DD)'
      when aa.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 BB'
      then 'Special Rabbit for Student - We Bare Bears STUDENT (BB)'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 350 A'
      then 'Special Rabbit for Adult - Gundam Blue (A)'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 350 B'
      then 'Special Rabbit for Adult - Zaku Red (B)'      
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 100 (A)'
      then 'Special Rabbit for Adult - Cony (100 A)'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 100 (B)'
      then 'Special Rabbit for Adult - Brown (100 B)'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 100 (C)'
      then 'Special Rabbit for Adult - Choco (100 C)'
      when aa.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 100 (A)'
      then 'Special Rabbit for Student - Moon Green (100 A)'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 EE'
      then 'Special Rabbit for Adult - Sesame Street White (EE)'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 FF'
      then 'Special Rabbit for Adult - Sesame Street Blue (FF)'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 GG'
      then 'Special Rabbit for Adult - Sesame Street Black (GG)'
      when aa.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 EE'
      then 'Special Rabbit for Student - Sesame Street Student (EE)'
      --change on 31.05.2019--      
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 100 (D)'
      then 'Special Rabbit for Adult - Nude Pink 100 (D)'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 100 (E)'
      then 'Special Rabbit for Adult - Sky Blue 100 (E)'
      when aa.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 100 (D)'
      then 'Special Rabbit for Student - Light Green 100 (D)'
       --change on 01.08.2019--
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 HH'
      then 'Special Rabbit for Adult - Conan Black (HH)'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 II'
      then 'Special Rabbit for Adult - Conan Blue (II)'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 JJ'
      then 'Special Rabbit for Adult - Conan White (JJ)'
      when aa.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 HH'
      then 'Special Rabbit for Student - Conan Student (HH)'
       --change on 25.10.2019--
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 269 (A)'
      then 'Special Rabbit for Adult - Hello Kitty-Pink 269 (A)'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 269 (B)'
      then 'Special Rabbit for Adult - Hello Kitty-White 269 (B)'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 269 (C)'
      then 'Special Rabbit for Adult - Hello Kitty-Red 269 (C)'
      when aa.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 269 (A)'
      then 'Special Rabbit for Student - Hello Kitty-Pink 269 (A)'
      --change on 26.02.2020--
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 KK'
      then 'Special Rabbit for Adult - Pompom Yellow 199 (KK)'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 LL'
      then 'Special Rabbit for Adult - Pompom Cup 199 (LL)'
      when aa.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 KK'
      then 'Special Rabbit for Student - Pompom Yellow Student 199 (KK)'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 MM'
      then 'Special Rabbit for Adult - Cinnamon Pool 199 (MM)'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 NN'
      then 'Special Rabbit for Adult - Cinnamon Blue 199 (NN)'
      when aa.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 MM'
      then 'Special Rabbit for Student - Cinnamon Blue Student 199 (MM)'
      --change on 25.06.2020--
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 OO'
      then 'Special Rabbit for Adult - My Melody Pink 199 (OO)'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 PP'
      then 'Special Rabbit for Adult - My Melody Red 199 (PP)'
      when aa.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 OO'
      then 'Special Rabbit for Student - My Melody Pink 199 (OO)'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 (QQ)'
      then 'Special Rabbit for Adult - Little Twin Pink 199 (QQ)'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 (RR)'
      then 'Special Rabbit for Adult - Little Twin Purple 199 (RR)'
      when aa.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 (QQ)'
      then 'Special Rabbit for Student - Little Twin Blue 199 (QQ)'
      --change on 09.11.2020--
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 299 (A)'
      then 'Special Rabbit for Adult - Dragon Ball Z Black 299 (A)'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 299 (B)'
      then 'Special Rabbit for Adult - Dragon Ball Z Blue 299 (B)'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 299 (C)'
      then 'Special Rabbit for Adult - Dragon Ball Z Purple 299 (C)'
      -----change on 23.07.2021----
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 159 (A)'
      then 'Special Rabbit for Adult - Doraemon 159 (A)'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 159 (B)'
      then 'Special Rabbit for Adult - Doraemon & Nobita 159 (B)'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 159 (C)'
      then 'Special Rabbit for Adult - Doraemon Group 159 (C)'
      ------ end change ----
      else bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type) --end as bss_card_type
      end as "NEW_CARD_PRODUCT_TYPE",      

                   
       h.transaction_value/100 + partial_transaction_value1/100 as  Replacement_Service_Charge,
    case
    when partial_transaction_value1/100 > 0 and partial_transaction_value2 = 0 then 'DISCOUNT'
    when partial_transaction_value2 = 1 then 'WAIVE'
    else 'NOT WAIVE' end as Replacement_type,
 h.transaction_value/100 as "REPLACEMENT_FEE",
 Round((( h.transaction_value/100)/1.07),2) as BEFORE_TAX,
   Round((Round((( h.transaction_value/100)/1.07),2)*7/100),2) as TAX   
    FROM rv_cut_ci_maintenance rccm,
        rv_cut_pi_maintenance rcpm,CUT.cut_cardholder_fee h,
        application.application_account aa,application.application_account ao,
        CARD.card_account ca,CARD.card_account caa,
        PRODUCT.product_account pa,PRODUCT.product_account paa
    WHERE rcpm.settlement_date = TRUNC(SYSDATE-1) --AND vEndDate
    AND (rcpm.ud_type = 3 AND rcpm.ud_subtype IN (62, 63)) -- purse and multiride replace
    AND (rccm.ud_type = 1 AND rccm.ud_subtype = 13) -- card replace
    AND rccm.iss_txn_reflection = 'N'
    AND rcpm.iss_txn_reflection = 'N'
    and pa.prod_type = 256 and paa.prod_type = 256
    AND rcpm.card_serial_number = rccm.card_serial_number
    AND rcpm.old_card_serial_number = ca.csc_serial_number
    AND rcpm.card_serial_number = caa.csc_serial_number
    AND rcpm.old_card_serial_number = pa.csc_serial_number
    AND rcpm.card_serial_number = paa.csc_serial_number
    AND rcpm.card_life_cycle_count = rccm.card_life_cycle_count
    AND rcpm.card_issuer_id = rccm.card_issuer_id
    AND rcpm.card_type = rccm.card_type
    AND rcpm.card_serial_number = aa.csc_serial_number
    AND rcpm.card_life_cycle_count = aa.csc_lifecycle_count
    AND rcpm.card_issuer_id = aa.csc_issuer_id
    AND rcpm.card_type = aa.csc_type
    AND rcpm.card_serial_number = h.card_serial_number
    AND rcpm.card_life_cycle_count = h.card_life_cycle_count
    AND rcpm.card_issuer_id = h.card_issuer_id
    AND rcpm.card_type = h.card_type
    AND ca.csc_serial_number = ao.csc_serial_number
    and h.original_txn_type = 55
    and ca.account_state in  (4)
--    order by rcpm.old_card_serial_number  ;

union

SELECT 
   rcpm.service_participant_id || '-' || reports.bkk_int_fun.getparticipantname (rcpm.service_participant_id) AS "PARTICIPANT",
   reports.bkk_int_fun.getlocationdesc (
             FLOOR (rcpm.device_location / 16777216) ,
             BITAND (rcpm.device_location, 16777215) ,
             rcpm.service_participant_id,
             NULL
    ) AS "LOCATION",
   rcpm.reconciliation_date as recon_date,
    rcpm.settlement_date,  
    rcpm.device_id || '(' || trim(to_char(rcpm.DEVICE_ID,'XXXXXXXX')) || ')' as "DEIVCE_ID",
    rcpm.old_card_serial_number as "OLD_CARD_ID",
--fix error  
reports.bkk_int_fun.getpassengertype (ao.passenger_type,reports.bkk_int_fun.getdataversion(), 'en') as OLD_CARD_TYPE,
--old product --
                case when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 A'
                      then 'Special Rabbit for Adult - Superman'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 B'
                      then 'Special Rabbit for Adult - Batman'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 C'
                      then 'Special Rabbit for Adult - Wonder Woman'
                      when aa.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 A'
                      then 'Special Rabbit for Student - Justice League'
                      when aa.passenger_type = 5 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Advertising'
                      then 'Standard - Rabbit  Adult  VGI'
                      --change on 30.10.2015--
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 D'
                      then 'Specail Rabbit for Adult - Woodstock Snoopy (D)'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 E'
                      then 'Specail  Rabbit for Adult - Hugs Snoopy (E)'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 F'
                      then 'Specail Rabbit for Adult - Camp Snoopy (F)'
                      -----end change----
                      --change on 16.02.2016--
                       when aa.passenger_type = 8 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Advertising'
                      then 'Standard - Rabbit Adult Advertising Type1'
                      when aa.passenger_type = 9 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Advertising'
                      then 'Standard - Rabbit Student Advertising Type1'
                      when aa.passenger_type = 10 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Advertising'
                      then 'Standard - Rabbit Senior Advertising Type1'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 G'
                      then 'Special Rabbit for Adult - Batman Showdonwn (G)'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 H'
                      then 'Special Rabbit for Adult - The Flash Showdonwn (H)'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 I'
                      then 'Special Rabbit for Adult - Green Lantern Showdonwn (I)'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 J'
                      then 'Special Rabbit for Adult - The Joker Showdonwn (J)'
                      when aa.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 G'
                      then 'Special Rabbit for Student - Bat Moblie Showdonwn (G)'
                      -----end change----
                      --change on 22.04.2016--
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 K'
                      then 'Special Rabbit for Adult - Red Angry Birds Movie (K)'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 L'
                      then 'Special Rabbit for Adult - Bomb Angry Birds Movie (L)'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 M'
                      then 'Special Rabbit for Adult - Chuck Angry Birds Movie (M)'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 N'
                      then 'Special Rabbit for Adult - Pigs Angry Birds Movie (N)'
                      when aa.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 K'
                      then 'Special Rabbit for Student - Red Angry Birds Movie (K)'
                      -----end change----
                       --change on 22.09.2016--
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 O'
                      then 'Special Rabbit for Adult - Hello Kitty Red&Bad Maru (O)'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 P'
                      then 'Special Rabbit for Adult - Hello Kitty Pink&Bad Maru (P)'
                      when aa.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 O'
                      then 'Special Rabbit for Student  - Hello Kitty Std.&Bad Maru(O)'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 Q'
                      then 'Special Rabbit for Adult - Bad Badtz White Kitty&Maru(Q)'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 R'
                      then 'Special Rabbit for Adult - Bad Badtz Black Kitty&Maru (R)'
                      when aa.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 Q'
                      then 'Special Rabbit for Student - Bad Badtz Std. Kitty&Maru (Q)'
                      -----end change----
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 S'
                      then 'Special Rabbit for Adult - Kumamon Red (S)'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 T'
                      then 'Special Rabbit for Adult - Kumamon Black (T)'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 U'
                      then 'Special Rabbit for Adult - Kumamon White (U)'
                      when aa.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 S'
                      then 'Special Rabbit for Student - Kumamon Student (S)'
                      -----end change----
                       when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 V'
                      then 'Special Rabbit for Adult - Gudetama Yellow (V)'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 W'
                      then 'Special Rabbit for Adult - Gudetama White (W)'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 X'
                      then 'Special Rabbit for Adult - Gudetama Lazy (X)'
                      when aa.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 V'
                      then 'Special Rabbit for Student - Gudetama Student (V)'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 250'
                      then 'Special Rabbit for Adult - Snowflake'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 Y'
                      then 'Special Rabbit for Adult - Moomin Mint (Y)'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 Z'
                      then 'Special Rabbit for Adult - Moomin White (Z)'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 AA'
                      then 'Special Rabbit for Adult - Moomin Pink (AA)'
                      when aa.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 Y'
                      then 'Special Rabbit for Student - Moomin and friend (Y)'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 BB'
                      then 'Special Rabbit for Adult - We Bare Bears GRIZZ (BB)'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 CC'
                      then 'Special Rabbit for Adult - We Bare Bears ICEBEAR (CC)'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 DD'
                      then 'Special Rabbit for Adult - We Bare Bears PANDA (DD)'
                      when aa.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 BB'
                      then 'Special Rabbit for Student - We Bare Bears STUDENT (BB)'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 350 A'
                      then 'Special Rabbit for Adult - Gundam Blue (A)'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 350 B'
                      then 'Special Rabbit for Adult - Zaku Red (B)'      
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 100 (A)'
                      then 'Special Rabbit for Adult - Cony (100 A)'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 100 (B)'
                      then 'Special Rabbit for Adult - Brown (100 B)'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 100 (C)'
                      then 'Special Rabbit for Adult - Choco (100 C)'
                      when aa.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 100 (A)'
                      then 'Special Rabbit for Student - Moon Green (100 A)'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 EE'
                      then 'Special Rabbit for Adult - Sesame Street White (EE)'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 FF'
                      then 'Special Rabbit for Adult - Sesame Street Blue (FF)'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 GG'
                      then 'Special Rabbit for Adult - Sesame Street Black (GG)'
                      when aa.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 EE'
                      then 'Special Rabbit for Student - Sesame Street Student (EE)'
                      --change on 31.05.2019--      
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 100 (D)'
                      then 'Special Rabbit for Adult - Nude Pink 100 (D)'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 100 (E)'
                      then 'Special Rabbit for Adult - Sky Blue 100 (E)'
                      when aa.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 100 (D)'
                      then 'Special Rabbit for Student - Light Green 100 (D)'
                       --change on 01.08.2019--
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 HH'
                      then 'Special Rabbit for Adult - Conan Black (HH)'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 II'
                      then 'Special Rabbit for Adult - Conan Blue (II)'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 JJ'
                      then 'Special Rabbit for Adult - Conan White (JJ)'
                      when aa.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 HH'
                      then 'Special Rabbit for Student - Conan Student (HH)'
                       --change on 25.10.2019--
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 269 (A)'
                      then 'Special Rabbit for Adult - Hello Kitty-Pink 269 (A)'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 269 (B)'
                      then 'Special Rabbit for Adult - Hello Kitty-White 269 (B)'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 269 (C)'
                      then 'Special Rabbit for Adult - Hello Kitty-Red 269 (C)'
                      when aa.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 269 (A)'
                      then 'Special Rabbit for Student - Hello Kitty-Pink 269 (A)'
                      --change on 26.02.2020--
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 KK'
                      then 'Special Rabbit for Adult - Pompom Yellow 199 (KK)'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 LL'
                      then 'Special Rabbit for Adult - Pompom Cup 199 (LL)'
                      when aa.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 KK'
                      then 'Special Rabbit for Student - Pompom Yellow Student 199 (KK)'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 MM'
                      then 'Special Rabbit for Adult - Cinnamon Pool 199 (MM)'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 NN'
                      then 'Special Rabbit for Adult - Cinnamon Blue 199 (NN)'
                      when aa.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 MM'
                      then 'Special Rabbit for Student - Cinnamon Blue Student 199 (MM)'
                      --change on 25.06.2020--
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 OO'
                      then 'Special Rabbit for Adult - My Melody Pink 199 (OO)'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 PP'
                      then 'Special Rabbit for Adult - My Melody Red 199 (PP)'
                      when aa.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 OO'
                      then 'Special Rabbit for Student - My Melody Pink 199 (OO)'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 (QQ)'
                      then 'Special Rabbit for Adult - Little Twin Pink 199 (QQ)'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 (RR)'
                      then 'Special Rabbit for Adult - Little Twin Purple 199 (RR)'
                      when aa.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 199 (QQ)'
                      then 'Special Rabbit for Student - Little Twin Blue 199 (QQ)'
                      --change on 09.11.2020--
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 299 (A)'
                      then 'Special Rabbit for Adult - Dragon Ball Z Black 299 (A)'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 299 (B)'
                      then 'Special Rabbit for Adult - Dragon Ball Z Blue 299 (B)'
                      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)='Collectible 299 (C)'
                      then 'Special Rabbit for Adult - Dragon Ball Z Purple 299 (C)'
                      -----end change----
                            else bss_reports.pkg_fun.getproductsaledesc(ao.csc_serial_number, ao.csc_issuer_id, ao.csc_lifecycle_count, ao.csc_type)  --end as bss_card_type
                      end as OLD_CARD_PRODUCT_TYPE,
-- New card--      
rcpm.card_serial_number  as "NEW_CARD_ID",
reports.bkk_int_fun.getpassengertype(aa.passenger_type) as NEW_CARD_TYPE,
--fix error at Test 
   case when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 A'
      then 'Special Rabbit for Adult - Superman'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 B'
      then 'Special Rabbit for Adult - Batman'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 C'
      then 'Special Rabbit for Adult - Wonder Woman'
      when aa.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 A'
      then 'Special Rabbit for Student - Justice League'
      when aa.passenger_type = 5 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Advertising'
      then 'Standard - Rabbit  Adult  VGI'
      --change on 30.10.2015--
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 D'
      then 'Specail Rabbit for Adult - Woodstock Snoopy (D)'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 E'
      then 'Specail  Rabbit for Adult - Hugs Snoopy (E)'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 F'
      then 'Specail Rabbit for Adult - Camp Snoopy (F)'
      -----end change----
      --change on 16.02.2016--
       when aa.passenger_type = 8 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Advertising'
      then 'Standard - Rabbit Adult Advertising Type1'
      when aa.passenger_type = 9 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Advertising'
      then 'Standard - Rabbit Student Advertising Type1'
      when aa.passenger_type = 10 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Advertising'
      then 'Standard - Rabbit Senior Advertising Type1'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 G'
      then 'Special Rabbit for Adult - Batman Showdonwn (G)'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 H'
      then 'Special Rabbit for Adult - The Flash Showdonwn (H)'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 I'
      then 'Special Rabbit for Adult - Green Lantern Showdonwn (I)'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 J'
      then 'Special Rabbit for Adult - The Joker Showdonwn (J)'
      when aa.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 G'
      then 'Special Rabbit for Student - Bat Moblie Showdonwn (G)'
      -----end change----
      --change on 22.04.2016--
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 K'
      then 'Special Rabbit for Adult - Red Angry Birds Movie (K)'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 L'
      then 'Special Rabbit for Adult - Bomb Angry Birds Movie (L)'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 M'
      then 'Special Rabbit for Adult - Chuck Angry Birds Movie (M)'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 N'
      then 'Special Rabbit for Adult - Pigs Angry Birds Movie (N)'
      when aa.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 K'
      then 'Special Rabbit for Student - Red Angry Birds Movie (K)'
      -----end change----
       --change on 22.09.2016--
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 O'
      then 'Special Rabbit for Adult - Hello Kitty Red&Bad Maru (O)'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 P'
      then 'Special Rabbit for Adult - Hello Kitty Pink&Bad Maru (P)'
      when aa.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 O'
      then 'Special Rabbit for Student  - Hello Kitty Std.&Bad Maru(O)'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 Q'
      then 'Special Rabbit for Adult - Bad Badtz White Kitty&Maru(Q)'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 R'
      then 'Special Rabbit for Adult - Bad Badtz Black Kitty&Maru (R)'
      when aa.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 Q'
      then 'Special Rabbit for Student - Bad Badtz Std. Kitty&Maru (Q)'
      -----end change----
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 S'
      then 'Special Rabbit for Adult - Kumamon Red (S)'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 T'
      then 'Special Rabbit for Adult - Kumamon Black (T)'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 U'
      then 'Special Rabbit for Adult - Kumamon White (U)'
      when aa.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 S'
      then 'Special Rabbit for Student - Kumamon Student (S)'
      -----end change----
       when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 V'
      then 'Special Rabbit for Adult - Gudetama Yellow (V)'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 W'
      then 'Special Rabbit for Adult - Gudetama White (W)'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 X'
      then 'Special Rabbit for Adult - Gudetama Lazy (X)'
      when aa.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 V'
      then 'Special Rabbit for Student - Gudetama Student (V)'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 250'
      then 'Special Rabbit for Adult - Snowflake'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 Y'
      then 'Special Rabbit for Adult - Moomin Mint (Y)'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 Z'
      then 'Special Rabbit for Adult - Moomin White (Z)'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 AA'
      then 'Special Rabbit for Adult - Moomin Pink (AA)'
      when aa.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 Y'
      then 'Special Rabbit for Student - Moomin and friend (Y)'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 BB'
      then 'Special Rabbit for Adult - We Bare Bears GRIZZ (BB)'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 CC'
      then 'Special Rabbit for Adult - We Bare Bears ICEBEAR (CC)'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 DD'
      then 'Special Rabbit for Adult - We Bare Bears PANDA (DD)'
      when aa.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 BB'
      then 'Special Rabbit for Student - We Bare Bears STUDENT (BB)'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 350 A'
      then 'Special Rabbit for Adult - Gundam Blue (A)'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 350 B'
      then 'Special Rabbit for Adult - Zaku Red (B)'      
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 100 (A)'
      then 'Special Rabbit for Adult - Cony (100 A)'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 100 (B)'
      then 'Special Rabbit for Adult - Brown (100 B)'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 100 (C)'
      then 'Special Rabbit for Adult - Choco (100 C)'
      when aa.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 100 (A)'
      then 'Special Rabbit for Student - Moon Green (100 A)'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 EE'
      then 'Special Rabbit for Adult - Sesame Street White (EE)'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 FF'
      then 'Special Rabbit for Adult - Sesame Street Blue (FF)'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 GG'
      then 'Special Rabbit for Adult - Sesame Street Black (GG)'
      when aa.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 EE'
      then 'Special Rabbit for Student - Sesame Street Student (EE)'
      --change on 31.05.2019--      
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 100 (D)'
      then 'Special Rabbit for Adult - Nude Pink 100 (D)'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 100 (E)'
      then 'Special Rabbit for Adult - Sky Blue 100 (E)'
      when aa.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 100 (D)'
      then 'Special Rabbit for Student - Light Green 100 (D)'
       --change on 01.08.2019--
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 HH'
      then 'Special Rabbit for Adult - Conan Black (HH)'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 II'
      then 'Special Rabbit for Adult - Conan Blue (II)'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 JJ'
      then 'Special Rabbit for Adult - Conan White (JJ)'
      when aa.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 HH'
      then 'Special Rabbit for Student - Conan Student (HH)'
       --change on 25.10.2019--
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 269 (A)'
      then 'Special Rabbit for Adult - Hello Kitty-Pink 269 (A)'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 269 (B)'
      then 'Special Rabbit for Adult - Hello Kitty-White 269 (B)'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 269 (C)'
      then 'Special Rabbit for Adult - Hello Kitty-Red 269 (C)'
      when aa.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 269 (A)'
      then 'Special Rabbit for Student - Hello Kitty-Pink 269 (A)'
      --change on 26.02.2020--
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 KK'
      then 'Special Rabbit for Adult - Pompom Yellow 199 (KK)'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 LL'
      then 'Special Rabbit for Adult - Pompom Cup 199 (LL)'
      when aa.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 KK'
      then 'Special Rabbit for Student - Pompom Yellow Student 199 (KK)'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 MM'
      then 'Special Rabbit for Adult - Cinnamon Pool 199 (MM)'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 NN'
      then 'Special Rabbit for Adult - Cinnamon Blue 199 (NN)'
      when aa.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 MM'
      then 'Special Rabbit for Student - Cinnamon Blue Student 199 (MM)'
      --change on 25.06.2020--
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 OO'
      then 'Special Rabbit for Adult - My Melody Pink 199 (OO)'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 PP'
      then 'Special Rabbit for Adult - My Melody Red 199 (PP)'
      when aa.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 OO'
      then 'Special Rabbit for Student - My Melody Pink 199 (OO)'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 (QQ)'
      then 'Special Rabbit for Adult - Little Twin Pink 199 (QQ)'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 (RR)'
      then 'Special Rabbit for Adult - Little Twin Purple 199 (RR)'
      when aa.passenger_type = 22 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 199 (QQ)'
      then 'Special Rabbit for Student - Little Twin Blue 199 (QQ)'
      --change on 09.11.2020--
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 299 (A)'
      then 'Special Rabbit for Adult - Dragon Ball Z Black 299 (A)'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 299 (B)'
      then 'Special Rabbit for Adult - Dragon Ball Z Blue 299 (B)'
      when aa.passenger_type = 21 and bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type)='Collectible 299 (C)'
      then 'Special Rabbit for Adult - Dragon Ball Z Purple 299 (C)'
      -----end change----
      else bss_reports.pkg_fun.getproductsaledesc(rcpm.card_serial_number, rcpm.card_issuer_id, rcpm.card_life_cycle_count, rcpm.card_type) --end as bss_card_type
      end as "NEW_CARD_PRODUCT_TYPE",      

                   
       h.transaction_value/100 + partial_transaction_value1/100 as  Replacement_Service_Charge,
    case
    when partial_transaction_value1/100 > 0 and partial_transaction_value2 = 0 then 'DISCOUNT'
    when partial_transaction_value2 = 1 then 'WAIVE'
    else 'NOT WAIVE' end as Replacement_type,
 h.transaction_value/100 as "REPLACEMENT_FEE",
 Round((( h.transaction_value/100)/1.07),2) as BEFORE_TAX,
   Round((Round((( h.transaction_value/100)/1.07),2)*7/100),2) as TAX   
    FROM rv_cut_ci_maintenance rccm,
        rv_cut_pi_maintenance rcpm,CUT.cut_cardholder_fee h,
        application.application_account aa,application.application_account ao,
        CARD.card_account ca,CARD.card_account caa,
        PRODUCT.product_account pa,PRODUCT.product_account paa
    WHERE rcpm.settlement_date = TRUNC(SYSDATE-1) --AND vEndDate
    AND (rcpm.ud_type = 3 AND rcpm.ud_subtype IN (62, 63)) -- purse and multiride replace
    AND (rccm.ud_type = 1 AND rccm.ud_subtype = 13) -- card replace
    AND rccm.iss_txn_reflection = 'N'
    AND rcpm.iss_txn_reflection = 'N'
    and pa.prod_type = 256 and paa.prod_type = 256
    AND rcpm.card_serial_number = rccm.card_serial_number
    AND rcpm.old_card_serial_number = ca.csc_serial_number
    AND rcpm.card_serial_number = caa.csc_serial_number
    AND rcpm.old_card_serial_number = pa.csc_serial_number
    AND rcpm.card_serial_number = paa.csc_serial_number
    AND rcpm.card_life_cycle_count = rccm.card_life_cycle_count
    AND rcpm.card_issuer_id = rccm.card_issuer_id
    AND rcpm.card_type = rccm.card_type
    AND rcpm.card_serial_number = aa.csc_serial_number
    AND rcpm.card_life_cycle_count = aa.csc_lifecycle_count
    AND rcpm.card_issuer_id = aa.csc_issuer_id
    AND rcpm.card_type = aa.csc_type
    AND rcpm.card_serial_number = h.card_serial_number
    AND rcpm.card_life_cycle_count = h.card_life_cycle_count
    AND rcpm.card_issuer_id = h.card_issuer_id
    AND rcpm.card_type = h.card_type
    AND ca.csc_serial_number = ao.csc_serial_number
    and h.original_txn_type = 55
    and ca.account_state in  (1,2,3,5,6,7,8)
--    order by rcpm.old_card_serial_number 
;
                              
            loop
              fetch detail
              INTO 
                V_PARTICIPANT,
                V_LOCATION,
                V_RECON_DATE,
                V_SETTLEMENT_DATE,
                V_DEIVCE_ID,
                V_OLD_CARD_ID,
                V_OLD_CARD_TYPE,
                V_OLD_CARD_PRODUCT_TYPE,
                V_NEW_CARD_ID,
                V_NEW_CARD_TYPE,
                V_NEW_CARD_PRODUCT_TYPE,
                V_REPLACEMENT_SERVICE_CHARGE,
                V_REPLACEMENT_TYPE,
                V_REPLACEMENT_FEE,
                V_BEFORE_TAX,
                V_TAX ;

              
              exit
            WHEN detail%notfound;
             
              v_log := V_PARTICIPANT||','||V_LOCATION||','||V_RECON_DATE||','||V_SETTLEMENT_DATE||','||V_DEIVCE_ID||','||V_OLD_CARD_ID||','||V_OLD_CARD_TYPE||','||V_OLD_CARD_PRODUCT_TYPE||','||V_NEW_CARD_ID||','||V_NEW_CARD_TYPE||','||V_NEW_CARD_PRODUCT_TYPE||','||V_REPLACEMENT_SERVICE_CHARGE||','||V_REPLACEMENT_TYPE||','||V_REPLACEMENT_FEE||','||V_BEFORE_TAX||','||V_TAX||chr(13);
              
              utl_file.put_line(fhandle, v_log);
              utl_file.fflush(fhandle);
              
            END loop ;
            CLOSE detail;

            utl_file.fclose(fhandle);
          END;
          
         --send mail--
        DECLARE
          smtpservername VARCHAR2(200);
          sender VARCHAR2(200);
          recipient VARCHAR2(250);
          ccrecipient VARCHAR2(250);
          bccrecipient VARCHAR2(250);
          subject VARCHAR2(250);
          BODY VARCHAR2(250);
          errormessage VARCHAR2(250);
          attachments sendmailjpkg.attachments_list;
          v_return NUMBER;
          v_date date;
         
          BEGIN
          
            SELECT to_char(SYSDATE-1,'dd-MON-yyyy')
              INTO v_date
              FROM dual;
            dbms_java.grant_permission( 'BSS', 'SYS:java.io.FilePermission', '/export/home/bssuser/dba_directory/PL_SQL/EX_DATA/DAILY_Z101_FOR_FA_s.'|| to_char(SYSDATE-1,'DD-MON-YYYY') || '.csv', 'read' );
            COMMIT;
            smtpservername := '127.0.0.1';
            sender := 'be@rabbit.co.th';
            --recipient := 'sirilucks@rabbit.co.th';
           recipient := 'supalerkw@rabbit.co.th,waruntorns@rabbit.co.th';
           ccrecipient := 'be@rabbit.co.th';
            bccrecipient := NULL;
            subject := 'DAILY_Z101_FOR_FA.' || to_char(SYSDATE-1, 'YYYYMMDD') ;
            BODY := 'Dear FA,' || chr(13) || chr(13) ||
        
                        '    DAILY_Z101_FOR_FA s.' || to_char(SYSDATE-1, 'YYYYMMDD') || ' as attached.' || chr(13) || chr(13) ||
        
                      'Best Regards,'|| chr(13) 
                      ;
            -- Modify the code to initialize the variable
             attachments := sendmailjpkg.attachments_list('/export/home/bssuser/dba_directory/PL_SQL/EX_DATA/DAILY_Z101_FOR_FA_s.'|| to_char(SYSDATE-1,'DD-MON-YYYY') || '.csv');
              v_return := sendmailjpkg.sendmail(
              smtpservername => smtpservername,
              sender => sender,
              recipient => recipient,
              ccrecipient => ccrecipient,
              bccrecipient => bccrecipient,
              subject => subject,
              BODY => BODY,
              errormessage => errormessage,
              attachments => attachments
            );
            
          END; 
END DAILY_Z101_FOR_FA;

PROCEDURE Check_value_refund_liab
    AS 

    BEGIN
          
           DECLARE
        
          fhandle utl_file.file_type;
          v_date VARCHAR2(11);
          TYPE gencurtyp IS REF CURSOR;
              detail gencurtyp;
              v_log  VARCHAR2(1000);
              v_header_rec VARCHAR2(1000);
             

             v_csc_serial_number number;
             v_value_refund_liab_write_off number;
             v_closed_off_date date;
              
              
--cursor NOT_KYC is
            BEGIN
              ----get settlement_date ----
              SELECT to_char(SYSDATE,'DD-MON-YYYY')
              INTO v_date
              FROM dual;
            ---------------------------
            fhandle :=utl_file.fopen('EX_DATA_BE','check_value_refund_liab_'|| v_date || '.csv','w');--Opening a file
            
            -------------- HEADER ----------------
            SELECT ' CSC_SERIAL_NUMBER,VALUE_REFUND_LIAB_WRITE_OFF,CLOSED_OFF_DATE' AS HEADER
            INTO v_header_rec
            FROM dual ;
            --------------END HEADER ----------------
            --------------WRITE HEADER---------------
            v_log := v_header_rec ||chr(13);
            utl_file.put_line(fhandle, v_log);
            -----------------------------------------
OPEN detail FOR 
                
select CSC_SERIAL_NUMBER,VALUE_REFUND_LIAB_WRITE_OFF,CLOSED_OFF_DATE from product_account
where  value_refund_liab_write_off < -400000 
and closed_off_date between reports.bkk_int_dfv.getlastmonthfirsdate and reports.bkk_int_dfv.getlastmonthlastdate(sysdate);                            
           
            loop
              fetch detail
              INTO 
             v_csc_serial_number ,
             v_value_refund_liab_write_off ,
             v_closed_off_date ;

              
              exit
            WHEN detail%notfound;
             
              v_log := v_csc_serial_number||','||v_value_refund_liab_write_off||','||v_closed_off_date||chr(13);
              
              utl_file.put_line(fhandle, v_log);
              utl_file.fflush(fhandle);
              
            END loop ;
            CLOSE detail;

            utl_file.fclose(fhandle);
          END;
   
  
         --send mail--
           DECLARE
          smtpservername VARCHAR2(200);
          sender VARCHAR2(200);
          recipient VARCHAR2(250);
          ccrecipient VARCHAR2(250);
          bccrecipient VARCHAR2(250);
          subject VARCHAR2(250);
          BODY VARCHAR2(250);
          errormessage VARCHAR2(250);
          attachments sendmailjpkg.attachments_list;
          v_return NUMBER;
          v_date date;
          card_issue NUMBER;
          card_notkyc NUMBER;
          card_kyc NUMBER;
         
          BEGIN
          
            SELECT to_char(SYSDATE,'dd-MON-yyyy')
              INTO v_date
              FROM dual;
           
           
        /*   select  CSC_SERIAL_NUMBER into  csc_serial_number from product_account
           where  value_refund_liab_write_off < -400000 
           and closed_off_date between reports.bkk_int_dfv.getlastmonthfirsdate and reports.bkk_int_dfv.getlastmonthlastdate(sysdate); 
           
          */                      
            dbms_java.grant_permission( 'BSS', 'SYS:java.io.FilePermission', '/export/home/bssuser/dba_directory/PL_SQL/EX_DATA/check_value_refund_liab_'|| to_char(SYSDATE,'DD-MON-YYYY') || '.csv', 'read' );
            COMMIT;                         
           smtpservername := '127.0.0.1';
            sender := 'be@rabbit.co.th';
            recipient := 'be@rabbit.co.th';
          --  recipient := 'sirilucks@rabbit.co.th';
          --  ccrecipient := 'be@rabbit.co.th';
            bccrecipient := NULL;
            subject := 'Monthly check value refund liab_' || to_char(SYSDATE, 'YYYYMMDD') ;
            BODY := 'Dear BE,' || chr(13) || chr(13) ||                              
                        
                        ' Please help to check transaction as attached.' ||chr(13) || chr(13) ||
                        --'   csc_serial_number :  ' || card_issue ||chr(13) || chr(13) ||
                        
                      
                      'Best Regards,'|| chr(13) 
                      ;
            -- Modify the code to initialize the variable
            attachments := sendmailjpkg.attachments_list('/export/home/bssuser/dba_directory/PL_SQL/EX_DATA/check_value_refund_liab_'|| to_char(SYSDATE,'DD-MON-YYYY') || '.csv');
            
            v_return := sendmailjpkg.sendmail(
              smtpservername => smtpservername,
              sender => sender,
              recipient => recipient,
              ccrecipient => ccrecipient,
              bccrecipient => bccrecipient,
              subject => subject,
              BODY => BODY,
              errormessage => errormessage,
              attachments => attachments
            );
            
          END; 

END Check_value_refund_liab;


PROCEDURE MONTHLY_CARD_INIT_ISSUE_FOR_CM 
    AS 

    BEGIN
          
           DECLARE
        
          fhandle utl_file.file_type;
          v_date VARCHAR2(11);
          TYPE gencurtyp IS REF CURSOR;
              detail gencurtyp;
              v_log  VARCHAR2(1000);
              v_header_rec VARCHAR2(1000);
             
              V_MONTH VARCHAR2(100);
              V_RECONCILIATION_DATE date;
              V_CARD_TYPE VARCHAR2(100);
              V_PASSENGER_TYPE NUMBER(3,0);
              V_TXN_TYPE VARCHAR2(100);
              V_CARD_VOLUME NUMBER; -----NUMBER?
              
              
--Card_INIT
            BEGIN
              ----get settlement_date ----
              SELECT to_char(SYSDATE,'DD-MON-YYYY')
              INTO v_date
              FROM dual;
            ------------FILE NAME---------------
            fhandle :=utl_file.fopen('EX_DATA_BE','CARD_INITIAL_'|| v_date || '.csv','w');--Opening a file ----------NAME
            
            -------------- HEADER ----------------
            SELECT 'MONTH,RECONCILIATION_DATE,CARD_TYPE,PASSENGER_TYPE,TXN_TYPE,CARD_VOLUME,' AS HEADER  -------FIELD HEADER
            INTO v_header_rec
            FROM dual ;
            --------------END HEADER ----------------
            --------------WRITE HEADER---------------
            v_log := v_header_rec ||chr(13);
            utl_file.put_line(fhandle, v_log);
            -----------------------------------------
            
OPEN detail FOR 
                
SELECT MONTH,RECONCILIATION_DATE,CARD_TYPE,PASSENGER_TYPE,TXN_TYPE,CARD_VOLUME
FROM
(select to_char(SETTLEMENT_DATE,'MM-YYYY') as Month
,CUT_ALL.RECONCILIATION_DATE
,p.DESCRIPTION as CARD_TYPE
,CASE WHEN aa.passenger_type IS NOT NULL THEN aa.passenger_type
ELSE cut_all.card_uid END AS passenger_type
,'Card Initialise' as Txn_Type --HARD CODE 'Card Initialise'
,count(distinct CARD_SERIAL_NUMBER) as Card_Volume
from CUT_CI_MAINTENANCE cut_all
left join application_account aa 
on CUT_ALL.card_serial_number = aa.csc_serial_number and CUT_ALL.CARD_LIFE_CYCLE_COUNT = aa.csc_lifecycle_count
left join SYSTEMCD.SYSCD_PASSENGER_TYPE p  
on p.passenger_type = 
CASE WHEN aa.passenger_type IS NOT NULL THEN  aa.passenger_type
     WHEN aa.passenger_type IS NULL THEN  cut_all.card_uid END
and p.data_version = cut_all.data_version
where ud_type = 1 and UD_SUBTYPE in (2,3)
and SETTLEMENT_DATE between reports.bkk_int_dfv.getlastmonthfirsdate   
and reports.bkk_int_dfv.getlastmonthlastdate(sysdate)  
and CUT_ALL.SOURCE_PARTICIPANT_ID = 89
and UD_SUBTYPE = 2  -- Case 'Card Initialise'
group by UD_SUBTYPE,to_char(SETTLEMENT_DATE,'MM-YYYY')
,p.DESCRIPTION,aa.passenger_type
,RECONCILIATION_DATE,cut_all.card_uid 
order by to_char(SETTLEMENT_DATE,'MM-YYYY'),RECONCILIATION_DATE) -- not sure order 
;

            loop
              fetch detail
              INTO             
              V_MONTH,
              V_RECONCILIATION_DATE,
              V_CARD_TYPE,
              V_PASSENGER_TYPE,
              V_TXN_TYPE,
              V_CARD_VOLUME; 
              

              
              exit
            WHEN detail%notfound;
             
              v_log := V_MONTH||','||V_RECONCILIATION_DATE||','||V_CARD_TYPE||','||V_PASSENGER_TYPE||','||V_TXN_TYPE||','||V_CARD_VOLUME||chr(13);
              
              utl_file.put_line(fhandle, v_log);
              utl_file.fflush(fhandle);
              
            END loop ;
            CLOSE detail;

            utl_file.fclose(fhandle);
          END;
          
   
        DECLARE
        
          fhandle utl_file.file_type;
          v_date VARCHAR2(11);
          TYPE gencurtyp IS REF CURSOR;
              detail gencurtyp;
              v_log  VARCHAR2(1000);
              v_header_rec VARCHAR2(1000);
             
              V_MONTH VARCHAR2(100);
              V_RECONCILIATION_DATE date;
              V_CARD_TYPE VARCHAR2(100);
              V_PASSENGER_TYPE NUMBER(3,0);
              V_TXN_TYPE VARCHAR2(100);
              V_CARD_VOLUME NUMBER; -----NUMBER?
                            
--Card_ISSUE
            BEGIN
              ----get settlement_date ----
              SELECT to_char(SYSDATE,'DD-MON-YYYY')
              INTO v_date
              FROM dual;
            -------------FILE NAME--------------
            fhandle :=utl_file.fopen('EX_DATA_BE','CARD_ISSUE_'|| v_date || '.csv','w');--Opening a file -------------FILE NAME
            
            -------------- HEADER ----------------
            SELECT 'MONTH,RECONCILIATION_DATE,CARD_TYPE,PASSENGER_TYPE,TXN_TYPE,CARD_VOLUME,' AS HEADER
            INTO v_header_rec
            FROM dual ;
            --------------END HEADER ----------------
            --------------WRITE HEADER---------------
            v_log := v_header_rec ||chr(13);
            utl_file.put_line(fhandle, v_log);
            -----------------------------------------
            OPEN detail FOR 
                
SELECT MONTH,RECONCILIATION_DATE,CARD_TYPE,PASSENGER_TYPE,TXN_TYPE,CARD_VOLUME
FROM
(select to_char(SETTLEMENT_DATE,'MM-YYYY') as Month
,CUT_ALL.RECONCILIATION_DATE
,p.DESCRIPTION as CARD_TYPE
,CASE WHEN aa.passenger_type IS NOT NULL THEN aa.passenger_type
ELSE cut_all.card_uid END AS passenger_type
,'Card Issue' as Txn_Type --HARD CODE 'Card Issue'
,count(distinct CARD_SERIAL_NUMBER) as Card_Volume
from CUT_CI_MAINTENANCE cut_all
left join application_account aa 
on CUT_ALL.card_serial_number = aa.csc_serial_number and CUT_ALL.CARD_LIFE_CYCLE_COUNT = aa.csc_lifecycle_count
left join SYSTEMCD.SYSCD_PASSENGER_TYPE p  
on p.passenger_type = 
CASE WHEN aa.passenger_type IS NOT NULL THEN  aa.passenger_type
     WHEN aa.passenger_type IS NULL THEN  cut_all.card_uid END
and p.data_version = cut_all.data_version
where ud_type = 1 and UD_SUBTYPE in (2,3)
and SETTLEMENT_DATE between reports.bkk_int_dfv.getlastmonthfirsdate   
and reports.bkk_int_dfv.getlastmonthlastdate(sysdate)  
and CUT_ALL.SOURCE_PARTICIPANT_ID = 89
and UD_SUBTYPE <> 2 -- case 'Card Issue'
group by UD_SUBTYPE,to_char(SETTLEMENT_DATE,'MM-YYYY')
,p.DESCRIPTION,aa.passenger_type
,RECONCILIATION_DATE,cut_all.card_uid  
order by to_char(SETTLEMENT_DATE,'MM-YYYY'),RECONCILIATION_DATE)
;


                              
              loop
              fetch detail
              INTO 
              V_MONTH,
              V_RECONCILIATION_DATE,
              V_CARD_TYPE,
              V_PASSENGER_TYPE,
              V_TXN_TYPE,
              V_CARD_VOLUME;
              

              
              exit
            WHEN detail%notfound;
             
              v_log := V_MONTH||','||V_RECONCILIATION_DATE||','||V_CARD_TYPE||','||V_PASSENGER_TYPE||','||V_TXN_TYPE||','||V_CARD_VOLUME||chr(13);
              
              utl_file.put_line(fhandle, v_log);
              utl_file.fflush(fhandle);
              
            END loop ;
            CLOSE detail;

            utl_file.fclose(fhandle);
          END;
          
            
         --send mail--
           DECLARE
          smtpservername VARCHAR2(200);
          sender VARCHAR2(200);
          recipient VARCHAR2(250);
          ccrecipient VARCHAR2(250);
          bccrecipient VARCHAR2(250);
          subject VARCHAR2(250);
          BODY VARCHAR2(250);
          errormessage VARCHAR2(250);
          attachments sendmailjpkg.attachments_list;
          v_return NUMBER;
          v_date date;
          card_issue NUMBER;
          card_notkyc NUMBER;
          card_kyc NUMBER;
         
          BEGIN
          
            SELECT to_char(SYSDATE,'dd-MON-yyyy')
              INTO v_date
              FROM dual;
           
                                 
            dbms_java.grant_permission( 'BSS', 'SYS:java.io.FilePermission', '/export/home/bssuser/dba_directory/PL_SQL/EX_DATA/CARD_INITIAL_'|| to_char(SYSDATE,'DD-MON-YYYY') || '.csv', 'read' );
            dbms_java.grant_permission( 'BSS', 'SYS:java.io.FilePermission', '/export/home/bssuser/dba_directory/PL_SQL/EX_DATA/CARD_ISSUE_'|| to_char(SYSDATE,'DD-MON-YYYY') || '.csv', 'read' );
            --CARD_KYC_NOT_RECEIVED_AT
            COMMIT;                         
           smtpservername := '127.0.0.1';
            sender := 'be@rabbit.co.th';
            recipient := 'cm@rabbit.co.th';
            --recipient := 'sutimak@rabbit.co.th';
            ccrecipient := 'be@rabbit.co.th';
            bccrecipient := NULL;
            subject := 'MONTHLY REPORT CARD INITIAL AND ISSUE_' || to_char(SYSDATE, 'YYYYMMDD') ;
            BODY := 'Dear CM,' || chr(13) || chr(13) ||                              
                        
                        'Please find attached the monthly report.' ||chr(13) || chr(13) ||
                        --'   csc_serial_number :  ' || card_issue ||chr(13) || chr(13) ||
                        
                      
                      'Best Regards,'|| chr(13) 
                      ;
            -- Modify the code to initialize the variable
            attachments := sendmailjpkg.attachments_list('/export/home/bssuser/dba_directory/PL_SQL/EX_DATA/CARD_INITIAL_'|| to_char(SYSDATE,'DD-MON-YYYY') || '.csv',
            '/export/home/bssuser/dba_directory/PL_SQL/EX_DATA/CARD_ISSUE_'|| to_char(SYSDATE,'DD-MON-YYYY') || '.csv');
            v_return := sendmailjpkg.sendmail(
              smtpservername => smtpservername,
              sender => sender,
              recipient => recipient,
              ccrecipient => ccrecipient,
              bccrecipient => bccrecipient,
              subject => subject,
              BODY => BODY,
              errormessage => errormessage,
              attachments => attachments
            );
            
          END; 

END MONTHLY_CARD_INIT_ISSUE_FOR_CM;
  
  procedure transit_retail_with_crr_mem as
 begin
          
  declare
        fHandle UTL_FILE.FILE_TYPE; 
        v_date varchar2(11);
        TYPE GenCurTyp IS REF CURSOR;
        detail GenCurTyp;
        v_SETTLEMENT_DATE varchar2(100);
        v_CARROT_MEMBER varchar2(100);
        v_TXN_VOLUME number;
        v_CARD_VOLUME  number;
        v_TOTAL_AMOUNT number;  
        v_TOTAL_MEMBER number;
        v_TXN_TYPE varchar2(100);
        v_log varchar2(800);
        v_detail_cur varchar2(11);

      begin
        fHandle :=utl_file.fopen('EX_DATA_BE','transit_and_retail_with_carrot_member_'|| to_char(sysdate-1,'YYYYMMDD') ||'.csv','w');--Opening a file
        
        v_log := 'SETTLEMENT_DATE,CARROT_MEMBER,TXN_VOLUME,CARD_VOLUME,TOTAL_AMOUNT,TOTAL_MEMBER,TXN_TYPE';
        UTL_FILE.PUT_LINE(fHandle, v_log);
      
      -----------------Detail------------------  
      open detail for 

-- Purse use --
select distinct(settlement_date)  AS "SETTLEMENT_DATE"
	, SUMM_TYPE
    ,sum(TOTAL_VOLUMN) as TOTAL_VOLUMN
	, sum(CARD_VOLUME) as CARD_VOLUME
    , sum(TOTAL_AMOUNT) AS "TOTAL_AMOUNT"
    ,TOTAL_MEMBER

    ,case when ud_subtype = 13   then 'Purse Use Retail' end as TXN_TYPE1
from 
(--TRANSIT-SPEND-ALL
 select distinct(settlement_date)  AS "SETTLEMENT_DATE"
	, 'Non-Carrot Member' as "SUMM_TYPE"
	, sum(TOTAL_AMOUNT) AS "TOTAL_AMOUNT"
    ,sum(TOTAL_VOLUMN) as TOTAL_VOLUMN
	,  sum("TXN_COUNT2") as CARD_VOLUME
    ,sum("TOTAL_MEMBER") as TOTAL_MEMBER
    ,ud_subtype
	from (--TRANSIT-TOPUP-NONMEMBER
            SELECT to_char(settlement_date,'DD/MM/YYYY') AS "SETTLEMENT_DATE"
            , ' ' as "SUMM_TYPE"
            , sum(a.transaction_value)/100 AS "TOTAL_AMOUNT"
            ,count( a.transaction_value) AS "TOTAL_VOLUMN"
            ,count(distinct a.card_serial_number) AS "TXN_COUNT2"
            ,count(distinct b.carrot_id) AS "TOTAL_MEMBER"
            ,ud_subtype
            FROM cut.cut_pi_financial a left join carrot.member b
            on a.card_serial_number = b.CARD_SERIAL_NUMBER
            WHERE settlement_date = (select max(settlement_date) FROM CUT.STREAMING_SESSION_HISTORY)-1
            --AND A.CCH_TXN_APPROVED = 'Y'
            and(exception_list IS NULL OR exception_list NOT LIKE '%DDT%')
            AND A.ISS_TXN_REFLECTION = 'N'
            AND UD_TYPE = 3 AND UD_SUBTYPE = 13 
            --AND ((a.ACQUIRER_ID = 11) OR (a.ACQUIRER_ID = 12))
            AND a.ACQUIRER_ID not in (1,4)
            and b.CARD_SERIAL_NUMBER is null
            GROUP BY settlement_date,ud_subtype                                          
            )group by settlement_date,ud_subtype
     union 
     select distinct(settlement_date)  AS "SETTLEMENT_DATE"
	, 'Carrot Member' as "SUMM_TYPE"
	, sum(TOTAL_AMOUNT) AS "TOTAL_AMOUNT"
    ,sum(TOTAL_VOLUMN) as TOTAL_VOLUMN
	,  sum("TXN_COUNT2") as CARD_VOLUME,
    sum("TOTAL_MEMBER") as TOTAL_MEMBER
    ,ud_subtype
	from (--TRANSIT-TOPUP-NONMEMBER
            SELECT to_char(settlement_date,'DD/MM/YYYY') AS "SETTLEMENT_DATE"
            , ' ' as "SUMM_TYPE"
            , sum(a.transaction_value)/100 AS "TOTAL_AMOUNT"
            ,count( a.transaction_value) AS "TOTAL_VOLUMN"
            ,count(distinct a.card_serial_number) AS "TXN_COUNT2"
            ,count(distinct b.carrot_id) AS "TOTAL_MEMBER"
            ,ud_subtype
            FROM cut.cut_pi_financial a left join carrot.member b
            on a.card_serial_number = b.CARD_SERIAL_NUMBER
            WHERE settlement_date = (select max(settlement_date) FROM CUT.STREAMING_SESSION_HISTORY)-1
           -- AND A.CCH_TXN_APPROVED = 'Y'
           and(exception_list IS NULL OR exception_list NOT LIKE '%DDT%')
            AND A.ISS_TXN_REFLECTION = 'N'
            AND UD_TYPE = 3 AND UD_SUBTYPE in (13) 
           -- AND ((a.ACQUIRER_ID = 11) OR (a.ACQUIRER_ID = 12))
           AND a.ACQUIRER_ID not in (1,4)
            AND b.IS_ACTIVE = 'Y'
            GROUP BY settlement_date,ud_subtype                                          
            )group by settlement_date,ud_subtype
            
    ) group by settlement_date,ud_subtype,SUMM_TYPE,TOTAL_MEMBER

union

-- Multiride Use On Exit,Purse Use On Exit  --
select distinct(settlement_date)  AS "SETTLEMENT_DATE"
	, SUMM_TYPE
    ,sum(TOTAL_VOLUMN) as TOTAL_VOLUMN
	, sum(CARD_VOLUME) as CARD_VOLUME
    , sum(TOTAL_AMOUNT) AS "TOTAL_AMOUNT"
    ,TOTAL_MEMBER

    ,case WHEN UD_SUBTYPE = 91   THEN 'Purse Use On Exit'
WHEN UD_SUBTYPE = 93   THEN 'Multiride Use On Exit' end as TXN_TYPE1
from 
(--TRANSIT-SPEND-ALL
 select distinct(settlement_date)  AS "SETTLEMENT_DATE"
	, 'Non-Carrot Member' as "SUMM_TYPE"
	, sum(TOTAL_AMOUNT) AS "TOTAL_AMOUNT"
    ,sum(TOTAL_VOLUMN) as TOTAL_VOLUMN
	,  sum("TXN_COUNT2") as CARD_VOLUME
    ,sum("TOTAL_MEMBER") as TOTAL_MEMBER
    ,ud_subtype
	from (--TRANSIT-TOPUP-NONMEMBER
            SELECT to_char(settlement_date,'DD/MM/YYYY') AS "SETTLEMENT_DATE"
            , ' ' as "SUMM_TYPE"
            , sum(a.transaction_value)/100 AS "TOTAL_AMOUNT"
            ,count( a.transaction_value) AS "TOTAL_VOLUMN"
            ,count(distinct a.card_serial_number) AS "TXN_COUNT2"
            ,count(distinct b.carrot_id) AS "TOTAL_MEMBER"
            ,ud_subtype
            FROM cut.cut_pi_exit a left join carrot.member b
            on a.card_serial_number = b.CARD_SERIAL_NUMBER
            WHERE settlement_date = (select max(settlement_date) FROM CUT.STREAMING_SESSION_HISTORY)-1
           -- AND A.CCH_TXN_APPROVED = 'Y'
            and(exception_list IS NULL OR exception_list NOT LIKE '%DDT%')
            AND A.ISS_TXN_REFLECTION = 'N'
            AND UD_TYPE = 3 AND UD_SUBTYPE in (91,93) 
            AND a.ACQUIRER_ID in (1,4)
            and b.CARD_SERIAL_NUMBER is null
            GROUP BY settlement_date,ud_subtype                                          
            )group by settlement_date,ud_subtype
     union 
     select distinct(settlement_date)  AS "SETTLEMENT_DATE"
	, 'Carrot Member' as "SUMM_TYPE"
	, sum(TOTAL_AMOUNT) AS "TOTAL_AMOUNT"
    ,sum(TOTAL_VOLUMN) as TOTAL_VOLUMN
	,  sum("TXN_COUNT2") as CARD_VOLUME,
    sum("TOTAL_MEMBER") as TOTAL_MEMBER
    ,ud_subtype
	from (--TRANSIT-TOPUP-NONMEMBER
            SELECT to_char(settlement_date,'DD/MM/YYYY') AS "SETTLEMENT_DATE"
            , ' ' as "SUMM_TYPE"
            , sum(a.transaction_value)/100 AS "TOTAL_AMOUNT"
            ,count( a.transaction_value) AS "TOTAL_VOLUMN"
            ,count(distinct a.card_serial_number) AS "TXN_COUNT2"
            ,count(distinct b.carrot_id) AS "TOTAL_MEMBER"
            ,ud_subtype
            FROM cut.cut_pi_exit a left join carrot.member b
            on a.card_serial_number = b.CARD_SERIAL_NUMBER
            WHERE settlement_date = (select max(settlement_date) FROM CUT.STREAMING_SESSION_HISTORY)-1
            --AND A.CCH_TXN_APPROVED = 'Y'
            and(exception_list IS NULL OR exception_list NOT LIKE '%DDT%')
            AND A.ISS_TXN_REFLECTION = 'N'
            AND UD_TYPE = 3 AND UD_SUBTYPE in (91,93) 
            AND a.ACQUIRER_ID in (1,4)
            AND b.IS_ACTIVE = 'Y'
            GROUP BY settlement_date,ud_subtype                                          
            )group by settlement_date,ud_subtype         
    ) group by settlement_date,ud_subtype,SUMM_TYPE,TOTAL_MEMBER

union

-- Purse add transit --
select distinct(settlement_date)  AS "SETTLEMENT_DATE"
	, SUMM_TYPE
    ,sum(TOTAL_VOLUMN) as TOTAL_VOLUMN
	, sum(CARD_VOLUME) as CARD_VOLUME
    , sum(TOTAL_AMOUNT) AS "TOTAL_AMOUNT"
    ,TOTAL_MEMBER

    ,case when ud_subtype = 10   then 'Purse Add Transit' end as TXN_TYPE1
from 
(--TRANSIT-SPEND-ALL
 select distinct(settlement_date)  AS "SETTLEMENT_DATE"
	, 'Non-Carrot Member' as "SUMM_TYPE"
	, sum(TOTAL_AMOUNT) AS "TOTAL_AMOUNT"
    ,sum(TOTAL_VOLUMN) as TOTAL_VOLUMN
	,  sum("TXN_COUNT2") as CARD_VOLUME
    ,sum("TOTAL_MEMBER") as TOTAL_MEMBER
    ,ud_subtype
	from (--TRANSIT-TOPUP-NONMEMBER
            SELECT to_char(settlement_date,'DD/MM/YYYY') AS "SETTLEMENT_DATE"
            , ' ' as "SUMM_TYPE"
            , sum(a.transaction_value)/100 AS "TOTAL_AMOUNT"
            ,count( a.transaction_value) AS "TOTAL_VOLUMN"
            ,count(distinct a.card_serial_number) AS "TXN_COUNT2"
            ,count(distinct b.carrot_id) AS "TOTAL_MEMBER"
            ,ud_subtype
            FROM cut.cut_pi_financial a left join carrot.member b
            on a.card_serial_number = b.CARD_SERIAL_NUMBER
            WHERE settlement_date = (select max(settlement_date) FROM CUT.STREAMING_SESSION_HISTORY)-1
           -- AND A.CCH_TXN_APPROVED = 'Y'
            and(exception_list IS NULL OR exception_list NOT LIKE '%DDT%')
            AND A.ISS_TXN_REFLECTION = 'N'
            AND UD_TYPE = 3 AND UD_SUBTYPE = 10 
            AND a.ACQUIRER_ID in (1,4)
            and b.CARD_SERIAL_NUMBER is null
            GROUP BY settlement_date,ud_subtype                                          
            )group by settlement_date,ud_subtype
     union 
     select distinct(settlement_date)  AS "SETTLEMENT_DATE"
	, 'Carrot Member' as "SUMM_TYPE"
	, sum(TOTAL_AMOUNT) AS "TOTAL_AMOUNT"
    ,sum(TOTAL_VOLUMN) as TOTAL_VOLUMN
	,  sum("TXN_COUNT2") as CARD_VOLUME,
    sum("TOTAL_MEMBER") as TOTAL_MEMBER
    ,ud_subtype
	from (--TRANSIT-TOPUP-NONMEMBER
            SELECT to_char(settlement_date,'DD/MM/YYYY') AS "SETTLEMENT_DATE"
            , ' ' as "SUMM_TYPE"
            , sum(a.transaction_value)/100 AS "TOTAL_AMOUNT"
            ,count( a.transaction_value) AS "TOTAL_VOLUMN"
            ,count(distinct a.card_serial_number) AS "TXN_COUNT2"
            ,count(distinct b.carrot_id) AS "TOTAL_MEMBER"
            ,ud_subtype
            FROM cut.cut_pi_financial a left join carrot.member b
            on a.card_serial_number = b.CARD_SERIAL_NUMBER
            WHERE settlement_date = (select max(settlement_date) FROM CUT.STREAMING_SESSION_HISTORY)-1
           -- AND A.CCH_TXN_APPROVED = 'Y'
           and(exception_list IS NULL OR exception_list NOT LIKE '%DDT%')
            AND A.ISS_TXN_REFLECTION = 'N'
            AND UD_TYPE = 3 AND UD_SUBTYPE in (10) 
            AND a.ACQUIRER_ID in (1,4)
            AND b.IS_ACTIVE = 'Y'
            GROUP BY settlement_date,ud_subtype                                          
            )group by settlement_date,ud_subtype
            
    ) group by settlement_date,ud_subtype,SUMM_TYPE,TOTAL_MEMBER

-- Purse Add Retail --
union 
select distinct(settlement_date)  AS "SETTLEMENT_DATE"
	, SUMM_TYPE
    ,sum(TOTAL_VOLUMN) as TOTAL_VOLUMN
	, sum(CARD_VOLUME) as CARD_VOLUME
    , sum(TOTAL_AMOUNT) AS "TOTAL_AMOUNT"
    ,TOTAL_MEMBER

    ,case when ud_subtype = 10   then 'Purse Add Retail' end as TXN_TYPE1
from 
(
 select distinct(settlement_date)  AS "SETTLEMENT_DATE"
	, 'Non-Carrot Member' as "SUMM_TYPE"
	, sum(TOTAL_AMOUNT) AS "TOTAL_AMOUNT"
    ,sum(TOTAL_VOLUMN) as TOTAL_VOLUMN
	,  sum("TXN_COUNT2") as CARD_VOLUME
    ,sum("TOTAL_MEMBER") as TOTAL_MEMBER
    ,ud_subtype
	from (--TRANSIT-TOPUP-NONMEMBER
            SELECT to_char(settlement_date,'DD/MM/YYYY') AS "SETTLEMENT_DATE"
            , ' ' as "SUMM_TYPE"
            , sum(a.transaction_value)/100 AS "TOTAL_AMOUNT"
            ,count( a.transaction_value) AS "TOTAL_VOLUMN"
            ,count(distinct a.card_serial_number) AS "TXN_COUNT2"
            ,count(distinct b.carrot_id) AS "TOTAL_MEMBER"
            ,ud_subtype
            FROM cut.cut_pi_financial a left join carrot.member b
            on a.card_serial_number = b.CARD_SERIAL_NUMBER
            WHERE settlement_date = (select max(settlement_date) FROM CUT.STREAMING_SESSION_HISTORY)-1
            --AND A.CCH_TXN_APPROVED = 'Y'
            and(exception_list IS NULL OR exception_list NOT LIKE '%DDT%')
            AND A.ISS_TXN_REFLECTION = 'N'
            AND UD_TYPE = 3 AND UD_SUBTYPE = 10 
           -- AND ((a.ACQUIRER_ID = 11) OR (a.ACQUIRER_ID = 12))
           AND a.ACQUIRER_ID not in (1,4)
            and b.CARD_SERIAL_NUMBER is null
            GROUP BY settlement_date,ud_subtype                                          
            )group by settlement_date,ud_subtype
     union 
     select distinct(settlement_date)  AS "SETTLEMENT_DATE"
	, 'Carrot Member' as "SUMM_TYPE"
	, sum(TOTAL_AMOUNT) AS "TOTAL_AMOUNT"
    ,sum(TOTAL_VOLUMN) as TOTAL_VOLUMN
	,  sum("TXN_COUNT2") as CARD_VOLUME,
    sum("TOTAL_MEMBER") as TOTAL_MEMBER
    ,ud_subtype
	from (--TRANSIT-TOPUP-NONMEMBER
            SELECT to_char(settlement_date,'DD/MM/YYYY') AS "SETTLEMENT_DATE"
            , ' ' as "SUMM_TYPE"
            , sum(a.transaction_value)/100 AS "TOTAL_AMOUNT"
            ,count( a.transaction_value) AS "TOTAL_VOLUMN"
            ,count(distinct a.card_serial_number) AS "TXN_COUNT2"
            ,count(distinct b.carrot_id) AS "TOTAL_MEMBER"
            ,ud_subtype
            FROM cut.cut_pi_financial a left join carrot.member b
            on a.card_serial_number = b.CARD_SERIAL_NUMBER
            WHERE settlement_date = (select max(settlement_date) FROM CUT.STREAMING_SESSION_HISTORY)-1
            --AND A.CCH_TXN_APPROVED = 'Y'
            and(exception_list IS NULL OR exception_list NOT LIKE '%DDT%')
            AND A.ISS_TXN_REFLECTION = 'N'
            AND UD_TYPE = 3 AND UD_SUBTYPE in (10) 
            --AND ((a.ACQUIRER_ID = 11) OR (a.ACQUIRER_ID = 12))
            AND a.ACQUIRER_ID not in (1,4)
            AND b.IS_ACTIVE = 'Y'
            GROUP BY settlement_date,ud_subtype                                          
            )group by settlement_date,ud_subtype
            
    ) group by settlement_date,ud_subtype,SUMM_TYPE,TOTAL_MEMBER
    

union
-- summ--
	--'RABBIT CARD COUNT'
	SELECT  to_char(sysdate-1,'DD/MM/YYYY')  AS "SETTLEMENT_DATE"
	,'TOTAL RABBIT CARD' AS "SUMM_TYPE"
	, count(ca.CSC_serial_number) as "TOTAL_AMOUNT"
	, null as TOTAL_VOLUMN
	, null as CARD_VOLUME,
      null  as TOTAL_MEMBER
    ,null as ud_subtype  
    
    FROM card_account ca, product_account pa, application_account aa
       WHERE ca.account_state NOT IN (4, 6, 7)
       AND pa.prod_type = 256
       AND ca.csc_serial_number = pa.csc_serial_number(+)
       AND ca.csc_lifecycle_count = pa.csc_lifecycle_count(+)
       AND ca.csc_issuer_id = pa.csc_issuer_id(+)
       AND ca.csc_type = pa.csc_type(+)
       AND ca.csc_serial_number = aa.csc_serial_number(+)
       AND ca.csc_lifecycle_count = aa.csc_lifecycle_count(+)
       AND ca.csc_issuer_id = aa.csc_issuer_id(+)
       AND ca.csc_type = aa.csc_type(+)
      group by to_char(sysdate-1,'DD/MM/YYYY') 
order by TXN_TYPE1      
;

loop  --loop detail--
         Fetch detail into v_SETTLEMENT_DATE,v_CARROT_MEMBER,v_TXN_VOLUME,v_CARD_VOLUME,v_TOTAL_AMOUNT,v_TOTAL_MEMBER,v_TXN_TYPE;
            
          Exit When detail%NOTFOUND;
            
           v_log := v_SETTLEMENT_DATE||','||v_CARROT_MEMBER||','||v_TXN_VOLUME||','||v_CARD_VOLUME||','||v_TOTAL_AMOUNT||','||v_TOTAL_MEMBER||','||v_TXN_TYPE||','|| CHR(13); 
          
          UTL_FILE.PUT_LINE(fHandle, v_log);
          UTL_FILE.FFLUSH(fHandle);

        end loop;--end loop detail--
        close detail;
      UTL_FILE.FCLOSE(fHandle);
    end;

end transit_retail_with_crr_mem;



 PROCEDURE MONTHLY_A006_AEON_CREDIT  AS 

    BEGIN
          
           DECLARE
        
          fhandle utl_file.file_type;
          v_date VARCHAR2(11);
          TYPE gencurtyp IS REF CURSOR;
              detail gencurtyp;
              v_log  VARCHAR2(1000);
              v_header_rec VARCHAR2(1000);


              V_SERVICE_PARTICIPANT_ID VARCHAR2(100); 
              V_SERVICE_PARTICIPANT_NAME VARCHAR2(200);
			  V_PARTICIPANT_ID VARCHAR2(100);
			  V_PARTICIPANT_NAME VARCHAR2(200);
			  V_RECON_DATE date;
			  V_CCH_SETTLEMENT_DATE date;
			  V_TXN_DESCRIPTION  VARCHAR2(100);
			  V_CCH_GFS_VOLUME VARCHAR2(100);
			  V_CCH_GFS_VALUE VARCHAR2(100);
              
              

            BEGIN
              ----get settlement_date ----
              SELECT to_char(SYSDATE,'DD-MON-YYYY')
              INTO v_date
              FROM dual;
            ---------------------------
            fhandle :=utl_file.fopen('EX_DATA_BE','MONTHLY_A006_AEON_CREDIT_'|| v_date || '.csv','w');--Opening a file
            -------------- HEADER ----------------
            SELECT 'SERVICE_PARTICIPANT_ID,SERVICE_PARTICIPANT_NAME,PARTICIPANT_ID,PARTICIPANT_NAME,RECON_DATE,CCH_SETTLEMENT_DATE,TXN_DESCRIPTION,CCH_GFS_VOLUME,CCH_GFS_VALUE' AS HEADER
            INTO v_header_rec
            FROM dual ;
            --------------END HEADER ----------------
            --------------WRITE HEADER---------------
            v_log := v_header_rec ||chr(13);
            utl_file.put_line(fhandle, v_log);
            -----------------------------------------
            OPEN detail FOR 
            
  
  
 SELECT   OSUMM.SERVICE_ID AS SERVICE_PARTICIPANT_ID,
                        reports.BKK_INT_FUN.GetParticipantLongName (OSUMM.SERVICE_ID) AS SERVICE_PARTICIPANT_NAME,
                        OSUMM.SOURCE_ID AS PARTICIPANT_ID,
                        reports.BKK_INT_FUN.GetParticipantLongName (OSUMM.SOURCE_ID) AS PARTICIPANT_NAME,
                        OSUMM.RECON_DATE AS RECON_DATE,
                        OSUMM.CCH_SETTLEMENT_DATE AS CCH_SETTLEMENT_DATE,
                        reports.BKK_INT_FUN.GetTransactionDesc (OSUMM.TXN_TYPE, OSUMM.TXN_SUB_TYPE) AS TXN_DESCRIPTION,
                        SUM (OSUMM.GFS_VOLUME)       AS CCH_GFS_VOLUME,
                        SUM (OSUMM.GFS_VALUE) * 0.01 AS CCH_GFS_VALUE
                        
                 FROM   fv_eod_online_summ osumm
                WHERE -- select only transactions that are reconcilable between tiers 5 and 3
                      ( reports.BKK_INT_FUN.IsReconcilable (osumm.txn_type, osumm.txn_sub_type) = 1)
                        AND-- select only transactions that have come from the devices (i.e. not system generated)
                            (reports.bkk_int_fun.IsSystemTxn (osumm.txn_type, osumm.txn_sub_type) = 0
                             AND osumm.fin_type <> 'P')
                             AND (osumm.txn_type = 3)
                             AND (osumm.txn_sub_type in (10))
                             AND (osumm.payment_method = 4)
                             AND (osumm.service_id =32)
                             --AND (vserviceid IS NULL OR osumm.service_id = 32)
                            AND osumm.cch_settlement_date between reports.bkk_int_dfv.getlastmonthfirsdate and reports.bkk_int_dfv.getlastmonthlastdate(sysdate)  --sutimak 15/07/2021
             GROUP BY   OSUMM.SERVICE_ID,
                        OSUMM.SOURCE_ID,
                        OSUMM.RECON_DATE,
                        OSUMM.CCH_SETTLEMENT_DATE,
                        OSUMM.TXN_TYPE,
                        OSUMM.TXN_SUB_TYPE
                        
    union 
 
            SELECT /*RP_SD_RECONCILIATION.R001_TxnSummyByDevice*/   
                        OSUMM.SERVICE_ID AS SERVICE_PARTICIPANT_ID,
                        reports.BKK_INT_FUN.GetParticipantLongName (OSUMM.SERVICE_ID) AS SERVICE_PARTICIPANT_NAME,
                        OSUMM.SOURCE_ID AS PARTICIPANT_ID,
                        reports.BKK_INT_FUN.GetParticipantLongName (OSUMM.SOURCE_ID) AS PARTICIPANT_NAME,
                        OSUMM.RECON_DATE AS RECON_DATE,
                        OSUMM.CCH_SETTLEMENT_DATE AS CCH_SETTLEMENT_DATE,
                        reports.BKK_INT_FUN.GetTransactionDesc (OSUMM.TXN_TYPE, OSUMM.TXN_SUB_TYPE) AS TXN_DESCRIPTION,
                        SUM (OSUMM.GFS_VOLUME)       AS CCH_GFS_VOLUME,
                        SUM (OSUMM.GFS_VALUE) * 0.01 AS CCH_GFS_VALUE
                        
                 FROM   fv_eod_online_summ osumm
                WHERE   (osumm.txn_type = 3)
                             AND (osumm.txn_sub_type in (39))
                             AND (osumm.payment_method = 4)
                             AND (osumm.service_id =32)
                             --AND (vserviceid IS NULL OR osumm.service_id = 32)
                            AND osumm.cch_settlement_date between reports.bkk_int_dfv.getlastmonthfirsdate and reports.bkk_int_dfv.getlastmonthlastdate(sysdate)  --sutimak 15/07/2021
             GROUP BY   OSUMM.SERVICE_ID,
                        OSUMM.SOURCE_ID,
                        OSUMM.RECON_DATE,
                        OSUMM.CCH_SETTLEMENT_DATE,
                        OSUMM.TXN_TYPE,
                        OSUMM.TXN_SUB_TYPE
            ORDER BY PARTICIPANT_ID,
                     RECON_DATE,
                     CCH_SETTLEMENT_DATE,
                     TXN_DESCRIPTION ;
					 
					 
					 
                              
            loop
			
              fetch detail
              INTO 
              
			  V_SERVICE_PARTICIPANT_ID , 
              V_SERVICE_PARTICIPANT_NAME,
			  V_PARTICIPANT_ID,
			  V_PARTICIPANT_NAME,
			  V_RECON_DATE,
			  V_CCH_SETTLEMENT_DATE,
			  V_TXN_DESCRIPTION,
			  V_CCH_GFS_VOLUME,
			  V_CCH_GFS_VALUE;

              
              exit
            WHEN detail%notfound;
			  
			   v_log := V_SERVICE_PARTICIPANT_ID || ',' || V_SERVICE_PARTICIPANT_NAME || ',' || V_PARTICIPANT_ID || ',' || V_PARTICIPANT_NAME || ',' ||
			   V_RECON_DATE|| ',' || V_CCH_SETTLEMENT_DATE || ',' || V_TXN_DESCRIPTION || ',' || V_CCH_GFS_VOLUME || ',' || V_CCH_GFS_VALUE ||CHR(13);

              
              utl_file.put_line(fhandle, v_log);
              utl_file.fflush(fhandle);
              
            END loop ;
            CLOSE detail;

            utl_file.fclose(fhandle);
          END;
          
          
         --send mail--
           DECLARE
          smtpservername VARCHAR2(200);
          sender VARCHAR2(200);
          recipient VARCHAR2(250);
          ccrecipient VARCHAR2(250);
          bccrecipient VARCHAR2(250);
          subject VARCHAR2(250);
          BODY VARCHAR2(250);
          errormessage VARCHAR2(250);
          attachments sendmailjpkg.attachments_list;
          v_return NUMBER;
          v_date date;
         
          BEGIN
          
            SELECT to_char(SYSDATE,'dd-MON-yyyy')
              INTO v_date
              FROM dual;
           
            dbms_java.grant_permission( 'BSS', 'SYS:java.io.FilePermission', '/export/home/bssuser/dba_directory/PL_SQL/EX_DATA/MONTHLY_A006_AEON_CREDIT_'|| to_char(SYSDATE,'DD-MON-YYYY') || '.csv', 'read' );
            COMMIT;
            smtpservername := '127.0.0.1';
            sender := 'be@rabbit.co.th';
            recipient := 'sutimak@rabbit.co.th';
            ccrecipient := 'be@rabbit.co.th';
            bccrecipient := NULL;
            subject := 'Monthly AEON ATU_' || to_char(SYSDATE, 'YYYYMMDD') ;
            BODY := 'Dear All,' || chr(13) || chr(13) ||
        
                        '   MONTHLY_A006_AEON_CREDIT.' || to_char(SYSDATE, 'YYYYMMDD') || ' as attached.' || chr(13) || chr(13) ||
        
                      'Best Regards,'|| chr(13) 
                      ;
            -- Modify the code to initialize the variable
            attachments := sendmailjpkg.attachments_list('/export/home/bssuser/dba_directory/PL_SQL/EX_DATA/MONTHLY_A006_AEON_CREDIT_'|| to_char(SYSDATE,'DD-MON-YYYY') || '.csv');
            v_return := sendmailjpkg.sendmail(
              smtpservername => smtpservername,
              sender => sender,
              recipient => recipient,
              ccrecipient => ccrecipient,
              bccrecipient => bccrecipient,
              subject => subject,
              BODY => BODY,
              errormessage => errormessage,
              attachments => attachments
            );
            
          END; 
    
          
       END MONTHLY_A006_AEON_CREDIT;

PROCEDURE Weekly_Topup_NOTKYC
    AS 

    BEGIN
          
           DECLARE
        
          fhandle utl_file.file_type;
          v_date VARCHAR2(11);
          TYPE gencurtyp IS REF CURSOR;
              detail gencurtyp;
              v_log  VARCHAR2(1000);
              v_header_rec VARCHAR2(1000);
             
              V_CARD_SERIAL_NUMBER VARCHAR2(100);
              V_CARD_TYPE VARCHAR2(100);
              V_TXN_TYPE VARCHAR2(100);
              V_TXN_DATE_TIME date;
              V_EQUIPMENT_NUMBER VARCHAR2(50);
              V_LOCATION_NAME VARCHAR2(100);
              V_AMOUNT number;
              V_FLAG_ON_CARD number;
             -- v_check_txn       NUMBER;
              
              
--cursor NOT_KYC is
            BEGIN
              ----get settlement_date ----
              SELECT to_char(SYSDATE,'DD-MON-YYYY')
              INTO v_date
              FROM dual;
            ---------------------------
            fhandle :=utl_file.fopen('EX_DATA_BE','Weekly_Topup_NOTKYC'|| v_date || '.csv','w');--Opening a file
            
            -------------- HEADER ----------------
            SELECT ' CARD_SERIAL_NUMBER,CARD_TYPE,TXN_TYPE ,TXN_DATE_TIME,EQUIPMENT_NUMBER,LOCATION_NAME,AMOUNT,FLAG_ON_CARD' AS HEADER
            INTO v_header_rec
            FROM dual ;
            --------------END HEADER ----------------
            --------------WRITE HEADER---------------
            v_log := v_header_rec ||chr(13);
            utl_file.put_line(fhandle, v_log);
            -----------------------------------------
OPEN detail FOR 
                
select CARD_SERIAL_NUMBER,CARD_TYPE,TXN_TYPE,TXN_DATE_TIME,EQUIPMENT_NUMBER,LOCATION_NAME,AMOUNT,FLAG_ON_CARD 
from (
select a.Application_Personalise_cat as flag_on_card,a.card_serial_number,
reports.bkk_int_fun.getpassengertype(aa.passenger_Type,a.data_version,'EN') AS CARD_TYPE,
a.settlement_date,a.ud_subtype,a.transaction_value/100 as AMOUNT,
to_date(RP_STD.TOLOCALTIME(TXN_DATE_TIME),'DD-MON-YY HH24:MI:SS') AS TXN_DATE_TIME
,L.location_name,a.equipment_number,REPORTS.BKK_INT_FUN.GETTRANSACTIONDESC (a.UD_TYPE,a.UD_SUBTYPE) AS TXN_TYPE 
FROM cut_pi_financial a
left join SYSCD_LOCATION L on (to_number(substr(to_char(a.device_location,'XXXXXXXX'),-6,6),'XXXXXXXX')=L.location_code) and (a.source_participant_id=L.participant_id) and (a.DATA_VERSION=L.DATA_VERSION) and (L.location_type in (9,15,16,21))  
left join SYSTEMCD.SYSCD_TXN T on (a.DATA_VERSION=T.DATA_VERSION) AND (a.UD_TYPE=T.TXN_TYPE) AND  (a.UD_SUBTYPE=T.TXN_SUBTYPE)
left join application_account aa on a.card_serial_number = aa.csc_serial_number and a.CARD_LIFE_CYCLE_COUNT = aa.csc_lifecycle_count
left join SYSCD_PASSENGER_TYPE p on p.passenger_type = aa.Passenger_type and p.data_version = a.data_version
where a.ud_type = 3 and a.ud_subtype =10
and a.source_participant_id = 1 
and cch_txn_approved = 'Y'
and a.settlement_date between TRUNC(SYSDATE-7)  and  TRUNC(SYSDATE-1)
and not  exists ( select  'x'  from ATUAGENT.atu_personalise_detail atu
              where substr(atu.bss_card_number,4,9) = lpad(a.card_serial_number,9,'0')
              --and trunc(atu.time_loaded) >= TRUNC(SYSDATE-10)
              )
);

            loop
              fetch detail
              INTO 
               V_CARD_SERIAL_NUMBER ,
               V_CARD_TYPE,
              V_TXN_TYPE ,
              V_TXN_DATE_TIME ,
              V_EQUIPMENT_NUMBER ,
              V_LOCATION_NAME ,
              V_AMOUNT,
              V_FLAG_ON_CARD;
              

              
              exit
            WHEN detail%notfound;
             
              v_log := V_CARD_SERIAL_NUMBER||','||V_CARD_TYPE||','||V_TXN_TYPE||','||V_TXN_DATE_TIME||','||V_EQUIPMENT_NUMBER||','||V_LOCATION_NAME||','||V_AMOUNT||','||V_FLAG_ON_CARD||chr(13);
              
              utl_file.put_line(fhandle, v_log);
              utl_file.fflush(fhandle);
              
            END loop ;
            CLOSE detail;

            utl_file.fclose(fhandle);
          END;
          
   
      
            
         --send mail--
           DECLARE
          smtpservername VARCHAR2(200);
          sender VARCHAR2(200);
          recipient VARCHAR2(250);
          ccrecipient VARCHAR2(250);
          bccrecipient VARCHAR2(250);
          subject VARCHAR2(250);
          BODY VARCHAR2(250);
          errormessage VARCHAR2(250);
          attachments sendmailjpkg.attachments_list;
          v_return NUMBER;
          v_date date;
          card_count NUMBER;

         
          BEGIN
          
            SELECT to_char(SYSDATE,'dd-MON-yyyy')
              INTO v_date
              FROM dual;
           
           

        select count(CARD_SERIAL_NUMBER) into card_count
        from (
        select a.Application_Personalise_cat as flag_on_card,a.card_serial_number,a.transaction_value/100 as value
        FROM cut_pi_financial a
        where a.ud_type = 3 and a.ud_subtype =10
        and a.source_participant_id = 1 
        and cch_txn_approved = 'Y'
        and a.settlement_date between TRUNC(SYSDATE-7)  and  TRUNC(SYSDATE-1) 
        and not  exists ( select  'x'  from ATUAGENT.atu_personalise_detail atu
                      where substr(atu.bss_card_number,4,9) = lpad(a.card_serial_number,9,'0')
                      --and trunc(atu.time_loaded) >= TRUNC(SYSDATE-10)
                      )
        )
        ;
            
            
       
            dbms_java.grant_permission( 'BSS', 'SYS:java.io.FilePermission', '/export/home/bssuser/dba_directory/PL_SQL/EX_DATA/Weekly_Topup_NOTKYC'|| to_char(SYSDATE,'DD-MON-YYYY') || '.csv', 'read' );
           
            --CARD_KYC_NOT_RECEIVED_AT
            COMMIT;                         
           smtpservername := '127.0.0.1';
            sender := 'be@rabbit.co.th';
           -- recipient := 'fe@rabbit.co.th,arrakp@rabbit.co.th';
            recipient := 'paleerats@rabbit.co.th,nanthayar@rabbit.co.th,sarayutb@rabbit.co.th,arrakp@rabbit.co.th,sirilucks@rabbit.co.th';
            ccrecipient := 'be@rabbit.co.th,fe@rabbit.co.th';
            bccrecipient := NULL;
            subject := 'WEEKLY CARD TOPOUP NOTKYC_' || to_char(SYSDATE, 'YYYYMMDD') ;
            BODY := 'Dear ALL,' || chr(13) || chr(13) ||                              
                        
                        ' Please help to check transaction as attached.' ||chr(13) || chr(13) ||
                        '     card topup at BTS NOTKYC:  ' || card_count ||chr(13) || chr(13) ||
                      
                      'Best Regards,'|| chr(13) 
                      ;
            -- Modify the code to initialize the variable
            attachments := sendmailjpkg.attachments_list('/export/home/bssuser/dba_directory/PL_SQL/EX_DATA/Weekly_Topup_NOTKYC'|| to_char(SYSDATE,'DD-MON-YYYY') || '.csv');
            
            
            v_return := sendmailjpkg.sendmail(
              smtpservername => smtpservername,
              sender => sender,
              recipient => recipient,
              ccrecipient => ccrecipient,
              bccrecipient => bccrecipient,
              subject => subject,
              BODY => BODY,
              errormessage => errormessage,
              attachments => attachments
            );
            
          END; 

END Weekly_Topup_NOTKYC;

end X_BE;